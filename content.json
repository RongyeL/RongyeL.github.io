{"meta":{"title":"IC攻城狮的摸鱼小屋","subtitle":"To be a better IC engineer, maybe?","description":"记录自己在IC领域的所学所想。","author":"Rong晔","url":"https://RongyeL.github.io","root":"/"},"pages":[{"title":"about","date":"2023-10-27T16:36:22.000Z","updated":"2023-10-27T16:36:51.000Z","comments":false,"path":"about/index.html","permalink":"https://rongyel.github.io/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-10-24T16:30:57.000Z","updated":"2023-10-24T16:34:06.000Z","comments":false,"path":"tags/index.html","permalink":"https://rongyel.github.io/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2023-10-24T16:31:05.000Z","updated":"2023-10-24T16:34:27.000Z","comments":false,"path":"categories/index.html","permalink":"https://rongyel.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"2025 东京 出游物品清单","slug":"认真生活/世界巡礼/2025 东京单人游/2025 东京 出游物品清单","date":"2025-09-06T15:52:17.744Z","updated":"2025-09-07T14:27:03.090Z","comments":true,"path":"posts/e110af67.html","permalink":"https://rongyel.github.io/posts/e110af67.html","excerpt":"","text":"2025 东京 出游物品清单关联项目: 2025 东京单人游 证件 身份证 护照（有效期6个月以上） 往返机票（电子+纸质备份） 酒店预订信息（电子+纸质） 信用卡 日元现金（找零钱） 紧急联系人信息 护照复印件 电子设备 手机 充电器 充电宝 相机 &amp; 备用电池 插座转换器（日本为双平脚）-&gt; 不要带三角插头设备 日本电话卡 Google Maps（收藏地点、路线） 翻译工具 Steamdeck 衣物 外套 三套衣裤 一次性内衣裤 &amp; 袜子 随身物品 摄影双肩包 斜挎包 垃圾袋 手机 手账本 雨伞","categories":[{"name":"2025 东京单人游","slug":"2025-东京单人游","permalink":"https://rongyel.github.io/categories/2025-%E4%B8%9C%E4%BA%AC%E5%8D%95%E4%BA%BA%E6%B8%B8/"}],"tags":[{"name":"旅游","slug":"旅游","permalink":"https://rongyel.github.io/tags/%E6%97%85%E6%B8%B8/"},{"name":"日本","slug":"日本","permalink":"https://rongyel.github.io/tags/%E6%97%A5%E6%9C%AC/"},{"name":"世界巡礼","slug":"世界巡礼","permalink":"https://rongyel.github.io/tags/%E4%B8%96%E7%95%8C%E5%B7%A1%E7%A4%BC/"}]},{"title":"运动习惯打卡","slug":"认真生活/身心健康/运动日常化/运动习惯打卡","date":"2025-09-04T15:43:14.391Z","updated":"2025-09-07T14:27:03.098Z","comments":true,"path":"posts/511ce4ff.html","permalink":"https://rongyel.github.io/posts/511ce4ff.html","excerpt":"","text":"运动习惯打卡关联项目: [[运动日常化]] 运动打卡 #TODO #habit 运动 [repeat:: every day when done] [due:: 2025-09-08] #TODO #habit 运动 [repeat:: every day when done] [due:: 2025-09-04] [completion:: 2025-09-07]","categories":[{"name":"运动日常化","slug":"运动日常化","permalink":"https://rongyel.github.io/categories/%E8%BF%90%E5%8A%A8%E6%97%A5%E5%B8%B8%E5%8C%96/"}],"tags":[{"name":"身心健康","slug":"身心健康","permalink":"https://rongyel.github.io/tags/%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7/"},{"name":"运动","slug":"运动","permalink":"https://rongyel.github.io/tags/%E8%BF%90%E5%8A%A8/"},{"name":"健康","slug":"健康","permalink":"https://rongyel.github.io/tags/%E5%81%A5%E5%BA%B7/"}]},{"title":"人为什么要工作呢？","slug":"思维殿堂/个人浅见/人为什么要工作呢？","date":"2025-09-04T15:27:43.196Z","updated":"2025-09-07T14:27:02.918Z","comments":true,"path":"posts/e9389d22.html","permalink":"https://rongyel.github.io/posts/e9389d22.html","excerpt":"","text":"人为什么要工作呢？打工不能致富看到XHS上有人说，一年赚20w，30年也才600w，没什么意思，为什么要工作。 emmmmm，说实话，槽点很多。且不说到手肯定没有20W，30年工资完全不涨也不太可能，但最大的问题在于：不能赚大钱，工作就没有意义吗？ NONONO，如果说你家境殷实，那确实是没有意义。但对于99%的普通人而言，工作，是为了生存。 老实打工赚辛苦钱，那确实是没办法赚大钱的。但绝大部分人也没办法，赚老实打工以外的钱啊。 所以，作为普通家庭的孩子，老老实实找份高薪岗位打一辈子工，过的衣食无忧就可以了。 还是这个时代太复杂了，人们基本的温饱已经得到满足，生活相对自由，所以一个个都有了更高的追求。老一辈追求的不饿肚子，现在根本不算什么了。 知足，是现在这个时代的人民最需要的品质。","categories":[{"name":"个人浅见","slug":"个人浅见","permalink":"https://rongyel.github.io/categories/%E4%B8%AA%E4%BA%BA%E6%B5%85%E8%A7%81/"}],"tags":[{"name":"工作","slug":"工作","permalink":"https://rongyel.github.io/tags/%E5%B7%A5%E4%BD%9C/"},{"name":"人生","slug":"人生","permalink":"https://rongyel.github.io/tags/%E4%BA%BA%E7%94%9F/"}]},{"title":"记录，第二次给小红造景","slug":"认真生活/家有小红/记录，第二次给小红造景","date":"2025-09-03T15:58:59.847Z","updated":"2025-09-07T14:27:02.946Z","comments":true,"path":"posts/3b43d27a.html","permalink":"https://rongyel.github.io/posts/3b43d27a.html","excerpt":"","text":"记录，第二次给小红造景全景观赏先看看全景，再次塞了四、五珠植物进去底层是椰土等混合土，上层厚铺树皮地表。压几块青龙石点缀。左边的屋子换成大平房，主要是避免龟龟爬坡翻车。 鸭掌木本次寄予厚望的绿植。所有的陆龟都是推土机，只是苏卡达最厉害而已。小红也是小型陆地坦克，普通的植物要是比较柔弱，会被轻松推倒踩扁。比如这里的狼尾蕨，我是觉得它好看又再买了两株作为矮景，但第一天晚上我就感觉它们快不行了…… 买的老桩鸭掌木，有比较粗壮的树干，这个就比较稳了，扎在土里，边上铺点东西让小红无法直接挤进去，貌似没啥问题。 遵循 见干见湿 原则，土表发干再浇透。 喜半阴，避免烈日直晒，尤其是夏季中午。 易徒长，需及时剪掉过长或杂乱枝条，保持株型紧凑美观 适宜温度 16-27℃，冬季不低于 5℃ 迷你椰子这个上次也买过，活得算比较久的了。估计是我养的不好，后面变枯变黄了，最终还是被小红推倒了。这次其实是套餐买回来的，种在角落里，希望能种得更久一些。 生长季（春夏）保持土壤微湿，见干就浇，不能长期干旱 喜半阴，避免长时间烈日直射，尤其是夏季中午 喜湿润空气，可经常向叶面和周围喷雾。 最适温度 18-24℃，低于 10℃ 会进入休眠 小红怎么说小红应该是很喜欢的，刚送回缸里，立马就扎到绿植丛中了。心痛我的绿植。只能说，这些绿植我可能都没法真正的长期种下去，能坚持三个月就是我的目标。后续就重新买重新更换吧。","categories":[{"name":"家有小红","slug":"家有小红","permalink":"https://rongyel.github.io/categories/%E5%AE%B6%E6%9C%89%E5%B0%8F%E7%BA%A2/"}],"tags":[{"name":"爬宠","slug":"爬宠","permalink":"https://rongyel.github.io/tags/%E7%88%AC%E5%AE%A0/"},{"name":"红腿陆龟","slug":"红腿陆龟","permalink":"https://rongyel.github.io/tags/%E7%BA%A2%E8%85%BF%E9%99%86%E9%BE%9F/"},{"name":"家有小红","slug":"家有小红","permalink":"https://rongyel.github.io/tags/%E5%AE%B6%E6%9C%89%E5%B0%8F%E7%BA%A2/"},{"name":"造景","slug":"造景","permalink":"https://rongyel.github.io/tags/%E9%80%A0%E6%99%AF/"}]},{"title":"美食探店","slug":"认真生活/美食探店","date":"2025-09-02T14:22:40.000Z","updated":"2025-09-07T08:41:43.107Z","comments":true,"path":"posts/efffe449.html","permalink":"https://rongyel.github.io/posts/efffe449.html","excerpt":"","text":"美食探店核心目标记录并管理所有与餐厅、美食探店相关的笔记，包括： 想去的餐厅清单 已探店记录 评分与体验 探店计划 #深圳 TAGSIU 美食档案","categories":[],"tags":[{"name":"美食","slug":"美食","permalink":"https://rongyel.github.io/tags/%E7%BE%8E%E9%A3%9F/"},{"name":"餐厅","slug":"餐厅","permalink":"https://rongyel.github.io/tags/%E9%A4%90%E5%8E%85/"}]},{"title":"Obsidian PARA架构设计","slug":"认真生活/笔记人生/基于PARA法的任务管理架构实现/Obsidian PARA架构设计","date":"2025-09-02T14:22:40.000Z","updated":"2025-09-07T14:27:03.090Z","comments":true,"path":"posts/a4b9d2b0.html","permalink":"https://rongyel.github.io/posts/a4b9d2b0.html","excerpt":"","text":"Obsidian PARA架构设计关联项目: 基于PARA法的任务管理架构实现 笔记类型笔记类型，奠定了整个笔记系统的结构，是重中之重。经过这么长时间的不断使用，迭代，我对于PARA的理解也逐步加深。原始的PARA并不适合我，现在我对笔记的类型有更多的划分，以适配我个人的使用场景以及喜好。 Projects 项目项目笔记，对于Projects笔记的理解也是加深了不少。项目笔记一定是要用来推进某件事务的完成，才建立的。必须有明确的：目标、时间点、任务分解，才有必要建立一个新的项目笔记。 由于项目可大可小，因此还需要考虑到子项目的设计。当然，子项目的出现会导致架构更加复杂，当前不允许使用。建议只是分解任务时增加小标题。 一旦建立了项目，就需要做好任务分解。项目必须有结项时间，结项的同时在相关领域建立里程碑记录。项目进展记录到项目笔记内，领域需要的只是里程碑式的记录。 项目产出笔记直接放在项目文件夹下。通过tags让领域笔记收集，一篇笔记可能关联多个领域。后续查阅要从领域去找，而不是项目。 领域笔记内有如下内容： 项目目标，立项所希望达成的结果是什么，如，制作EasyAXI系列视频并发布。 项目计划，确定项目完成各阶段的时间点，如，视频每一期发布的时间计划。 项目任务，区别于计划，这是实际分解出来的执行任务项。逐步完成每一个任务，直至达成整个项目完成。如，系列大纲分析、第1期视频脚本撰写、第1期视频代码开发等。 项目日志：记录项目推进进展，在发生项目推进的日子记录当天推进的工作情况。 项目笔记：项目产出的笔记汇总，通过dataviewjs实现。 项目资源：对项目推动有帮助的参考资料。 Areas 领域领域笔记，长期、持续、概念级。它应该是一种领域概念，而非一件具体的事物，因为它不存在所谓的工作和实体，它只应当用于收集该领域的内容，呈现、索引，而不是直接往其填写内容。 领域名称应当尽可能简洁明了，如，游戏，旅行，方法论等。可以被其他项目，笔记，档案们添加到tags中，在领域内以此检索出来。 领域笔记应该包含如下内容： 领域核心：这个领域是什么，涵盖哪些内容？ 当前关注：这个领域近期在关注什么？不是所有领域都会持续活跃的，活跃的领域在不同时间关注的内容可能也不一样。 相关笔记：就是跟这个领域存在关键性的笔记，通常通过在笔记中添加领域tag来建立关联。这样一篇笔记可能会有多个tags，也就是会关联多个领域。 相关项目：跟相关笔记类似，只是笔记的类型不同。可以在领域跟踪相关项目的进展。 特有内容：不同的领域可能会有一些特殊的记录内容，比如对于兴趣类的领域，此处就会直接关键一个数据库。比如一些习惯跟踪，那可能会建立一个周期性任务跟踪。比如有一些小的计划，美食探店，可以建立 Notes 笔记笔记，是真正承载笔记价值的文件。项目，是为了推进某件事物的完成，期间可能会生产笔记。理论上，项目完成后也是可以删除掉的。领域，是一种概念，会与多种笔记存在关联。即便没有领域笔记去汇聚，我们也可以直接访问。所以说，para一切都是虚的，只有笔记是真的。只要能一直保持记录的习惯，那么笔记系统就可以一直使用下去。Para等一切方法学，只是为了更好的管理笔记系统而已。 Notes什么内容都可能有，所以不局限是什么。 Resources 资源在我这里，只有参考文献，才算资源。通常是一些剪藏的资料。最多包含一些视频链接等。跟原本的PARA不同，我不会将自己生产的笔记，作为其他的资源。 Archives 档案Notes的变种。档案，记录事务的各种信息，如评分、作者、阅读时间、通关时间、简评等。重在规范的、格式化的信息归档。对于这件事务的感想、心得，应该撰写为笔记，在档案中链接。 Memos 备忘Notes的变种。速记灵感、感想、待办等信息，需要及时清理转化成其他类型。 系统架构图","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://rongyel.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"方法学论","slug":"方法学论","permalink":"https://rongyel.github.io/tags/%E6%96%B9%E6%B3%95%E5%AD%A6%E8%AE%BA/"},{"name":"PARA","slug":"PARA","permalink":"https://rongyel.github.io/tags/PARA/"},{"name":"Obsidian","slug":"Obsidian","permalink":"https://rongyel.github.io/tags/Obsidian/"}]},{"title":"房屋收纳空间规划","slug":"认真生活/舒适的家/打造一个舒适的窝/房屋收纳空间规划","date":"2025-08-31T01:49:05.397Z","updated":"2025-09-07T14:27:03.092Z","comments":true,"path":"posts/675afc59.html","permalink":"https://rongyel.github.io/posts/675afc59.html","excerpt":"","text":"房屋收纳空间规划关联项目: [[认真生活/舒适的家/打造一个舒适的窝]] 衣柜分左右两间，每间宽67cm 左侧空间 最上（高40cm）：开放式空间，存放双肩包、单肩包等 中间（高100cm）：带挂衣杆，悬挂全部应季上衣（按类型分区） 中下（高35cm）：开放式空间，放置折叠的应季裤子（建议使用收纳盒分隔） 最下：两个抽屉 第一个：已用于内裤和袜子 第二个：存放毛巾及备用生活用品（未开封沐浴露、洗发水、纸巾等） 右侧空间 最上（高40cm）：开放式空间，存放备用床品 中间（高38cm）：开放式空间，存放不应季的衣物 中下（高34cm）：开放式空间，存放季节性配饰（手套、帽子等） 最下（高100cm）：带挂衣杆，悬挂易皱长裤和外套，以及直立存放20寸行李箱 展示柜上方三层玻璃展柜（宽70cm） 最上层（高25cm）：模型手办展示区 中层（高25cm）：存放相机及常用镜头 下层（高35cm）：存放游戏光盘盒和少量书籍 中间抽屉 半透抽屉（65×34×11cm）：专放相机镜头、滤镜等精密器材，增加收纳棉。 实木抽屉（65×35×11cm）：收纳笔记本电脑，数码配件包 下方下拉式玻璃柜（高33cm） 存放工具箱（小至中型工具），目前收纳一些备用器件。 书桌左侧三个抽屉 最上（38×40×5cm）：存放办公文具、常用数据线及充电头 中间（38×40×16.5cm）：数码配件专区（数据线、移动电源、耳机等，使用分隔收纳盒） 最下（38×40×26cm）：存放书籍及文件资料，杂物。 中间两个抽屉 左（均49×40×5cm）：存放纸巾、牙签、遥控器等随手取用的扁平物品 右（均49×40×5cm）：存放重要证件 床底床侧3个抽屉（47×36×11cm） 存放袜子、内衣或药品、护理品等小件物品，目前闲置。 三个大格 一格：存放换季的鞋子（用鞋盒装好）,暂无。目前用于收纳数码产品包装盒。 一格：存放大瓶储备生活用品或非常用的大型工具。目前空置。","categories":[{"name":"方案分析","slug":"方案分析","permalink":"https://rongyel.github.io/categories/%E6%96%B9%E6%A1%88%E5%88%86%E6%9E%90/"}],"tags":[{"name":"家居","slug":"家居","permalink":"https://rongyel.github.io/tags/%E5%AE%B6%E5%B1%85/"},{"name":"舒适的家","slug":"舒适的家","permalink":"https://rongyel.github.io/tags/%E8%88%92%E9%80%82%E7%9A%84%E5%AE%B6/"}]},{"title":"有时候为了链接什么，必须先切割什么","slug":"思维殿堂/兴趣杂谈/游戏/有时候为了链接什么，必须先切割什么","date":"2025-08-29T14:19:49.000Z","updated":"2025-09-07T14:27:03.089Z","comments":true,"path":"posts/880c7cef.html","permalink":"https://rongyel.github.io/posts/880c7cef.html","excerpt":"","text":"送完玛玛了，我是以最慢的步速走完了最后一程。死亡搁浅这个游戏，真的很值得细品。感受里面的故事，听着那段音乐，沉浸在那种淡淡的，悲伤的氛围中，结束一段又一段的旅程。","categories":[{"name":"兴趣杂谈","slug":"兴趣杂谈","permalink":"https://rongyel.github.io/categories/%E5%85%B4%E8%B6%A3%E6%9D%82%E8%B0%88/"}],"tags":[{"name":"游戏","slug":"游戏","permalink":"https://rongyel.github.io/tags/%E6%B8%B8%E6%88%8F/"},{"name":"死亡搁浅","slug":"死亡搁浅","permalink":"https://rongyel.github.io/tags/%E6%AD%BB%E4%BA%A1%E6%90%81%E6%B5%85/"}]},{"title":"对于Projects笔记的理解","slug":"认真生活/笔记人生/基于PARA法的任务管理架构实现/对于Projects笔记的理解","date":"2025-08-25T15:23:19.853Z","updated":"2025-09-07T14:27:03.090Z","comments":true,"path":"posts/4ee67243.html","permalink":"https://rongyel.github.io/posts/4ee67243.html","excerpt":"","text":"对于Projects笔记的理解关联项目: 基于PARA法的任务管理架构实现 Projects，一定是有计划性的必须真的有需要推进的流程、需要多阶段任务完成，以实现某种目标。此时才有立项的必要。 这段时间，有效立项如下： [舒适的窝] [制作EasyAXI第六期] 无效立项如下： [游玩_怪物猎人荒野]：我打游戏根本不需要立项，因为没有分解的任务，从来不会要求自己这次打游戏需要完成哪些工作，我根本不知道这次玩会体验哪些内容。另外，通过一个游戏这么纯粹的目标，也不需要建立一个项目去跟踪。 小结首先，不要什么都立项。先思考一下，这件事情是否需要立项来跟踪完成？它是否 需要完成多件任务？ 需要持续推进？ 是否有价值？","categories":[{"name":"PARA","slug":"PARA","permalink":"https://rongyel.github.io/categories/PARA/"}],"tags":[{"name":"方法学论","slug":"方法学论","permalink":"https://rongyel.github.io/tags/%E6%96%B9%E6%B3%95%E5%AD%A6%E8%AE%BA/"},{"name":"PARA","slug":"PARA","permalink":"https://rongyel.github.io/tags/PARA/"}]},{"title":"在深圳这个地方，买房真不如租房","slug":"思维殿堂/个人浅见/在深圳这个地方，买房真不如租房","date":"2025-08-23T14:50:12.319Z","updated":"2025-09-07T14:27:02.918Z","comments":true,"path":"posts/7aea17b5.html","permalink":"https://rongyel.github.io/posts/7aea17b5.html","excerpt":"","text":"在深圳这个地方，买房真不如租房关联项目: 第一次购房计划 租金回报率对比，太差房价：1300 万 年租金：1.3 万 × 12 = 15.6 万 租金回报率 = 年租金 ÷ 房价 = 1.2% 左右 深圳住宅的平均租金回报率大约在 1.7% 左右 假设买这套房： 首付（30%）：390 万贷款（70%，30 年，利率 4%）：月供约 4.9 万，30 年总还款约 1764 万总投入（首付+还款）≈ 2154 万 租这套房：30 年总租金 ≈ 468 万差额：约 1686 万的资金差距 你现在的租金水平，等于用不到 1% 的房价占用权，享受了 100% 的居住权益。 小结 理性财务角度：继续租更划算，把差额资金做投资或保留流动性。 情感与生活角度：如果你追求稳定、可自由改造、长期定居，买房才有意义。","categories":[{"name":"个人浅见","slug":"个人浅见","permalink":"https://rongyel.github.io/categories/%E4%B8%AA%E4%BA%BA%E6%B5%85%E8%A7%81/"}],"tags":[{"name":"家居","slug":"家居","permalink":"https://rongyel.github.io/tags/%E5%AE%B6%E5%B1%85/"},{"name":"深圳","slug":"深圳","permalink":"https://rongyel.github.io/tags/%E6%B7%B1%E5%9C%B3/"},{"name":"买房","slug":"买房","permalink":"https://rongyel.github.io/tags/%E4%B9%B0%E6%88%BF/"}]},{"title":"看到恭也那么释然，我真想哭。","slug":"思维殿堂/兴趣杂谈/轻小说/看到恭也那么释然，我真想哭。","date":"2025-08-23T00:35:48.000Z","updated":"2025-09-07T14:27:03.086Z","comments":true,"path":"posts/580e7c57.html","permalink":"https://rongyel.github.io/posts/580e7c57.html","excerpt":"","text":"相关笔记：我们的重制人生看到恭也那么释然，我真想哭。第十卷真的太压抑了，对于伙伴们来讲，都是认可，都是进步。对于恭也来讲，则是放手，是释怀。 虽然下一卷就逃避了，但是他是内心想明白得到的结论。他是一个内心强大的人，只是过于抗压了……压抑自己，并不能让所有人都幸福，希望恭也能早日理解这一点。","categories":[{"name":"兴趣杂谈","slug":"兴趣杂谈","permalink":"https://rongyel.github.io/categories/%E5%85%B4%E8%B6%A3%E6%9D%82%E8%B0%88/"}],"tags":[{"name":"轻小说","slug":"轻小说","permalink":"https://rongyel.github.io/tags/%E8%BD%BB%E5%B0%8F%E8%AF%B4/"}]},{"title":"想手淫这件事情，其实从早上就开始了","slug":"认真生活/身心健康/关于手淫这件事/想手淫这件事情，其实从早上就开始了","date":"2025-08-22T16:01:20.349Z","updated":"2025-09-07T14:27:03.095Z","comments":true,"path":"posts/c7b46d52.html","permalink":"https://rongyel.github.io/posts/c7b46d52.html","excerpt":"","text":"想手淫这件事情，其实从早上就开始了关联项目: 关于手淫这件事 并不是晚上才出发的淫欲其实今天早上坐班车的时候，就已经在胡思乱想了。也不知道是什么原因，也不知道是什么触发的。反正就是有想法了，然后排解不掉。晚上吃饱饭，喝了酒，再忙碌完鱼缸的事情，突然就控制不住了。打开了视频网站，即便看着也没有状态很好，但最后还是一直看黄，直到最后导出来。 本次反思白天如果有出现迹象，晚上可能要重点关注一下。特别是周五，这种喝了酒的晚上。很容易就开始了，一旦开始真的控不住，停不下来。所以需要针对性的定一些计划，让自己不闲下来，最后直接睡觉度过这一天。","categories":[{"name":"身心健康","slug":"身心健康","permalink":"https://rongyel.github.io/categories/%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7/"}],"tags":[{"name":"健康","slug":"健康","permalink":"https://rongyel.github.io/tags/%E5%81%A5%E5%BA%B7/"},{"name":"手淫","slug":"手淫","permalink":"https://rongyel.github.io/tags/%E6%89%8B%E6%B7%AB/"}]},{"title":"关于手淫这件事","slug":"认真生活/身心健康/关于手淫这件事","date":"2025-08-22T15:59:42.812Z","updated":"2025-09-07T14:27:02.951Z","comments":true,"path":"posts/761f7ffa.html","permalink":"https://rongyel.github.io/posts/761f7ffa.html","excerpt":"","text":"关于手淫这件事手淫反省2025-09-02 差点出问题唉，睡前打开了哔咔，又看了二十分钟。不仅算熬了夜，还差点破功。不过没掏出来所以还算是控制住了。 额，现在是2点40。很遗憾，失眠了，满脑子想着黄色。最后还是打开电脑看了1个小时Pica，看的还是我收藏的精品。这一个小时看下来，虽然期间没有用手触碰，但其实已经一直在积攒了，最后轻轻撸两下，就射了超级多。 那么本轮戒撸结束，距离上次间隔9天。 2025-08-31 很好，保护一周了这周虽然看了一次，但控制住自己直接去睡觉了。 2025-08-29 今天打断了一次，无聊想打开黄页的冲动。赶紧刷牙直接睡觉！不能因为闲得无聊就去看黄，毫无意义，浪费时间。 2025-08-23 立项啦，以后每次破功就写篇忏悔。 今天反正是爽了，记录一下自己为什么会这样。 手淫打卡 #TODO #habit 释放 [repeat:: every day when done] [due:: 2025-09-05] #TODO 释放 [repeat:: every day when done] [due:: 2025-09-02] [completion:: 2025-09-04]","categories":[{"name":"习惯打卡","slug":"习惯打卡","permalink":"https://rongyel.github.io/categories/%E4%B9%A0%E6%83%AF%E6%89%93%E5%8D%A1/"}],"tags":[{"name":"身心健康","slug":"身心健康","permalink":"https://rongyel.github.io/tags/%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7/"}]},{"title":"打造岛屿书桌","slug":"认真生活/舒适的家/打造一个舒适的窝/打造岛屿书桌","date":"2025-08-21T15:53:27.000Z","updated":"2025-09-07T14:27:03.094Z","comments":true,"path":"posts/d666206a.html","permalink":"https://rongyel.github.io/posts/d666206a.html","excerpt":"既要能放下大显示器，又要具备储物能力，还要能美观展示。自己琢磨了一种组合式书桌的搭建方案。","text":"打造岛屿书桌关联项目: 打造一个舒适的窝 书桌选择了最扎实沉稳的设计。两侧是扎实的U型桌脚，左边的桌脚用抽屉柜顶替，整个桌面呈方形，一眼方正的那种。桌子的规格，斟酌再三还是选择了180x80x75的尺寸。首先，桌子180没问题，仔细测量了房间的墙，190的总长，最右边留10cm给电动窗帘活动，剩下摆180桌子刚刚好。桌深80真的是纠结了很久，因为房间还是太小了。床选了120cm，桌深再80cm的话，那就只剩下50+cm作为中间过道了。这导致我的活动空间会比较少。但桌子大又真的很重要，显示器以及桌面布置都可以获得更大的自由度，因此最后还是选择了80cm深。唉，取舍就在方寸之间。 桌下理线器由于桌子增加了2个抽屉，所以桌下并非完全空缺的，因此不能搞一个长的，大插座。每个抽屉后面都大概有50cm的长，20cm的宽。因此最后找到了如下的理线槽，带插座的那种。不是因为觉得它好看，就是因为它的尺寸很完美，长度44cm。宽度15cm，可以说是完美用上了剩余的空间。直接买两个。 纸巾收纳目前看到比较好的是一个侧边竖着的纸巾盒，表面黑胡桃木的。不过想了想，暂时不固定纸巾的位置。因为还可能增加桌下柜以及边柜，可能纸巾放远一点。现在直接将纸巾放在右手边抽屉里，取用其实也挺方便的。 展柜最开始买了一个214cm的柜子，可以做到满墙。心动了很久，下单了一周后还没有发货，也就退掉了。首先是意识到了这个柜子太高了，我房门只有200cm，到时候这个柜子进来很不方便。其次是，本来那个柜子我是想侧着靠着桌子放的，但后来觉得这样不够美观，因为只有坐在桌子上才能看到柜子的正面。而且那个柜子的上层好几层都是空架，没有什么设计也。所以最后就取消订单了。 现在选了下面这个架子，75cm，目标就是横着放了，能够把左边那面墙挡住75%。可以遮挡住下面几个难看的插排。当然，这个柜子估计没法贴墙放。正面看也很有设计感，上面的大玻璃柜门，放我的各种展示物，相机，雕像等。中间的半透柜门跟我的桌子还有一点设计延续性。下面两个柜门设计感也挺好，整体从正面看过去就非常的好看。高度182cm，可以正着送到房间里，这个估计能带来不少的便利。 桌下柜【放弃】不能选120cm那个，太长了。有很大一段都被桌子压住了，其实使用起来会很不方便。其实，不能选太宽的。我现在的桌子左边已经被柜子占了不少空间了，右边不能再大量挤占我的腿部空间，否则有拘束感那就没有意义了。现在还没选好。 桌下柜选择直接放弃。想了想，床和桌的间隙太小了，放任何柜子，大部分空间都是被桌子挡住了，使用很不方便。暂且不添加了。购置一个方的床头柜就行了。 桌上侧柜这个目前也没选好，需要分析下。首先是用途，我是用于展示还是收纳。目前看应该以显示为主，不缺收纳 然后是尺寸。感觉深度在30cm内会比较合适，右手边不会太占据太多空间。 然后要考虑鱼缸的兼容性，小米鱼缸需要留20.4cm的宽度。要么就留，要么就让鱼缸摆上去。但是这样层高最好不要太高，否则不便于随时观赏。 目前已经定制了一款，尺寸如图柜子爱是比较符合我审美的。而且思路突然打开了，右边中间那个格子，我专门设计好尺寸，可以直接放下小米鱼缸。鱼缸宽度21不到，高度35左右，深度的话22cm。然后预留个走线孔，这样鱼缸问题就解决了。长度72cm，对于我80深的桌面来讲，应该是比较和谐的，不会太极限。","categories":[{"name":"舒适的窝","slug":"舒适的窝","permalink":"https://rongyel.github.io/categories/%E8%88%92%E9%80%82%E7%9A%84%E7%AA%9D/"}],"tags":[{"name":"家居","slug":"家居","permalink":"https://rongyel.github.io/tags/%E5%AE%B6%E5%B1%85/"}]},{"title":"超过十二点就叫熬夜","slug":"认真生活/身心健康/超过十二点就叫熬夜","date":"2025-08-18T16:32:49.238Z","updated":"2025-09-07T14:27:02.953Z","comments":true,"path":"posts/9effe81c.html","permalink":"https://rongyel.github.io/posts/9effe81c.html","excerpt":"","text":"超过十二点就叫熬夜熬夜反省2025-09-06 因为谈心而晚睡……陪白白谈心到了一点半，好吧。这真没办法，毕竟陪陪柳依还是很重要的。明天加班估计是做不到了。好好休息吧，算了。 2025-09-02 麻烦了，失眠不清楚原因，可能是咖啡喝多了，可能是喝了乌龙茶，可能是睡前看了黄。现在就是睡不着，翻来覆去1点半了。现在就是煎熬，控制自己至少不要手淫。摆烂了，准备看会小说到2点再试着睡。 2025-08-22 多看了两眼porn，我有罪不能用看黄当娱乐，这不合适。还好这次只是看看，完全没有动手。 2025-08-19 今日开始记录熬夜反思首先，没有遵守12点前关电脑的规则。在12点15分本来想刷好牙直接睡觉的，却发现衣服没有晒。因此，今后在需要晒衣服的日子，必须提前至少15分钟完成，而不是到了临睡才发现衣服没晒，影响心情。 熬夜打卡 #TODO #habit 熬夜 [repeat:: every day when done] [due:: 2025-09-08] #TODO #habit 熬夜 [repeat:: every day when done] [due:: 2025-09-07] #TODO #habit 熬夜 [repeat:: every day when done] [due:: 2025-09-05] [completion:: 2025-09-06]","categories":[{"name":"习惯打卡","slug":"习惯打卡","permalink":"https://rongyel.github.io/categories/%E4%B9%A0%E6%83%AF%E6%89%93%E5%8D%A1/"}],"tags":[{"name":"身心健康","slug":"身心健康","permalink":"https://rongyel.github.io/tags/%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7/"}]},{"title":"明日方舟肉鸽界园三结局通关感想","slug":"思维殿堂/兴趣杂谈/游戏/明日方舟肉鸽界园三结局通关感想","date":"2025-08-06T13:57:14.000Z","updated":"2025-09-07T14:27:03.088Z","comments":true,"path":"posts/2afa3202.html","permalink":"https://rongyel.github.io/posts/2afa3202.html","excerpt":"","text":"方舟的肉鸽是真好玩啊。虽然我跳过了一个萨卡兹肉鸽，但其他所有肉鸽我都打了三结局，界园肉鸽的话，虽然这次大家骂的都比较厉害，不过我玩的也没那么多嘛，拿电弧麻麻带着打确实很快乐。 目前只要享受就行了，有电弧加维神，绝大多数地图怎么打都心中有数了。只要发牌正常点，别从头到尾不给辅助、先锋、奶妈之类的刚需牌，基本都能打。可能高难度对藏品要求会高一些吧，但就我打到N9的感觉来说，应该没啥问题。 反正现在肉鸽每天就打个一两把，没什么压力，三个结局也都见识过了，现在就看慢慢打到N15吧。a 2025-08-10太难啦！！！终于过了一次N9界园三结局 这把真的是拼尽全力才能过的……","categories":[{"name":"兴趣档案","slug":"兴趣档案","permalink":"https://rongyel.github.io/categories/%E5%85%B4%E8%B6%A3%E6%A1%A3%E6%A1%88/"}],"tags":[{"name":"游戏","slug":"游戏","permalink":"https://rongyel.github.io/tags/%E6%B8%B8%E6%88%8F/"},{"name":"明日方舟","slug":"明日方舟","permalink":"https://rongyel.github.io/tags/%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F/"},{"name":"肉鸽","slug":"肉鸽","permalink":"https://rongyel.github.io/tags/%E8%82%89%E9%B8%BD/"}]},{"title":"2025 东京 P5巡礼游行程计划~","slug":"认真生活/世界巡礼/2025 东京单人游/2025 东京 P5巡礼游行程计划~","date":"2025-08-02T14:00:04.085Z","updated":"2025-09-07T14:27:03.091Z","comments":true,"path":"posts/48b92cb3.html","permalink":"https://rongyel.github.io/posts/48b92cb3.html","excerpt":"难得的单人出游机会，细细观察东京。","text":"2025 东京 P5巡礼游行程计划~关联项目: 2025 东京单人游 主题曲 女神异闻录5巡礼以P5巡礼为主线，再慢慢的观察下东京这个地方。P5也不打算全去，把最重要的地方看了就行。需要巡礼的主要有： 三轩茶屋，整个地方不大，全部走一遍。 涩谷，本来就很好逛的地方。 井之头公园，据说公园本身就不错。 吉祥寺，比较老的商业街了，重点看吃的。 台场海滨公园，看高达，看夜景。 新宿/秋叶原，都可以。 交通安排大湾区航空 来回 2249元 日程安排Day1 2025-09-29 星期一： 8点45分 蛇口港口坐船前往香港机场，预计9点15分到达； 11点00分 大湾区航空 HB322 起飞，预计16点45分到达成田机场； 成田机场（skyline） -》 日暮里站（山手线Yamanote Line） -》 涉谷站（东急东横线） -》 祐天寺站 酒店 东京目黑佑天寺东急STAY酒店 入住； Day2 2025-09-30 星期二： 三轩茶屋、下北泽、井之头公园、吉祥寺 新宿 回酒店 Day3 2025-10-01 星期三： 猫猫严选，中目黑、惠比寿、代官山，富人区； 涩谷； 猫猫推荐，黄昏阶段，在台场附近看日落、吃晚饭后再看夜景。 Day4 2025-10-02 星期四： 早餐后散步、11点退房。 前往成田机场； 17点45分 大湾区航空 HB323 起飞，预计21点50分到达香港国际机场T1； 美食计划购物清单 死亡搁浅 OST","categories":[{"name":"旅行计划","slug":"旅行计划","permalink":"https://rongyel.github.io/categories/%E6%97%85%E8%A1%8C%E8%AE%A1%E5%88%92/"}],"tags":[{"name":"旅游","slug":"旅游","permalink":"https://rongyel.github.io/tags/%E6%97%85%E6%B8%B8/"},{"name":"日本","slug":"日本","permalink":"https://rongyel.github.io/tags/%E6%97%A5%E6%9C%AC/"},{"name":"单人游","slug":"单人游","permalink":"https://rongyel.github.io/tags/%E5%8D%95%E4%BA%BA%E6%B8%B8/"},{"name":"东京","slug":"东京","permalink":"https://rongyel.github.io/tags/%E4%B8%9C%E4%BA%AC/"},{"name":"世界巡礼","slug":"世界巡礼","permalink":"https://rongyel.github.io/tags/%E4%B8%96%E7%95%8C%E5%B7%A1%E7%A4%BC/"}]},{"title":"2025 东京单人游","slug":"认真生活/世界巡礼/2025 东京单人游","date":"2025-08-02T13:55:24.358Z","updated":"2025-09-07T14:27:02.948Z","comments":true,"path":"posts/14431ab9.html","permalink":"https://rongyel.github.io/posts/14431ab9.html","excerpt":"","text":"2025 东京单人游相关领域：世界巡礼 项目计划 #TODO 购物清单 [due:: 2025-08-31] #TODO 询问AI需要准备哪些基本对话 [due:: 2025-08-26] #TODO 出行清单 [due:: 2025-09-07] [completion:: 2025-09-07] #TODO 行程计划 [due:: 2025-09-07] #TODO 预定酒店 [due:: 2025-08-02] [completion:: 2025-08-02] #TODO 购买机票 [due:: 2025-08-02] [completion:: 2025-08-02] #TODO 建立项目计划 [due:: 2025-08-02] [completion:: 2025-08-02] 项目笔记12345678910111213141516171819202122232425262728293031323334353637383940// 获取当前笔记名称（不含.md）const currentNoteName = dv.current().file.name.replace(\".md\", \"\");// 查询所有链接到当前 project 笔记的 `type=note` 笔记const notePages = dv.pages() .where(n =&gt; n.type === \"notes\" &amp;&amp; n.file.outlinks.some(link =&gt; link.path === dv.current().file.path) ) .sort(n =&gt; n.modify, 'desc'); // 按修改时间排序// 计算统计信息const totalNotes = notePages.length;const completedNotes = notePages.filter(n =&gt; n.done).length;const recentUpdated = notePages[0]?.file.mday.toISODate() || \"无记录\";// 显示结果if (totalNotes &gt; 0) { dv.table( [\"状态\", \"笔记名称\", \"最近修改\", \"进度\"], [ ...notePages.map(n =&gt; [ n.done ? \"✅ 已完成\" : \"🟡 进行中\", n.file.link, n.file.mday.toISODate(), n.progress || \"无进度数据\" ]), // 统计行 [ `**${completedNotes}/${totalNotes}**`, `**笔记统计**`, `**最近更新: ${recentUpdated}**`, ` ` ] ] );} else { dv.span(`当前 project 笔记没有链接到任何笔记`);} 项目日志2025-09-07 出行物品清单就绪done 2025-08-17 巡礼行程初步确定P5巡礼的路线基本定下来了。酒店、机票、船票也直接定下来了。需要继续细化。 项目资源","categories":[],"tags":[{"name":"旅行","slug":"旅行","permalink":"https://rongyel.github.io/tags/%E6%97%85%E8%A1%8C/"},{"name":"日本","slug":"日本","permalink":"https://rongyel.github.io/tags/%E6%97%A5%E6%9C%AC/"},{"name":"单人游","slug":"单人游","permalink":"https://rongyel.github.io/tags/%E5%8D%95%E4%BA%BA%E6%B8%B8/"}]},{"title":"世界巡礼","slug":"认真生活/世界巡礼","date":"2025-07-28T16:15:47.551Z","updated":"2025-09-07T08:41:43.108Z","comments":true,"path":"posts/da922f9b.html","permalink":"https://rongyel.github.io/posts/da922f9b.html","excerpt":"","text":"世界巡礼 世界很大，多出去看看 项目列表12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697// 获取当前笔记名称（不含.md）const currentNoteName = dv.current().file.name.replace(\".md\", \"\");// 查询所有链接到当前 project 笔记的 `type=project` 笔记const projectPages = dv.pages() .where(p =&gt; p.type === \"projects\" &amp;&amp; p.file.outlinks.some(link =&gt; link.path === dv.current().file.path) ) .sort(p =&gt; p.file.cday, 'asc'); // 仍按创建时间排序// 状态显示函数（基于 done 状态）function getStatusIcon(project) { return project.done ? \"✅ 已完成\" : \"🟡 进行中\";}// 进度显示函数（支持多种格式）function getProgressDisplay(project) { if (project.done) return \"▮▮▮▮▮ 100%\"; if (!project.progress) return \"▯▯▯▯▯ 0%\"; // 处理不同进度格式 if (project.progress.includes(\"▮\")) { return project.progress; } else { const percent = parseInt(project.progress.toString().replace(/\\D/g, '')) || 0; const filled = Math.floor(percent / 20); return \"▮\".repeat(filled) + \"▯\".repeat(5-filled) + ` ${percent}%`; }}// 结项日期显示函数function getCompletionDate(project) { if (!project.done) return \" \"; if (project.completion) { return dv.date(project.completion).toISODate(); } if (project.file.mtime) { return project.file.mtime.toISODate(); // 降级使用最后修改时间 } return \"无记录\";}// 显示结果if (projectPages.length &gt; 0) { // 统计项目状态及关联笔记数量 const projectsWithNoteCount = projectPages.map(p =&gt; { const noteCount = dv.pages() .where(n =&gt; n.type === \"notes\" &amp;&amp; n.file.outlinks.some(link =&gt; link.path === p.file.path) ).length; return { ...p, noteCount, status: getStatusIcon(p), progress: getProgressDisplay(p), completion: getCompletionDate(p) }; }); // 计算统计信息 const doneCount = projectsWithNoteCount.filter(p =&gt; p.done).length; const totalCount = projectsWithNoteCount.length; dv.table( [\"状态\", \"项目名称\", \"进度\", \"关联笔记\", \"创建时间\", \"结项日期\"], [ ...projectsWithNoteCount.map(p =&gt; [ p.status, p.file.link, p.progress, p.noteCount &gt; 0 ? `📝 ${p.noteCount}` : \"无\", p.file.cday.toISODate(), p.completion ]), // 统计行（已修复） [ `**${doneCount}/${totalCount}**`, `**项目统计**`, `**完成率: ${Math.round(doneCount/totalCount*100)}%**`, \"\", \"\", `**最近结项: ${ projectsWithNoteCount .filter(p =&gt; p.done) .sort((a, b) =&gt; (b.file?.mtime || new Date(0)) - (a.file?.mtime || new Date(0))) [0]?.completion || \"无\" }**` ] ] );} else { dv.span(`当前领域笔记没有链接到任何项目笔记`);} 项目日志","categories":[],"tags":[{"name":"旅游","slug":"旅游","permalink":"https://rongyel.github.io/tags/%E6%97%85%E6%B8%B8/"}]},{"title":"不要害怕讨论，充分交流可以减少走弯路。","slug":"思维殿堂/工作经验/不要害怕讨论，充分交流可以减少走弯路。","date":"2025-07-23T15:52:49.041Z","updated":"2025-09-07T14:27:02.920Z","comments":true,"path":"posts/f718ab89.html","permalink":"https://rongyel.github.io/posts/f718ab89.html","excerpt":"","text":"记录一次工作有感。自己吭哧吭哧写了两三天方案，自以为自己方案写的很完美，画了很多图。结果一讨论，好家伙，根本没有必要。 完全可以用复杂度更低的方式实现90%的功能，而且风险还小。 所以，一定不要闭门造车。在开发过程中多交流，多讨论。很多时候，别人的一句话可能就会点醒你一种更好的结果。","categories":[{"name":"工作经验","slug":"工作经验","permalink":"https://rongyel.github.io/categories/%E5%B7%A5%E4%BD%9C%E7%BB%8F%E9%AA%8C/"}],"tags":[{"name":"工作","slug":"工作","permalink":"https://rongyel.github.io/tags/%E5%B7%A5%E4%BD%9C/"},{"name":"芯片","slug":"芯片","permalink":"https://rongyel.github.io/tags/%E8%8A%AF%E7%89%87/"},{"name":"开发","slug":"开发","permalink":"https://rongyel.github.io/tags/%E5%BC%80%E5%8F%91/"}]},{"title":"衣柜利用分析","slug":"认真生活/舒适的家/打造一个舒适的窝/衣柜利用分析","date":"2025-07-16T14:54:24.272Z","updated":"2025-09-07T14:27:03.094Z","comments":true,"path":"posts/2fa72900.html","permalink":"https://rongyel.github.io/posts/2fa72900.html","excerpt":"衣柜不大，需要利用好","text":"衣柜利用分析关联项目: 打造一个舒适的窝 衣物收纳箱选择右侧柜子 最上面两格，宽75cm，高35cm。比较高，没有什么利用价值，拿来存放不常用的衣物。 选择无印的衣物收纳箱刚好，箱子长度37x35x32，那么就可以一格放两个。 中间格，放置物品待定。 下方，带挂架。挂各种厚衣服外套。 左侧柜子 最上方柜子也是拿取不方便，放置物品待定。 中间作为最高频使用的位置，挂所有正在穿着的衣服裤子。此处衣架不够，需要增补宜家的衣架。 下方格子用来放高频使用的背包好了。 最下方的两个抽屉目前是放袜子内裤，不过以后可能换到床底下放感觉更好。此处可以增加收纳的小盒子，但是床还没到，所以无法确定尺寸。","categories":[{"name":"舒适的窝","slug":"舒适的窝","permalink":"https://rongyel.github.io/categories/%E8%88%92%E9%80%82%E7%9A%84%E7%AA%9D/"}],"tags":[{"name":"家居","slug":"家居","permalink":"https://rongyel.github.io/tags/%E5%AE%B6%E5%B1%85/"},{"name":"舒适的家","slug":"舒适的家","permalink":"https://rongyel.github.io/tags/%E8%88%92%E9%80%82%E7%9A%84%E5%AE%B6/"}]},{"title":"小香入住计划","slug":"认真生活/舒适的家/小香入住计划","date":"2025-07-15T13:57:49.000Z","updated":"2025-09-07T14:27:02.949Z","comments":true,"path":"posts/8bed0c66.html","permalink":"https://rongyel.github.io/posts/8bed0c66.html","excerpt":"","text":"小香入住计划舒适的家 项目计划 #TODO 完成阶段二迁移 [due:: 2025-07-06] [completion:: 2025-07-15] #TODO 完成阶段一迁移 [due:: 2025-07-06] [completion:: 2025-07-08] #TODO 迁移物品分析 [due:: 2025-07-06] [completion:: 2025-07-06] #TODO 建立项目计划 [due:: 2025-07-06] [completion:: 2025-07-06] 项目笔记12345678910111213141516171819202122232425262728293031323334353637383940// 获取当前笔记名称（不含.md）const currentNoteName = dv.current().file.name.replace(\".md\", \"\");// 查询所有链接到当前 project 笔记的 `type=note` 笔记const notePages = dv.pages() .where(n =&gt; n.type === \"note\" &amp;&amp; n.file.outlinks.some(link =&gt; link.path === dv.current().file.path) ) .sort(n =&gt; n.modify, 'desc'); // 按修改时间排序// 计算统计信息const totalNotes = notePages.length;const completedNotes = notePages.filter(n =&gt; n.done).length;const recentUpdated = notePages[0]?.file.mday.toISODate() || \"无记录\";// 显示结果if (totalNotes &gt; 0) { dv.table( [\"状态\", \"笔记名称\", \"最近修改\", \"进度\"], [ ...notePages.map(n =&gt; [ n.done ? \"✅ 已完成\" : \"🟡 进行中\", n.file.link, n.file.mday.toISODate(), n.progress || \"无进度数据\" ]), // 统计行 [ `**${completedNotes}/${totalNotes}**`, `**笔记统计**`, `**最近更新: ${recentUpdated}**`, ` ` ] ] );} else { dv.span(`当前 project 笔记没有链接到任何笔记`);} 项目日志2025-07-13 搬家基本完成只剩下一个显示器还没能挪过来 2025-07-06 建立计划让Deepseek协助分析了，如何用两周的时间完成逐步迁移。我计划最开始直接带东西住过去，然后每天搬一点东西过去。 项目资源","categories":[],"tags":[]},{"title":"运动日常化","slug":"认真生活/身心健康/运动日常化","date":"2025-07-15T13:57:49.000Z","updated":"2025-09-07T14:27:02.950Z","comments":true,"path":"posts/6739503f.html","permalink":"https://rongyel.github.io/posts/6739503f.html","excerpt":"","text":"运动日常化关联领域: 身心健康 项目计划 #TODO 休息一周，看看情况。 [due:: 2025-09-04] [completion:: 2025-09-04] #TODO 日常化运动第五步，结合饮食。 [due:: 2025-08-25] [completion:: 2025-09-04] #TODO 日常化运动第四步，固定运动周期。 [due:: 2025-08-17] [completion:: 2025-08-25] #TODO 日常化运动第三步，兴趣推动：更多健身器械 [due:: 2025-08-02] [completion:: 2025-08-17] #TODO 日常化运动第二步，继续保持 [due:: 2025-07-05] [completion:: 2025-07-15] #TODO 日常化运动的第一步，复健 [due:: 2025-06-23] [completion:: 2025-07-05] #TODO 建立项目计划 [due:: 2025-06-23] [completion:: 2025-07-15] 项目笔记12345678910111213141516171819202122232425262728293031323334353637383940// 获取当前笔记名称（不含.md）const currentNoteName = dv.current().file.name.replace(\".md\", \"\");// 查询所有链接到当前 project 笔记的 `type=note` 笔记const notePages = dv.pages() .where(n =&gt; n.type === \"notes\" &amp;&amp; n.file.outlinks.some(link =&gt; link.path === dv.current().file.path) ) .sort(n =&gt; n.modify, 'desc'); // 按修改时间排序// 计算统计信息const totalNotes = notePages.length;const completedNotes = notePages.filter(n =&gt; n.done).length;const recentUpdated = notePages[0]?.file.mday.toISODate() || \"无记录\";// 显示结果if (totalNotes &gt; 0) { dv.table( [\"状态\", \"笔记名称\", \"最近修改\", \"进度\"], [ ...notePages.map(n =&gt; [ n.done ? \"✅ 已完成\" : \"🟡 进行中\", n.file.link, n.file.mday.toISODate(), n.progress || \"无进度数据\" ]), // 统计行 [ `**${completedNotes}/${totalNotes}**`, `**笔记统计**`, `**最近更新: ${recentUpdated}**`, ` ` ] ] );} else { dv.span(`当前 project 笔记没有链接到任何笔记`);} 项目日志2025-09-06 休息效果不好没有运动，可能导致我饮食、睡眠都不是很好？这周过的并不怎么样，甚至失眠很严重。下周恢复运动。 2025-09-04 本周暂停了健身房运动，只保持一次周三的羽毛球。让身体舒缓一下，放松一下。这周运动量不大，重点关注饮食是否控制即可。 2025-09-02 睡前测量体重 64.5很明显的低于65了，这段时间的运动加饮食控制效果非常好。目前取得一定成效了，后续继续保持。我的目标是降到62kg。 2025-08-31 持续进行中，本周控制的还不够完美。这周有几次晚上吃撑了，不太好。下周因为脚受伤了，不能跑步打球，所以更需要专注在控制饮食上。半分饱即可。 2025-08-25 饮食加大限制本周的目标就是，坚持工作日吃少，吃清淡。运动照常。 2025-08-17 每周运动执行的不错，体重有下降一周运动至少4次以上，做的比较好了。而且饮食方面更佳健康，一日三餐正常吃，只是会注意主食的摄入量。今天称了一下，体重是回到65左右了，比较满意。接下来就是继续保持这个常态运动，再过一个月可以见分晓。 2025-07-05 坚持运动两周了，好的开始两周，都是周一、二、四健身房，周三打球，周六别的运动。反正运动量比之前多多了。吃的控制的也好了不少，晚上睡前有饥饿感。 2025-06-23 今天开始执行每日运动的目标。第一天，完成了健身房跑步 项目资源","categories":[],"tags":[{"name":"运动","slug":"运动","permalink":"https://rongyel.github.io/tags/%E8%BF%90%E5%8A%A8/"},{"name":"健身","slug":"健身","permalink":"https://rongyel.github.io/tags/%E5%81%A5%E8%BA%AB/"},{"name":"健康","slug":"健康","permalink":"https://rongyel.github.io/tags/%E5%81%A5%E5%BA%B7/"},{"name":"跑步","slug":"跑步","permalink":"https://rongyel.github.io/tags/%E8%B7%91%E6%AD%A5/"}]},{"title":"打造一个舒适的窝","slug":"认真生活/舒适的家/打造一个舒适的窝","date":"2025-07-14T15:22:45.000Z","updated":"2025-09-07T14:27:02.950Z","comments":true,"path":"posts/22b96b3f.html","permalink":"https://rongyel.github.io/posts/22b96b3f.html","excerpt":"","text":"舒适的窝关联领域: 舒适的家 项目计划 #TODO 按照梳理的收纳计划，完成收纳 [due:: 2025-09-01] [completion:: 2025-09-02] #TODO 统计打造开销 [due:: 2025-08-23] #TODO 房屋收纳分析，各种收纳位置应收纳什么物品。 [priority:: highest] [due:: 2025-08-31] [completion:: 2025-08-31] #TODO 桌下插座分析 [due:: 2025-08-04] [completion:: 2025-08-04] #TODO 桌下柜分析 [due:: 2025-08-04] [completion:: 2025-08-25] #TODO 纸巾收纳分析 [due:: 2025-08-04] [completion:: 2025-08-04] #TODO 测量衣物收纳箱尺寸 [due:: 2025-07-16] [completion:: 2025-07-17] #TODO 洞洞板使用分析 [due:: 2025-07-06] [completion:: 2025-07-11] #TODO 床头氛围打造 [due:: 2025-09-30] #TODO 分析是否增补展柜 [due:: 2025-07-06] [completion:: 2025-08-04] #TODO 选择书桌侧边柜 [due:: 2025-07-06] [completion:: 2025-07-16] #TODO 购置书桌 [due:: 2025-07-06] [completion:: 2025-07-11] #TODO 购置床架 [due:: 2025-07-06] [completion:: 2025-07-11] #TODO 购置床垫 [due:: 2025-07-06] [completion:: 2025-07-11] #TODO 绘制空间布局图 [due:: 2025-07-06] [completion:: 2025-07-11] #TODO 选择书桌 [due:: 2025-07-06] [completion:: 2025-07-11] #TODO 选择床架 [due:: 2025-07-06] [completion:: 2025-07-11] #TODO 选择床垫 [due:: 2025-07-06] [completion:: 2025-07-11] #TODO 计算桌面需求 [due:: 2025-07-06] [completion:: 2025-07-11] #TODO 建立项目计划 [due:: 2025-07-06] [completion:: 2025-07-06] 项目笔记12345678910111213141516171819202122232425262728293031323334353637383940// 获取当前笔记名称（不含.md）const currentNoteName = dv.current().file.name.replace(\".md\", \"\");// 查询所有链接到当前 project 笔记的 `type=note` 笔记const notePages = dv.pages() .where(n =&gt; n.type === \"notes\" &amp;&amp; n.file.outlinks.some(link =&gt; link.path === dv.current().file.path) ) .sort(n =&gt; n.modify, 'desc'); // 按修改时间排序// 计算统计信息const totalNotes = notePages.length;const completedNotes = notePages.filter(n =&gt; n.done).length;const recentUpdated = notePages[0]?.file.mday.toISODate() || \"无记录\";// 显示结果if (totalNotes &gt; 0) { dv.table( [\"状态\", \"笔记名称\", \"最近修改\", \"进度\"], [ ...notePages.map(n =&gt; [ n.done ? \"✅ 已完成\" : \"🟡 进行中\", n.file.link, n.file.mday.toISODate(), n.progress || \"无进度数据\" ]), // 统计行 [ `**${completedNotes}/${totalNotes}**`, `**笔记统计**`, `**最近更新: ${recentUpdated}**`, ` ` ] ] );} else { dv.span(`当前 project 笔记没有链接到任何笔记`);} 项目日志2025-09-04 房间收纳初步完成。东西并没有那么多，还有很多收纳空间。为未来打下了扎实的基础。 2025-09-01 进行了房屋收纳规划找Deepseek根据我的房屋情况，给出了收纳的规划。 项目资源","categories":[],"tags":[{"name":"家居","slug":"家居","permalink":"https://rongyel.github.io/tags/%E5%AE%B6%E5%B1%85/"},{"name":"舒适的家","slug":"舒适的家","permalink":"https://rongyel.github.io/tags/%E8%88%92%E9%80%82%E7%9A%84%E5%AE%B6/"}]},{"title":"迁移物资整理","slug":"认真生活/舒适的家/小香入住计划/迁移物资整理","date":"2025-07-14T15:22:41.000Z","updated":"2025-09-07T14:27:03.093Z","comments":true,"path":"posts/e6aa86c3.html","permalink":"https://rongyel.github.io/posts/e6aa86c3.html","excerpt":"让Deepseek给了我一段搬家建议。","text":"迁移物资整理关联项目: 小香入住计划 分阶段搬运计划（建议每日耗时1-1.5小时） 阶段 天数 重点搬运物品 技巧提示 1 第3-4天 卧室必需品（当季衣物、床品） 提前在新家布置好床铺 2 第5-6天 浴室用品+清洁工具 先完成新家首次深度清洁 3 第7-8天 厨房基础器具（微波炉/电饭煲） 保留旧家1套餐具备用 4 第9-10天 工作区物品+部分电子产品 重要文件建议单独手提运输 5 第11-12天 客厅小件+装饰品 利用鞋盒装小物件 6 第13天 最后检查+植物/宠物 植物建议白天运输 阶段1-初步入住 一周的衣物 日常用品 牙刷，网购 毛巾，网购 浴巾，网购 拖鞋 纸巾 被子 枕头 洗浴用品 沐浴露 洗发液 洗面奶 带一只鹅鹅 笔记本电脑 阶段2-核心套件 台式电脑 主机 显示器 鼠标键盘 清洁工具 扫帚 拖把 剩下所有的衣服 阶段3-个人设备 相机、镜头 书 游戏盘 数码设备 NAS 阶段4 模型手办等","categories":[{"name":"舒适的窝","slug":"舒适的窝","permalink":"https://rongyel.github.io/categories/%E8%88%92%E9%80%82%E7%9A%84%E7%AA%9D/"}],"tags":[{"name":"搬家","slug":"搬家","permalink":"https://rongyel.github.io/tags/%E6%90%AC%E5%AE%B6/"}]},{"title":"房东物品","slug":"认真生活/舒适的家/小香入住计划/房东物品","date":"2025-07-14T15:22:38.000Z","updated":"2025-09-07T14:27:03.091Z","comments":true,"path":"posts/cc2db2c6.html","permalink":"https://rongyel.github.io/posts/cc2db2c6.html","excerpt":"","text":"房东物品关联项目: 标题天威光猫电动窗帘电机","categories":[{"name":"小香入住计划","slug":"小香入住计划","permalink":"https://rongyel.github.io/categories/%E5%B0%8F%E9%A6%99%E5%85%A5%E4%BD%8F%E8%AE%A1%E5%88%92/"}],"tags":[{"name":"家居","slug":"家居","permalink":"https://rongyel.github.io/tags/%E5%AE%B6%E5%B1%85/"}]},{"title":"舒适的床","slug":"认真生活/舒适的家/打造一个舒适的窝/舒适的床","date":"2025-07-05T16:14:42.156Z","updated":"2025-09-07T14:27:03.093Z","comments":true,"path":"posts/a9b57d66.html","permalink":"https://rongyel.github.io/posts/a9b57d66.html","excerpt":"想要一张质感与使用兼备的床。","text":"舒适的床关联项目: 打造一个舒适的窝 床精挑细选，选了一个充满实用性又不失设计（自认为）的胡桃木箱体床。床的规格选择了200x120x27规格的。虽然房间确实不大，放一张90宽的床可能可以获得更多的活动空间，但是90cm我连横着躺脚都放不下，实在是称不上舒适。因此最终还是选择至少120宽的床。 床垫去试了宜家的床垫，感觉这种卷边的床垫，侧边都没有做加固，坐在床边的时候会下滑，我很不满意。然后意外在源氏木语试到了比较满意的床垫，偏硬，侧边加固不塌陷。后来专门牺牲了一个无效，又去了一家源氏木语的线下店试这个床垫，然后当场就选择下单了。这是一个以竹炭椰棕为主，上层有乳胶，下层独立弹簧组成的床垫，所以硬度我就很满意，然后又不会太硬，表层有2cm乳胶，所以很舒适。现在已经收到货了，睡着非常舒服，跟线下店体感一致，完美符合我的需求。 没想到源氏木语的木制家居我完全摒弃，但是反而认可它的床垫呢。可能这反而有良心吧。 枕头+被芯这次选了一套宜家的，也是线下实际试过的枕头。比较厚实，应该是属于？人体工学记忆海绵枕。躺着支撑感挺足的，感觉确实年纪大了，这些有支撑感的东西让我感觉更舒服。 被芯就没有试了，只是根据网上的评价挑选了一个四季被，尺寸好像选大了，230x200的，不过这个尺寸是宜家推荐的，希望盖起来更爽。 四件套本来是想换新的，更高级的。但最后发现我之前选的四件套质量已经很不错了。用到现在还很舒服，而且颜色更我现在的房间也相当搭配，所以就不准备换了。不过被套之前的尺寸比较小，所以还是得补一个。","categories":[{"name":"舒适的窝","slug":"舒适的窝","permalink":"https://rongyel.github.io/categories/%E8%88%92%E9%80%82%E7%9A%84%E7%AA%9D/"}],"tags":[{"name":"家居","slug":"家居","permalink":"https://rongyel.github.io/tags/%E5%AE%B6%E5%B1%85/"}]},{"title":"小红成长记录","slug":"认真生活/家有小红/小红身高体重记录","date":"2025-06-29T15:30:52.000Z","updated":"2025-09-07T14:27:02.945Z","comments":true,"path":"posts/5ff6615c.html","permalink":"https://rongyel.github.io/posts/5ff6615c.html","excerpt":"","text":"小红身高体重记录体重记录2025-08-27 体重227.5g，背甲10cm2025-07-26 体重223g，背甲10cm2025-06-30 体重208g，背甲10cm2025-05-21 体重196g，背甲10cm2025-04-20 体重179.5g，背甲9cm周期任务 #TODO 体重、背甲测量 [repeat:: every month] [due:: 2025-09-20]","categories":[{"name":"家有小红","slug":"家有小红","permalink":"https://rongyel.github.io/categories/%E5%AE%B6%E6%9C%89%E5%B0%8F%E7%BA%A2/"}],"tags":[{"name":"家有小红","slug":"家有小红","permalink":"https://rongyel.github.io/tags/%E5%AE%B6%E6%9C%89%E5%B0%8F%E7%BA%A2/"}]},{"title":"我家红腿的居住环境如何？","slug":"认真生活/家有小红/我家红腿的居住环境如何？","date":"2025-06-29T15:30:51.000Z","updated":"2025-08-31T06:51:12.205Z","comments":true,"path":"posts/5fd70d3a.html","permalink":"https://rongyel.github.io/posts/5fd70d3a.html","excerpt":"","text":"物种名红腿陆龟 环境尺寸90 * 45 * 45 CM 冷热区温度此处我准备使用加热灯的方式提供温度。整个缸分为3部分，热区、温暖区和冷区三个梯度区域。 广东只有两种天气，设计温度区间如下：非冬季：热区温度约30℃，温暖区温度约27℃，冷区温度约24℃。冬季：热区温度约28℃，温暖区温度约24℃，冷区温度约20℃。热区是热源放置的位置，此处我会放置UVA(晒灯，100w)、UVB（10.0，15w），和一个陶瓷灯（75w）作为热源。 其中，UVA和UVB两盏灯使用一个双灯罩，放置在饲养缸右侧上方，经过滤网后照射右侧40%的缸内空间。这两盏灯将会在白天定时开启12小时，只定时，不温控。通常白天开启的时候，缸内热区的温度就可以稳定在24~26℃（冬季） 而陶瓷灯则是作为补充、保底热源，通过一个壁挂灯座挂在缸内的。它是接入温控控制的，温度上下限就是前面写的温度区间。而且它是完全无光的，在夜间使用也不会影响到爬宠。 湿度主要是靠加湿器，另一个就是靠垫材，还有就是喷水。因为在广东地区，整体还是比较潮湿的，唯一可能干燥的时间段就是短暂的冬天。 目前我的保湿策略如下： 缸内放置一个大的水盆：即便整体的湿度不足，龟龟也可以通过水池的方式来给自己保湿。并且在晒灯下，水分持续挥发，一定程度上遏制了缸内湿度下降的速度。 垫材主要使用椰土：保湿性极好。 湿控加湿器：通过湿度控制器自动开关：当湿度低于设置的最小湿度60%后，加湿器通电开始喷出水雾，直到湿度回升大于设定最大值80%。加湿器主要是白天工作，因为白天开灯温度高，水分蒸发的比较快。到了夜间不需要开加湿，湿度也能维持在70%左右。 喷壶手动喷水：直接用喷壶是极为高效的加湿方式，水雾模式喷洒缸内几秒即可维持较长时间的湿度。 光照设计加热灯的选择：日光灯100W。由于这种灯的光是比较散的，在冬季，经过几个小时的加温，峰值也就25℃左右。没有达到我计划的冬季晒点温度28℃。不过我的热源还有一个陶瓷灯，那个灯是挂在缸内的，所以温度不足的部分由它来补足即可。 UVB的选择：UVB 10.0 15W红腿陆龟属于弗格森2区，需要的UVI应该在0.7 ~ 1.0。 根据此数据，我再去寻找40cm这个距离下，哪个规格的UVB能够满足我的诉求。目前看下来，UVB10.0 15W这个规格应该是比较合适的。根据该规格的等辐射图，这个区间应该会获得大约13 ~ 27 μW/cm^2的UVB.这里我购置了Giangarden的UVB测试仪进行实测。将仪器放到晒台位置进行实测，测出来是20μW/cm^2，也就是0.8，达到弗格森2区的范围了。而且龟龟自身还有一定高度的，所以这里指数还会略微再高一些，肯定是满足要求了。 垫材考虑到保湿和绿植种植，垫材选择了：2斤泥炭土+8L椰土+2斤半块椰壳砖+9斤小颗粒红土，混合铺底。再盖上一层森林地表，保持龟龟身体清洁。森林地表选用了中颗粒，确保龟龟不会误食。额外的，我在龟龟的躲避屋下铺了椰棕垫，这个东西主要是保持屋内的干净，以防龟挖土啥的。 背景墙设计只是一块岩石背景板，在板上种了点苔藓。纯造景，毕竟龟也不攀爬这个。 绿植主要是造景和一定的保湿作用。绿植我购置的都是雨林类植物，没有铺设很多，毕竟我这是要养龟不是要造雨林缸。栽种了迷你椰树、狼尾蕨、菖蒲、阿波蕨。还有短绒藓，点缀在躲避屋、岩石背景板上。 食盆、水盆食盆简单选用了一块岩板，足够大，跟垫材明显区分开，培养龟龟只吃这个岩板的东西，减少误食垫材的可能。水盆我选择了比较大的，放在缸中宛如一个小池子。大的水盆能装更多的水，不仅能够给龟龟提供饮水区域，还能维持环境的湿度。 躲避屋考虑到龟龟的生长速度，我直接一步到位买了最大尺寸的陆龟躲避。这里注意要买了圆拱形的，考虑到陆龟壳会拱起来占很多高度。躲避屋够大，阴影区也够大，能让小红腿完全藏身。 饲养时间/年龄其实还没有养多久，今年春节后我才将它接到家里的。所以至今饲养了2个月，龟龟的年龄则大概是8个月。背甲目前是8~9cm。 活跃时间/观察经验白天开灯的时间能看到它在多个地方逛荡，最常见的几个地方分别是： 右侧的蕨草区，它喜欢趴在那里晒背？ 中间那个树桩加湿器旁边，它经常是斜着扒拉着树桩，不知道在想什么。 在中间那块岩板上来回踱步，头瞅着我，不知道是不是在等开饭。 如果想休息了会回到躲避屋的阴影区趴着。 熄灯后则哪里都有可能趴着，好像不认床。 平日相处我每天都会给他温水泡澡，有时候泡澡它会排便。泡澡后再给它喂食： 每天1颗龟粮（Mazuri牌陆龟粮5M21），泡软后放在岩板上让他自己吃。 一周会奖励它一次水果/蔬菜，都是厨房有什么就给它拿什么，比如一片包菜、小半颗草莓、半颗葡萄啥的。 一周会补一次钙粉，撒到泡软的龟粮上让它吃进去。 完全不怕人，伸手摸它也不怎么躲。不怎么拿它到手上把玩。 晚上看到我回家会靠近玻璃看看我，很治愈。 周末天气好我会带它出门晒晒太阳，在草地上撒欢爬。 合法持证饲养本人从线下正规爬宠店购入的红腿陆龟，有芯片标识卡，合法持证饲养。","categories":[{"name":"兴趣杂谈","slug":"兴趣杂谈","permalink":"https://rongyel.github.io/categories/%E5%85%B4%E8%B6%A3%E6%9D%82%E8%B0%88/"}],"tags":[{"name":"宠物","slug":"宠物","permalink":"https://rongyel.github.io/tags/%E5%AE%A0%E7%89%A9/"},{"name":"家有小红","slug":"家有小红","permalink":"https://rongyel.github.io/tags/%E5%AE%B6%E6%9C%89%E5%B0%8F%E7%BA%A2/"}]},{"title":"好看可爱又能吃的老八，谁不喜欢呢？——《败犬女主太多了！》","slug":"思维殿堂/兴趣杂谈/动漫/好看可爱又能吃的老八，谁不喜欢呢？——《败犬女主太多了！》","date":"2025-06-29T15:30:51.000Z","updated":"2025-08-24T06:38:28.594Z","comments":true,"path":"posts/b4a0abff.html","permalink":"https://rongyel.github.io/posts/b4a0abff.html","excerpt":"老八真可爱","text":"八奈见杏菜，人称老八，她实在是太青春太可爱了，值得我专门写篇文来记录她的可爱！ 伟大的A-1 Pictures献上了逆天的制作力想必有不少人跟我一样，看第一集的时候被这段制作给震撼到了。盛夏的蓝天白云，可爱的少女站在天台护栏边 她湛蓝的长发随风飘动，不知是在看向何人 抬首间，看到她宝石般的眼眸 她意识到你的到来，回首，挥挥手 几句交谈，不经意间悲伤涌上心头，已是泪满流 无法抑制的情感，无法抑制的泪。一段恋情的结束，也可能是另一端恋情的开端 蓝天，白云，盛夏，天台上的男女高中生。 活力的笑容是治愈人心得良药欠男主钱然后给他做饭，这种契约简直就是过一辈子的 俏皮可爱就是不太聪明 世界上只有青梅竹马和狐狸精，至理名言出现 为了安慰好伙伴，不惜搭上自己的胃，海吃湖喝，然后继续欠男主钱 看你这得意的样子，真是太让人喜欢了 能吃还有好身材的谁不爱呢？这腿 这战袍 这笑容 这小肚腩 这一拳，定终身 不失小心机的动作撩人心弦爱了爱了，上大分 这笑容说真的，守护一辈子 陪伴是最长情的告白本番最长的陪伴，毫无疑问就是老八啊希望最后能修成正果","categories":[{"name":"兴趣杂谈","slug":"兴趣杂谈","permalink":"https://rongyel.github.io/categories/%E5%85%B4%E8%B6%A3%E6%9D%82%E8%B0%88/"}],"tags":[{"name":"动漫","slug":"动漫","permalink":"https://rongyel.github.io/tags/%E5%8A%A8%E6%BC%AB/"}],"author":"Rongye"},{"title":"香格里拉边境 为什么让我兴奋","slug":"思维殿堂/兴趣杂谈/动漫/香格里拉边境 为什么让我兴奋","date":"2025-06-29T15:30:51.000Z","updated":"2025-04-22T16:02:05.000Z","comments":true,"path":"posts/3b1a7464.html","permalink":"https://rongyel.github.io/posts/3b1a7464.html","excerpt":"香格里拉边界荣升我十月最期待新番，着实拿捏了我对于虚拟网游的幻想，就像当年的刀剑一样。","text":"游戏，是我生活的一个重要旋律。从小学一年级开始，我就在楼上大哥哥的指导下，玩上了冒险岛这个网游，至今我都偶尔会上线玩一玩。当然，国内游戏环境实在太差了……这就是另外的话题了暂且跳过。 总之，网游这个东西我玩了很多年了，特别是角色扮演游戏MMO，在网络中，扮演一个非现实的角色和其他玩家一起冒险，打怪，看NPC的故事，会给我带来极大的快乐~ 冒险岛、龙之谷、剑灵、最终幻想14、激战2、魔兽世界、艾尔之光、彩虹岛、黑色沙漠……人生二十来年，也是辗转过多个异世界了呢。 所以游戏类的网文，也一直都是我的心头好。经典的《网游之纵横天下》、《网游之贼行天下》、《全职高手》、《网游之近战法师》、《惊悚乐园》……一个游戏网络世界，可能就是最对我胃口的世界设定。这几本书我都重看了不知道多少遍了…… 那么在动漫里，相关的也不少了其实。尤其是在《刀剑神域》的带领下，虚拟现实游戏类的动漫漫画轻小说作品那是层出不穷，《OVERLORD》至今还是我最喜欢的动漫/轻小说之一。 就是要这种大型角色扮演！MMO的网游！丰富的世界观，精细的职业技能，精彩的剧情，广阔的探险空间~太对我胃口了。而《香格里拉边境》，就是我时隔多年看到的新的网游动漫。 香格里拉的冒险动漫全称：香格里拉边境～粪作猎人向神作游戏发起挑战～男主是一个「粪作猎人」，喜欢玩各种粪作游戏，挑战不合理还能得到极大的快感。在通关了某部粪作后，为了换换口味，男主这次向神作「香格里拉边境」发起了进攻，在游戏的过程中，遇见了许多奇特的冒险。 撰写本文的时候已经看到第四集了，真的一跃成为我最期待的2023年10月新番。 男主是那种操作类玩家，追求极致的输出，脆皮，刀尖添血的那种。动漫也很好的制作出了精彩的打斗，使用完美格挡和巨型boss鏖战的打戏可谓是前三集的巅峰剧情。剧情中出现的boss也很有魄力，其他玩家角色绘制的也很好看，最重要的是，那种游戏氛围塑造的特别好。角色加点的分析、装备的选择、独特剧情的展开，看的我是真的过瘾！还有这只兔兔，太可爱了~ 看游戏题材的动漫和小说，其实也就是想通过“玩”以外的方式，享受到游戏的乐趣，而《香格里拉边境》它做到了。 该动漫其实是有原作漫画的，在日本旅游的时候刚好看到过它的超大海报，可见其原作实力充足，我觉得动漫是真的可以好好期待下去，期待下周的播出。","categories":[{"name":"兴趣杂谈","slug":"兴趣杂谈","permalink":"https://rongyel.github.io/categories/%E5%85%B4%E8%B6%A3%E6%9D%82%E8%B0%88/"}],"tags":[{"name":"动漫","slug":"动漫","permalink":"https://rongyel.github.io/tags/%E5%8A%A8%E6%BC%AB/"},{"name":"游戏","slug":"游戏","permalink":"https://rongyel.github.io/tags/%E6%B8%B8%E6%88%8F/"}],"author":"Rongye"},{"title":"至今为止我依旧认为，无职转生就是最好的异世界转生作品。","slug":"思维殿堂/兴趣杂谈/动漫/至今为止我依旧认为，无职转生就是最好的异世界转生作品。","date":"2025-06-29T15:30:51.000Z","updated":"2025-02-16T06:53:37.000Z","comments":true,"path":"posts/1da22451.html","permalink":"https://rongyel.github.io/posts/1da22451.html","excerpt":"鲁迪的人生旅程，就是无职的故事。","text":"鲁迪的人生旅程，就是无职的故事。 绝大多数的异世界动漫，不过是寻找了一个舞台，一个剑与魔法的西幻舞台，讲述一段快乐的故事。而无职转生才是真正的”现实太失败、太痛苦。幸运的是，身亡后意外穿越异世界，这一次我要好好重新过自己的人生。“的异世界转身题材作品。 认真的对待生死 父亲为了救自己，死了。母亲解救出来，但是痴呆了。普通的作品，哪里会去认真刻画这些，还刻画的那么动人，那么的撕心裂肺。画面中无声的沉寂，死寂，看的我心一抽一抽的。也很难受。鲁迪再次陷入了绝望，虽然鲁迪从某种意义上讲，不是他们真正的孩子。但毫无疑问，保罗和赛妮丝是鲁迪的父母。本集标题《双亲》，更是无声地点名了联系。很多异世界穿越的作品，对双亲的刻画几乎没有，可以说就是工具人。无职不仅有，还描述的很不错。 至第二季结束，父亲保罗的刻画毫无疑问，已经准确且完善了。接下来也不再有他的故事，已经化为一抔尘土。 而母亲赛妮丝，其实除了第一季开头一段外，描述的也不是那么丰富。但是看过小说的我知道，后面的剧情中，赛妮丝虽然痴呆了，但那种亲人间的情感一直存在，刻画的其实很生动，敬请期待后续剧情的发展。 认真的对待感情 第二季第24话，鲁迪背负着父亲的死、洛琪希的爱回到了自己的家，回来见自己的妻子、妹妹们。 他认真的传递了悲伤，认真的向着自己的爱人交代、恳求同意取洛琪希为妻。他是真的成长了，没有回避现实的残酷和尴尬，而是背负着这一切，面对他们，好好的向前生活着。 事情很顺利（这里我就忽略妹妹的情绪），希露菲第一时间就接受了洛琪希。虽然从现代人的眼光来看，这是开后宫，是一夫多妻，是应该被批判。后面还有爱丽丝呢，到时候就是三个老婆了，值得批判！但我一直认为在这种异世界、中世纪风的剑与魔法世界，完全没有必要把现代人的制度强加上去。我看这类作品，批不批判这个后宫，只看这段感情讲的怎么样。如果是那种龙傲天题材，收后宫那哪里有什么感情基础，只要男主有实力，自动会有一对妹子贴上来。而无职转生不一样，我认为鲁迪娶三个老婆，是因为他真的有三段真挚的爱情。且鲁迪为了她们都是付出了性命去珍惜的。 他值得这份爱，这是我的观点。 认真的，在这个世界活着 很多很多的异世界作品，我觉得看的很轻松的原因就是，他们根本就是来玩的。他们只是把异世界当作一个游戏去看待。当然，由于很多异世界作品就是看个爽，什么系统一大堆，这能不让人觉得是游戏才怪咧。 而无职，鲁迪，是真的来到了这个世界。但他真正在这个世界活着，其实是第二季最后一集了。在这一集中，他的第一个孩子，出生了。自己的血肉降生在世上的那一刻，他才真正与这个世界有了强烈的联系。他是切切实实的，是这个世界的人了。 另外就是，鲁迪在保罗墓前喝酒说的话，以及这一话的标题《继承》。鲁迪不再带着前世的记忆，用看陌生人的眼光，看待这个世界了。他真正的，会努力，在这个世界活得更好。珍惜一起他应该珍惜的失误 后面这段风吹动了鲁迪，仿佛保罗在身后拍了拍他的肩膀，说“那就都交给你了” 何时我才能看到转折点四 第三季也已经宣布制作，很开心~期待","categories":[{"name":"兴趣杂谈","slug":"兴趣杂谈","permalink":"https://rongyel.github.io/categories/%E5%85%B4%E8%B6%A3%E6%9D%82%E8%B0%88/"}],"tags":[{"name":"动漫","slug":"动漫","permalink":"https://rongyel.github.io/tags/%E5%8A%A8%E6%BC%AB/"}],"author":"Rongye"},{"title":"养一只红腿象龟以前，我需要做好哪些准备","slug":"思维殿堂/兴趣杂谈/宠物/养一只红腿象龟以前，我需要做好哪些准备","date":"2025-06-29T15:30:51.000Z","updated":"2025-08-24T06:31:56.073Z","comments":true,"path":"posts/f32ec8c.html","permalink":"https://rongyel.github.io/posts/f32ec8c.html","excerpt":"","text":"写在开头它是你的宠物，还是观赏物？这个话题我不展开，请各位自行根据自己的情况做选择。 在我这边，它是宠物。宠物是一种主要供个人陪伴的动物，我希望能跟它建立好的情感关系。龟这类宠物，只要看着它吃好喝好一天天长大，就能给我提供情绪价值了。再来就是熟悉我、信任我，不要天天躲着我，或者总是想着咬死我，那就养的相当成功啦。 原本我只养了一只小鳄龟，养了一年啦，目前看来养的还算成功？它是一只可以摸头的乖宝宝。今年计划再入一只红腿陆龟，年后就能到我家啦。当然，是正规爬宠店购入，合法持证饲养。 在等待它到来前，我也做了比较充足的准备来迎接它。花的钱比养鳄龟时多多了。。毕竟相对于小鳄龟这种比较耐好养活的，陆龟的饲养难度着实上升了不少。 本文无广，无产品对比我列出来的，就是我实际用的。没有货比三家，没有商家给我广告费。因此，文中提到的设备我都不会描述具体品牌，主要分析的是规格。 品种篇老版？樱桃？目前市面上有红腿陆龟（老版红腿）和樱桃红腿两个品类。根据大部分资料描述，樱桃红腿相较老版红腿有一下几个差异（未经过勘误）： 樱桃红腿的头部更红，老版红腿一般为黄色； 樱桃红腿的背甲更圆润，老版红腿会出现葫芦腰，雄性比较明显； 樱桃红腿可能爆白，老版红腿不会； 樱桃红腿腹甲大面积黑，老版红腿腹甲以黄色为主。 樱桃红腿成体最大约30cm，老版红腿可成长至40cm往上。 市场上樱桃红腿价格更贵，各个商家也比较推荐（吹嘘？）樱桃红腿更好更适合饲养。但从我个人角度来看，无论是樱桃还是老版，成体后都很好看。而且从海外的大量视频来看，这些爱好者均不纠结是樱桃还是老版，对红腿的喜爱都是相同的。 因此，我甚至更倾向于饲养老版红腿，因为我喜欢大的。目前家中已经养了一只小鳄龟，该品种也是能长到40cm往上的，所以我希望养的陆龟也是有这个最终潜力。 所谓爆白一般来讲，就是指乌龟生长速度过快导致龟壳黑色色素沉淀时间不足，呈现大面积的白色部分。据部分饲养者的说法，爆白只是幼龟发育过程中的一种现象，在成体以后会逐步变黑，最终无差别。（未经过勘误）只有樱桃红腿会爆白，老版红腿不会。可以看看自己喜欢什么样的，貌似有些玩法是专门培养爆白纹路。我个人是不太喜欢，黝黑的背甲更符合我的审美。 环境篇饲养箱选择市面上常见的有PVB箱、木箱、和玻璃缸。个人认为玻璃缸是观赏性最好的，但最不便利的。 最终我选择使用常规的爬宠玻璃缸进行饲养， 饲养箱尺寸分析根据英国两爬协会提供的爬行动物最小饲养尺寸指南，陆龟需要的饲养空间尺寸应为：8 x 4倍 腹甲长PL那么一只腹甲长度20cm的红腿陆龟需要的饲养空间大小应为：160x80cm长宽此外，广东这个地方其实是比较潮湿的，仅仅在短暂的冬季会比较干燥，所以缸内还需要注意通风。当然，在保证了通风的同时，就导致了冬季很难保湿。这个难题后续会再分析。 具体的，我选择的了一个90*45*45CM规格的箱子。该箱子顶部、两侧均设置了网格风道，因此对通风有一定帮助，适合东南沿海比较温暖、潮湿的地区。这个规格属于一步到位型，本人居住在城市中，没有院子之类的环境散养红腿，因此咬咬牙选择大的饲养缸，希望能够给它提供一个还算自由的空间。但是，由上述分析可见，我准备的这个90*45*45CM其实按道理只能勉强养一只腹甲12cm的红腿，而这个尺寸可能成长1年就超过了……对此我暂时没有太好的办法，只能说住房就只能那么大，最多平时放它在家里散散步。 温度温度需求分析红腿象龟在自然界中栖息在热带雨林和热带草原的过渡区之间，如林中空地或沿水路。对环境温度具备较强的适应性，栖息地温度在20~35℃。 红腿象龟的首选栖息地按地区有所不同，但一般包括温度接近30°C的地区，很少低于20°C或超过35°C，同时喜爱高湿度、雨量充沛的地方，尽管一些地区可能相当干燥。大多数的栖息地内可能会遇到较冷的雨季（4月到8月）和温暖干燥的季节（9月至3月），但只有部分的南部范围内偶有寒流。——引自维基百科 温度梯度规划此处我准备使用加热灯的方式提供温度。搭建环境温度的方案参考了其他资料比较完备的爬宠环境，如蓝舌。如下图所示【待补充】，整个缸分为3部分，热区、温暖区和冷区三个梯度区域。 广东只有两种天气，设计温度区间如下： 非冬季：热区温度约32℃，温暖区温度约28℃，冷区温度约24℃。 冬季：热区温度约28℃，温暖区温度约24℃，冷区温度约20℃。 热区是热源放置的位置，此处我会放置UVA(晒灯，100w)、UVB（10.0，15w），和一个陶瓷灯（75w）作为热源。 其中，UVA和UVB两盏灯使用一个双灯罩，放置在饲养缸的上方，经过滤网后照射右侧40%的缸内空间。这两盏灯将会在白天定时开启12小时，只定时，不温控。通常白天开启的时候，缸内热区的温度就可以稳定在26℃（冬季） 而陶瓷灯则是作为补充、保底热源，通过一个壁挂灯座挂在缸内的。它是接入温控控制的，温度上下限就是前面写的温度区间，加热到温暖区就够了。而且它是完全无光的，在夜间使用也不会影响到爬宠。 冬季的时候，温度低于20℃才开启，加热到24℃就会断开了。一般来讲，只会在深夜、凌晨那段最低温时间，才会低于20℃。所以这个灯工作通常都不工作的，只有深夜工作一会，确保温度不会太低。 龟并没有那么的脆弱，存在昼夜温差对于生物来讲是很正常的。不过在苗子阶段，温度最好还是保持的再高一点。避免在身子还比较虚弱的时候受到太大的刺激。 温度相关设备 UVA灯（日光灯，100w） 陶瓷灯（75w），无光热源，适合夜间加温 壁挂灯座，可悬挂于缸内 双座灯罩，可以放置在缸顶隔热网上。适用于希望同时开关的两种灯，如UVA+UVB 温控器，只接陶瓷灯，用于设置温度区间，最好能按白天、黑夜分开设定。通常我会让夜间温度比白天低4℃。 定时器，只接UVA+UVB，这两个灯不需要温控，也不能用温控，常开即可。 湿度湿度需求分析红腿象龟在自然界中栖息在热带雨林和热带草原的过渡区之间，如林中空地或沿水路。对环境湿度有较高要求，建议维持在70~80%，如果湿度过低可能会导致隆背。 红腿象龟的首选栖息地按地区有所不同，但一般包括温度接近30°C的地区，很少低于20°C或超过35°C，同时喜爱高湿度、雨量充沛的地方，尽管一些地区可能相当干燥。大多数的栖息地内可能会遇到较冷的雨季（4月到8月）和温暖干燥的季节（9月至3月），但只有部分的南部范围内偶有寒流。——引自维基百科 湿度控制手段湿度这方面没什么可说的，一个就是加湿器，另一个就是靠垫材，还有就是喷水。因为在广东地区，整体还是比较潮湿的，唯一可能干燥的时间段就是短暂的冬天。 目前我的保湿策略如下： 缸内放置一个大的水盆：即便整体的湿度不足，龟龟也可以通过水池的方式来给自己保湿。并且在晒灯下，水分持续挥发，一定程度上遏制了缸内湿度下降的速度。 垫材主要使用椰土：保湿性极好。 湿控加湿器：通过湿度控制器自动开关：当湿度低于设置的最小湿度60%后，加湿器通电开始喷出水雾，直到湿度回升大于设定最大值80%。 喷壶手动喷水：直接用喷壶是极为高效的加湿方式，水雾模式喷洒缸内几秒即可维持较长时间的湿度。注意不要对着湿度计喷，放置湿度计内残留水渍影响判断。 非冬季期间，靠垫材加简单的物理加湿方式就能顶得住。日常保持喷水，人不在就放个水盆、干苔藓盒，确保龟龟能够自己找到加湿的地方应该就OK了。 冬季的时候，因为白天的时候缸内要开晒灯，所以湿度会降的比较快。在白天开着晒灯的情况下，先通过喷壶喷一次水，达到80%湿度后，最多只能维持湿度在60%以上1个小时。因此白天的时候必须同时开着加湿器。它的工作机制是每1个小时喷雾10分钟。实际上大约喷雾5分钟，就能够将湿度从59%抬到80%。麻烦的地方在于，这种喷雾的加湿效果维持的时间很短，不像喷壶那样实际有很多水残留在表面，能够继续挥发维持湿度。所以虽然湿度抬到80%以上，但大概20分钟就会跌落低于60%，然后重新触发湿度控制，再次开启。加湿器这样频繁开关，也是有点恼人。而且这个加湿器加湿的时候噪音还是比较明显的。对此目前也没有什么太好的办法，冬天只能这么熬过去吧。 到了晚上，湿度的问题就会好很多。因为不需要继续开晒灯了，这时候椰土垫材的保湿能力就会体现出来。睡前甚至不需要用喷壶喷一次水，缸内湿度就可以持续保持在70%以上。所以晚上是可以把加湿器关掉的，增加续航。 湿度相关设备 湿度控制器：接加湿器，低于60%开启，高于80%关闭 加湿器：喷雾型、雨淋型均可，根据缸的造景和个人喜好选择 又浅又大的水盆：浅，是为了爬宠不会笨死在里面。大，是为了容纳更多的水，在晒灯下能挥发更长时间。 保湿垫材：椰土等，根据个人喜好选择。 喷壶：常规的种植喷壶即可，水雾状喷洒几秒，就可以快速提高湿度。 UVA灯（晒灯）单独聊UVA灯，是因为灯具的选择需要根据具体的环境数据进行。前面虽然规划好了温度梯度，但如何实现这样的环境，就需要仔细分析灯的使用。 在购置灯的时候，我发现商家经常不会把灯的数据明确写在商品页面上，这对我挑选灯的规格带来了巨大的困扰，只能咨询客服给些意见（但不少客服其实根本不懂）。而且尤为搞笑的是，我把灯实际买到家后，灯的包装上其实是明确的写了：在多少距离下大概是多少温度。就非要我先买才能获取相应的资讯？真的是浪费时间。 去外网官网查询倒是轻松获取到这个信息了，如下图的一个太阳灯，一看就就可以初步判断，我这个高45cm的箱子，如果用这个100W的灯，产生的温度高达38℃，不符合需求。而且考虑到垫材和晒台的高度，实际灯的距离应该在40cm左右。 当然，这个图也只能作为参考，初步分析一下。真的数据还得买回来实际测量一下，毕竟温度这些东西跟我们所在的环境也是有很大关系的。 最终，加热灯的选择：日光灯100W。由于这种灯的光是比较散的，在冬季，经过几个小时的加温，峰值也就25℃左右。没有达到我计划的冬季晒点温度28℃。不过我的热源还有一个陶瓷灯，那个灯是挂在缸内的，所以温度不足的部分由它来补足即可。 UVB灯按照各位爬圈大佬的科普，UVB主要根据弗格森区判断需要的UVI指数搜索一下关键文献：《Reptile and Amphibian Working Group UV-TOOL》。从文章中可以直接看下总结部分补充一个中文表格更方便看，是冬青大佬专栏文章里的 研究到这里就会发现，红腿陆龟在整个爬宠界都是有名的存在？好多文献中都以红腿陆龟作为了陆龟的一个代表列出名字。得幸于此，我们可以明确判断，红腿陆龟属于弗格森2区，需要的UVI应该在0.7 ~ 1.0。根据此数据，我再去寻找40cm这个距离下，哪个规格的UVB能够满足我的诉求。目前看下来，UVB10.0 15W这个规格应该是比较合适的。根据该规格的等辐射图，这个区间应该会获得大约13 ~ 27 μW/cm^2的UVB. 问题来了，这怎么对应上前面说的UVI 0.7 ~ 1呢？ 根据冬青老师的视频可以了解到，UVI和UVB的比例大概是1：25μW/cm^2 。当然，这个比例只能参考，不同灯具厂商实际制造的比例不一定按这个来。最合理的还是直接测量一下。所以上面的13 ~ 27 μW/cm^2计算过来那就是0.52 ~ 1.08，而我的距离应该在40cm，所以不会达到30cm这个最大值，不会超过1的范围。 UVB数据实测前面的内容都是理论计算，下面我直接拿实际的灯具和仪器做了测试，来验证上面的分析是否正确。为了给龟龟打造最合适的环境，也算是下血本了（仪器贼贵。。。 现在用来测试的灯是reptizoo的UVB5.0 26W。为什么是这个灯呢？我上面不是分析要UVB10.0 15W吗？那是因为我买这个灯的时候还没有经过仔细的研究学习，而通常来讲会推荐雨林型的爬宠使用UVB5.0的灯具。然后我考虑到缸比较高，灯的距离远，所以还特意挑选了26W。 看包装上画的图，跟我上面的图是一致的。那么根据标注，现在这个UVB5.0 26W，在45cm的时候应该是10 μW/cm^2。 接着是测试仪器，买的是Giangarden的UVB测试仪。这个也是经过冬青老师测试过的，有发布视频，测试准确度还不错。 下面就是测试的结果了，第一张图片是直接把仪器放在灯正下方缸底。我这个现在是空缸，所以距离其实就是45cm左右。测试结果显示的是UVB的数据，现在是8 μW/cm^2。跟标注的的10 μW/cm^2还算接近。第二张图片是用灯泡的盒子垫了一下仪器放在灯正下方缸底。盒子的厚度差不多就是5cm，所以距离其实就是40cm左右。现在是12 μW/cm^2，图上标的是30cm-&gt;16，45cm-&gt;10，所以这个40cm-&gt;12感觉还是挺合理的。 测试结果可以看出来，，这个UVB5.0 26W的灯确实不符合需求，12μW/cm^2 按照1：25折算换算的话UVI才0.45左右。而红腿陆龟属于弗格森2区，需要的UVI应该在0.7~1.0，所以不够。因此还是得买那个UVB 10.0 15W才行。 最终，UVB灯具选择：UVB 10.0 15W，将仪器放到晒台位置进行实测，测出来是20μW/cm^2，也就是0.8，达到弗格森2区的范围了。而且龟龟自身还有一定高度的，所以这里指数还会略微再高一些，肯定是满足要求了。 垫材红腿陆龟作为雨林型爬宠，是有较高湿度需求的，所以在选择垫材的时候需要考虑到保湿性。因为之前我也养过一只寄居蟹，所以对于椰土这种垫材已经相当熟悉了。椰土的保湿性是很好的，价格也十分便宜，一块椰砖顶天了十来块钱，泡水以后可以铺一整缸，缺点在于容易生虫，所以最好不要单独使用。这个陆龟缸我会考虑栽种一些绿植作为造景和保湿，所以会补充一些腐殖土。 最终，垫材选择：2斤泥炭土+8L椰土+2斤半块椰壳砖+9斤小颗粒红土，混合铺底，再盖上一层森林地表。额外的，我在龟龟的躲避屋下铺了椰棕垫，这个东西主要是保持屋内的干净，以防龟挖土啥的。 垫材铺好以后浇水，把土略微浇透。即便不需要加湿器，缸内湿度可以自然稳定在50%以上。当然，红腿的湿度要求一般说是70% ~ 80%，但整体环境就可以保证50%的话，对龟龟来讲至少是安全的了。 食盆、水盆食盆简单选用了一块岩板，足够大，跟垫材明显区分开，培养龟龟只吃这个岩板的东西，减少误食垫材的可能。当然，我最上面一层垫材已经是大颗粒的森林地表了，小龟根本不可能误食。水盆我选择了比较大的，放在缸中宛如一个小池子。大的水盆能装更多的水，不仅能够给龟龟提供饮水区域，还能维持环境的湿度。 躲避考虑到龟龟的生长速度，我直接一步到位买了最大尺寸的陆龟躲避。这里注意要买圆拱形的，陆龟不是其他爬，壳会拱起来占很多高度，跟蜥蜴、蛇等爬是不一样的。别看这个好像还挺大的，实际上可能对18cm背甲大小的龟龟来讲就是极限了。这里我放了16cm的小鳄龟做了下测试，真的就是恰好能睡进去吧，头可能都得暴露出来了。 绿植这个属于非必须品，主要是造景和一定的保湿作用。绿植我购置的都是雨林类植物，没有铺设很多，毕竟我这是要养龟不是要造雨林缸。栽种了迷你椰树、狼尾蕨、菖蒲、阿波蕨。还有短绒藓，点缀在躲避屋、岩石背景板上。数量上要克制，因为种多了占用龟的活动空间，可能直接被扒出来了。就像放鳄龟进去试水的结果如下…… 喂食篇红腿的食谱是比较广阔的。与几乎所有种类的陆龟不同，红腿陆龟实际上是杂食性的。 红腿象龟的大部分饮食都是果实或种子荚。常见的食物有水果、萝蔓 仙人掌、无花果、金合欢、槟榔、番荔枝、蔓绿绒及凤梨等。而经常在粪便发现水果亦有五种。红腿象龟是会吃掉整个水果而不吐核，此举有助传递的种子及发芽。而红腿象龟亦被发现会在住所的果树下等待水果在树上掉下。 其余的食物包括草、叶、花、根、芽及各式各样的植物以及真菌，亦会吃无脊椎动物（如蚂蚁、白蚁、甲虫、蝴蝶、蜗牛和蠕虫）、腐肉和狐狸粪便。红腿象龟亦经常被发现会进食尸体，直到吃饱，偶尔会吃较小的动物，如蛇、啮齿动物等。粪便中亦会发现卵石和沙。 饮食习惯会根据季节而转变。在湿润的季节中，它们可能是大约会进食70％的水果及25％的新鲜的叶、芽和其余为真菌和动物性食品。在干燥的季节则会吃40％的水果，23％的花，16％的新鲜的叶，芽、真菌、苔藓及动物性食品。 对杂食性的龟而言，如果它们不能在饮食中获取足够的钙，便会寻求一直钙含量高的食物，甚至会吃含矿物质的土壤。——引自《维基百科》 日常食谱为了培养感情，我计划每天喂食。主食就是龟粮，将一粒接近乌龟头部大小的龟粮泡软即可。同时为了保证多样性，对于红腿陆龟，应该提供大约 70% 水果、25% 绿色蔬菜、5% 蛋白质的饮食。食物的多样性对龟龟健康非常重要，而红腿居住在雨林环境，能吃的东西更多。即便是水分较多的水果，它也完全没问题。 最终菜单如下：龟粮+一颗水果+两片蔬菜，水果蔬菜都看家里有啥就给啥，不刻意准备。每周添加一次钙粉，混在食物中。 下面会具体分析具体的食谱。 龟粮龟粮，这里选择的是爬宠店店主推荐给我的，Mazuri牌陆龟粮5M21（老款）。该龟粮几个关键的数据是：粗蛋白15%、粗纤维18%、钙1%、磷0.6%。这个配比比较通用，对红腿陆龟来讲足够了。该品牌还有所谓新款，其实是针对沙漠型陆龟的高粗纤维版本，红腿其实不需要。甚至在查阅产品官网的时候，可以明确看到：该规格产品适用于红腿陆龟。所以，妥了，就它了。 水果、蔬菜高水分的水果和蔬菜毫无疑问是红腿陆龟的最爱，只是要注意控制量，这些东西的水分和糖分太高了。主食还是得用龟粮，水果蔬菜作为辅助丰富多样性，切忌只喂果蔬。大部分蔬菜水果瓜类都能接受 可以食用的水果如下：草莓、蓝莓、芒果、哈密瓜、西瓜、香蕉、苹果、番茄、葡萄，一次一块差不多。可以食用的蔬菜如下：常规叶菜，如：生菜、羽衣甘蓝、花椰菜，一次两片差不多；其他的如黄瓜、胡萝卜、南瓜都可以，一次一小块。 蛋白红腿是可以吃动物蛋白的，偶尔喂一些就好了。最简单的，直接给它喂鳄龟粮就可以了哈哈哈，泡开即可。鳄龟粮里都是高蛋白的。 钙质陆龟食谱中，最适宜的钙磷比应该是2:1。这并不意味著食谱中的精确比例应该如此，而是强调需要摄入丰富的钙。摄入足量的磷并不是一个问题，因为植物中普遍富含了足够的磷。陆龟有别于其他动物对于食物的钙磷比需求，因为陆龟是拥有甲壳的。而甲壳主要就是由钙和磷两种元素组成的。大部分的陆龟营养失调问题都因为缺乏钙质吸收。成长期的陆龟需要更多的钙质，可以在每一餐都添加适量的钙。补充钙质有许多种方法，但必须同时补充维生素D3，钙质的代谢吸收依赖于维生素D3。有些补钙产品中会添加大量的维生素D3，但是在过量的维生素D3会导致过量的钙质吸收，而过多的钙质会出现滞留在组织和关节中的情况。因此补钙也需要控制。通常来讲，只需要一周一次在饭中加钙粉即可。另外也可以选择墨鱼骨，让它自己啃，还能锻炼它头部肌肉群，并研磨嘴部角质层。 结语生命可贵，希望大家都能对自己的爬宠好一点。花时间精力去研究如何才能给他们提供更好更舒适的环境，不仅对龟好，对自己而言也是一种成长。希望我这次打造的陆龟缸能让红腿龟龟满意。","categories":[{"name":"兴趣杂谈","slug":"兴趣杂谈","permalink":"https://rongyel.github.io/categories/%E5%85%B4%E8%B6%A3%E6%9D%82%E8%B0%88/"}],"tags":[{"name":"爬宠","slug":"爬宠","permalink":"https://rongyel.github.io/tags/%E7%88%AC%E5%AE%A0/"},{"name":"宠物","slug":"宠物","permalink":"https://rongyel.github.io/tags/%E5%AE%A0%E7%89%A9/"},{"name":"陆龟","slug":"陆龟","permalink":"https://rongyel.github.io/tags/%E9%99%86%E9%BE%9F/"}],"author":"Rongye"},{"title":"从来就没有什么事情是白费的。","slug":"思维殿堂/兴趣杂谈/轻小说/从来就没有什么事情是白费的。","date":"2025-06-29T15:30:51.000Z","updated":"2025-09-07T14:27:03.088Z","comments":true,"path":"posts/ff845ada.html","permalink":"https://rongyel.github.io/posts/ff845ada.html","excerpt":"——《我们的重制人生》第四卷读后感生活在前进，事态在发展，无论好坏，皆有其价值。","text":"从来就没有什么事情是白费的。我们的重制人生 再读一遍，更为感动。近期重新阅读了《我们的重制人生》这部我非常喜欢的轻小说。先是看了最后一卷，把结局补完了，再回过头来从第一卷开始阅读，感觉非常好。虽说是轻小说，但作者阐述的生活道理还是非常到位的，并不是凭空捏造的，对我有一定的触动。 尤其是对男主角色的形象塑造真的很充实。 看到最后一卷的时候，过往的经历，曾经对同伴说过的话，拨开云雾的意志，都很好的呈现了男主的成长。他努力过，逃避过，但最终总是会为了同伴而再次站上战场。 但更惊喜的是，我回过头来看第四卷，看到男主恭也的第一次成长时刻，也有一定的收获 恭也在被送到另一个未来后，看到伙伴们都离开了创作的赛道，失去了”原本“那个未来的辉煌，而陷入了深深的自责。因为他也并非一个没有责任感的人，但这种人也非常容易陷入牛角尖，觉得一切都是自己的错，一切责任都应该自己背负。明明已经全力为他人着想、奋斗，但一旦失败却总想着自己吞下苦果，将罪过拦在自己的身上。 还好，有河濑川。我真的蛮喜欢河濑川的，如果是我，我会选她。她怒斥恭也， ”你的存在就是个错误？那怎么可能呢，你要是那么说的话，那你帮助我的事也是一个错误吗？“”从来就没有什么事情是白费的。“她露出了恶作剧似的笑容，朝着大门走去，留给我一个飒爽的背影。 真的，是个直爽的妹子啊，我好喜欢她的性格。还好有河濑川，才能拯救恭也。而且，是两次啊！ 第四卷，最后一卷，都是由河濑川发起的事件才将恭也卷入到战场上。这也算是一种首位呼应吧。 每个人都应该为自己的人生负责并非你所经历过的未来才是唯一正确的未来。在河濑川的全力倾诉下，恭也终于理解了自己的所作所谓，并非什么错误。不同的选择回来带不同的结局，不同的结局也并非只有一种才是幸福的结局。 我一直以为，自己对他人的人生负有责任。所以，对未来感到了绝望。这是因为我直到它们原本的命运，而我的到来则改变了一切。可是，决定人生价值的不是别人，而是自己。它们再那个未来，即便是有我的思想和行动的介入，也自己做出了人生的选择。而我将其评价为不幸，乃是一种明显的傲慢……——从现在起，我们的重制人生，正式开始了。 没有什么事情是白费的所以要珍惜已经发生的每一件事情。回顾，总结，反思，精炼。做笔记，写日志，为的也是这些。 确实，我有很多事情做的不够好，不够努力，不够坚持。 意志力薄弱，健身不成功，练琴不持续，视频更新慢……等等等等，不要懊悔，不要自暴自弃，不要觉得为时已晚。正视过往，继续前进。 我决不限制自己。我会用尽自己的全部智慧寻找答案，然后全力追求。只要那是我的真心，就一定会得出一个结果。 生活在前进，事态在发展，无论好坏，皆有其价值。","categories":[{"name":"轻小说","slug":"轻小说","permalink":"https://rongyel.github.io/categories/%E8%BD%BB%E5%B0%8F%E8%AF%B4/"}],"tags":[{"name":"轻小说","slug":"轻小说","permalink":"https://rongyel.github.io/tags/%E8%BD%BB%E5%B0%8F%E8%AF%B4/"},{"name":"人生感悟","slug":"人生感悟","permalink":"https://rongyel.github.io/tags/%E4%BA%BA%E7%94%9F%E6%84%9F%E6%82%9F/"},{"name":"观后感","slug":"观后感","permalink":"https://rongyel.github.io/tags/%E8%A7%82%E5%90%8E%E6%84%9F/"}]},{"title":"我的2024各平台年度游戏总结","slug":"思维殿堂/兴趣杂谈/游戏/我的2024各平台年度游戏总结","date":"2025-06-29T15:30:51.000Z","updated":"2025-08-24T06:18:16.380Z","comments":true,"path":"posts/bf5415af.html","permalink":"https://rongyel.github.io/posts/bf5415af.html","excerpt":"今年还是玩到不少好游戏的，很开心。","text":"Switch年度游戏：圣兽之王今年Switch的使用频率确实不高，大部分时间都在吃灰。唯一让我投入时间的游戏是《圣兽之王》。这款战棋类游戏非常符合我的口味，角色和兵种丰富，晋升系统和装备系统也很有深度。战斗前的策略规划让人感到非常过瘾，画风也很有特色。虽然我还没有通关，但这款游戏无疑是我在Switch上的年度最佳。 PS5PS5今年的游戏阵容非常强大，全都是3A大作： 黑神话 悟空 艾尔登法环：黄金树幽影 最终幻想7：重生 博德之门3 赛博朋克2077：往日之影 年度游戏DLC：黄金树幽影作为一个DLC，黄金树幽影的地图庞大，探索乐趣高（尽管奖励较低），BOSS数量多（虽然有些设计不尽如人意）。我在游玩时非常投入，喜欢慢慢探索整个幽影地。这种魂类游戏的探索体验独一无二，非常符合我的口味。 年度游戏：黑神话 悟空黑神话 悟空不仅是我国第一个正经的游戏大作，抛开文化情怀，它本身也是一款非常优秀的游戏。BOSS战数量多，失败惩罚较低，角色性能强，战斗手感棒（以上均为相较黄金树幽影而言）。这款游戏无疑是我在PS5上的年度最佳。 Steam2024年新增的游戏平台是Steam，因为二手入了一台SteamDeck OLED，大幅扩展了我的PC游戏库。 年度游戏：暗喻幻想年度最佳游戏毫无悬念，是《暗喻幻想》。虽然剧情相对简单，但游戏性非常出色： 战斗系统有趣且具有挑战性。 职业系统丰富，多种特色职业搭配的合体技是构建的核心。 出场角色丰富，类似女神异闻录，主角与众多角色建立联系，有故事，有陪伴。 此外，游戏的UI设计非常酷炫。虽然一开始觉得有点闪有点晃，但长时间游玩后发现并没有困扰我，反而让我感受到精美的艺术和流畅的动效。虽然没有超出我的预期，但《暗喻幻想》无疑是一部优秀的JRPG游戏。","categories":[{"name":"兴趣杂谈","slug":"兴趣杂谈","permalink":"https://rongyel.github.io/categories/%E5%85%B4%E8%B6%A3%E6%9D%82%E8%B0%88/"}],"tags":[{"name":"游戏","slug":"游戏","permalink":"https://rongyel.github.io/tags/%E6%B8%B8%E6%88%8F/"},{"name":"年度总结","slug":"年度总结","permalink":"https://rongyel.github.io/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"}]},{"title":"暗喻幻想，质朴而王道的幻想篇章","slug":"思维殿堂/兴趣杂谈/游戏/暗喻幻想，质朴而王道的幻想篇章","date":"2025-06-29T15:30:51.000Z","updated":"2025-08-24T06:31:13.295Z","comments":true,"path":"posts/90cf254f.html","permalink":"https://rongyel.github.io/posts/90cf254f.html","excerpt":"","text":"第一感受，就是王道从游玩试玩版开始，就觉得这个游戏也太古朴了。估摸着，阿特拉斯觉得开启一个新IP还是要以稳为主，所以游戏开篇剧情非常朴实地展开了：国王驾崩，王子遇刺，男主觉醒，伙伴觉醒，王位战争……没有什么出人意料地设计，而且剧情太赶，前期还显得觉醒非常突兀，所以感受并不是很好。 我对于RPG的剧情要求还是比较高的，所以暗喻幻想给我的第一印象很一般，序章我都慢慢玩了好一会才打完。不过事实证明，王道也没什么不好。 第二感受，花里胡哨指的毫无疑问是UI，人设，美术。阿特拉斯一如既往的时髦值爆表，各项画面都充满了大片色块的填充，很酷炫，真的很酷炫，一开始还有点不适应，觉得画面花里胡哨闪啊闪啊闪的，但实际游玩一段时间以后就不存在不适合感了，可以尽情享受这种极致时髦的UI界面 第三感受，似曾相识前面也提到了，从剧情上讲，过于王道了。没有什么太大的爆点，前期就是公路片，几大都城依次走一遍。每一座城市发生一段故事，然后在限定时间内通关迷宫。这个流程和女神异闻录系列是完全一致的，时间驱动系统，所以非常熟悉了。迷宫的话，因为我都是简单难度，所以除非有机制限制，我都是一次打到底。剩下的等待时间，那就是用来推动coop剧情，看看和主角建立关系的伙伴们发生的故事。如果有资质限制，那么就参加点活动来提升属性点。总之就是女神异闻录那一套，玩起来可以说是没有任何区别了。对此我表示满意，因为我还挺喜欢这套的。 第四感受，战斗有趣毫不夸张的说，暗喻幻想我最喜欢的就是战斗。除开剧情，战斗甚至是支撑我一直玩下去的东西之一。战斗系统是继承的真女神转生那个系列，这个我没有玩过，所以还觉得比较新鲜。相较于女神异闻录的”硬“回合制，真女神转生这套战斗更灵活，不局限于每个人行动一次，而是由行动点作为资源，自由排布每个人的行动。如果跳过行动，只会消耗一个行动点，后期也有专门的装备、技能来控制行动点的消耗情况，比如只消耗半个，合体技只消耗一个，以及增加行动点，这构建了战斗系统的核心。行动点越多，能做的花活越多，可以上满buff，集中一个主力输出爆发，实现一回合秒BOSS。后期也确实是这样，集中资源给男二斯特罗尔，后期简直就是剑圣，一刀暴击秒天秒地。 第五感受，渐入佳境当主线剧情逐步推进，相关的角色也逐渐饱满了起来。COOP的伙伴齐了以后，还是很期待它们相关剧情的推进的。自由活动时间我都会选择看伙伴剧情，现在的剧情选项没有死扣好感度了，只要推进了就行。因此选项可以更加自由，可以凭借自己的喜好和扮演的感觉来选择，代价仅仅是收到的强化资源多少罢了。伙伴随着剧情饱满起来后，再跟它们一起冒险就更有趣了，这一点暗喻幻想塑造的还可以，至少每个角色都是完整的故事。比较可惜的还是，剧情不够出彩吧，只能说太保守了。基本上看了开头前几章的剧情，结局就已经可以猜到了。到了这个阶段，角色的培养也起来了。主力角色们的阿基态开发的差不多了以后，战斗就轻松了不少。各项属性全体攻击，各种buff，以及合体技，都开发的差不多了。战斗起来就比较随心所欲，比较享受了。这个阶段刚刚觉得，暗喻幻想的公路片还挺有趣的。 第六感受，剧情加速可惜的是，剧情还是太短了……不知道是不是开发时间不足，抑或还是太保守。主线剧情到了第五个大城市，就突飞猛进了，我感觉本来应该至少还有2个城市的。没想到第五个剧情，直接就让大反派路易，把二反派那个福登给直接捅死了，毫无逼格的就死了。你说一个大教皇，怎么可能不是个大boss嘛？结果吧唧一下就直接弄掉了，感觉血亏一个boss副本。后面就是主角真实身份暴露……妈的男主怎么可能不是王子嘛，这个也是开头就猜到了。不过惊喜还是有一点的，不是说单纯的王子失忆啥的。而是王子的”幻想“，”幻想“代替他在外冒险，最后王子死了直接合并到幻想身上，幻想就真的成了王子本人啦。这设定也还算合理吧，回扣游戏主题”幻想“。幻想的力量，就能解释一切吧哈哈，不较真了。 第七感受，王道反派说回这个反派路易。嗯，从一而终啊。开头就一副要灭世的样子，最后也真真切切的是在筹备着灭世的活动，也差点给他灭了。只能说，日式游戏里灭世太常见了，所以也没什么意外。后期也解释了他，其实跟男主一样，就是真正的人类，爱达尔族。但是他被灭族了，那恨全世界很正常嘛不过呢，主角团肯定是充满希望的，这里也懒得吐槽了，日式剧情就这样吧，翻来覆去就那些说实话，不知他人恨，莫劝他人善。但不管怎样这个boss还是得打的。路易帅是帅，当反派就堂堂正正当到最后，没有反转，挺好的 第八感受，王道收场最终BOSS战，反正就是酷炫吧。总共需要打路易三个阶段，因为后期战斗数值已经超模了，只要叠好BUFF一刀下去至少半条血，最多两个回合就可以干掉。除非有一些机制锁血，否则真没什么难度了。 毫无疑问，主角团打败了路易。这里倒是和P5有点像，最后大家都不是正常体型了，而是很酷炫的那种超大型机甲。最后主角一刀带走了路易 帅气，这个画面还是很有冲击力的。跟P5很像，最后撒旦耶尔那一枪的风采。 最终感受，及格，但期待更多成为国王，国家变得更好。非常正常的结局，美好且充满幻想。真的感觉非常非常保守了这一部剧情，特别正，特别王道。 日后谈也还不错，大家都有美好的生活，走出了过去的阴影。今后，大家一起为了玛丽亚第一共和国而努力吧！玛丽亚真可爱~作为新IP的第一部，我觉得剧情还凑合吧。不过整体的系统打造的已经挺不错的了，希望能坚持下去开发第二部。虽然第一部这个剧情已经很完整了，也不知道第二部能讲什么。但想到八方旅人，八方的第一部剧情也很垃圾，第二部就进步了非常多了。 期待第二部","categories":[{"name":"兴趣杂谈","slug":"兴趣杂谈","permalink":"https://rongyel.github.io/categories/%E5%85%B4%E8%B6%A3%E6%9D%82%E8%B0%88/"}],"tags":[{"name":"游戏","slug":"游戏","permalink":"https://rongyel.github.io/tags/%E6%B8%B8%E6%88%8F/"},{"name":"暗喻幻想","slug":"暗喻幻想","permalink":"https://rongyel.github.io/tags/%E6%9A%97%E5%96%BB%E5%B9%BB%E6%83%B3/"},{"name":"Atlus","slug":"Atlus","permalink":"https://rongyel.github.io/tags/Atlus/"},{"name":"JRPG","slug":"JRPG","permalink":"https://rongyel.github.io/tags/JRPG/"}]},{"title":"ARM memory属性的理解","slug":"思维殿堂/技术笔记/ARM/ARM MEMORY属性","date":"2025-06-29T15:30:51.000Z","updated":"2025-02-16T06:52:41.000Z","comments":true,"path":"posts/2957f6bf.html","permalink":"https://rongyel.github.io/posts/2957f6bf.html","excerpt":"在看ARM的各种技术手册中，会多次看到对于memory属性的描述，诸如Cacheable、Allocate、Device nRnE等等。本文主要以CHI中的MemAttr、SnpAttr域段，展开对memory属性的学习。","text":"参考文献ARM各种Memory类型理解 - 知乎Cache知识整理-Read-Allocate/Write-Allocate_IC小牛牛的博客-CSDN博客_write allocateWrite-back，Write-through及write allocate_wenxiaohua_supper的博客-CSDN博客CHI到底是干嘛的 保证cache一致性 2.3 snoop_数字芯片设计与验证－－关易寿的博客-CSDN博客_cache一致性的 chi协议 CHI中对属性的描述memattr和snpattr，在CHI的协议层通道域段中，是有单独表述的。 MemAttr根据链接，可以看到memattr(memory attributes)，涵盖的是EWA(early write acknowledgement)，Device，cacheable和allocate这几个属性的信息。 EWA EWA主要是针对写事务响应的来源进行了指示，这部分内容主要与保序机制相关。 写事务完成与否，是需要给出反馈的，这里的early，涵盖的意思就是写完成响应能不能提前返回。什么叫提前返回呢，这里涉及到CHI总线的结构，当某个请求节点发出写事务，会经过中间节点，然后再发给实际进行写的节点，比如一个ddr memory。 那么，如果写完成响应，是在写数据实实在在的到达了ddr memory以后才发出，这就属于标准的完成响应。如果，在写事务从中间节点发出了， 不管有没有真的写到ddr memory，都算写事务完成了，然后中间节点直接返回了一个写完成响应，那么这就叫做提前返回。 EWA指示的就是，本次事务能不能提前返回写完成响应。 Device device属性是和normal memory相对应的概念。 Device，就是设备。表面这段memory空间是一个设备在使用的。这里简单理解就是，它不是一个单纯的存数据的memory空间。很多Device memory空间，里面放的是对这个设备进行控制的信息，比如是否使能这个设备。所以对于这种Device属性，会有很多特殊的要求，比如保序要求会更高。 normal memory就是我们普通概念的内存，如DDR。 Cacheable 顾名思义，就是可缓存性。 如果一个事务访问的memory空间是可缓存的，这代表该段内存的数据在cache中也有，本次事务可以先去看看cache里面数据是否有效，如果能直接从cache中把数据读走，那就最好了。因此访问cache的速度是远快于访问内存的。 Allocate关于allocate，需要展开说说Read-Allocate/Write-Allocate它指示的是在访问cache以后发生的行为。 假定现在进行读事务，访问cache miss了，如果是Read through，即直接从内存中读取数据；如果是Read allocate，则需要先把数据读取到Cache中，再从Cache中读数据。 如果是写事务，则不太一样，需要分为hit和miss的情况，hit的时候看的是Write through还是Write back。miss的时候看是否Write allocate。 假定现在进行写事务，访问cache hit了，如果是Write through，就把数据同时写到Cache和内存中；如果是Write back，则先只把数据写到Cache中，等到释放这个cache的时候，才把修改后的内容刷新到内存中。 写事务访问cache miss了，如果是Write allocate，就先把要写的数据载入到Cache中，等到释放这个cache的时候，才把修改后的内容刷新到内存中。 一般，Write Allocate与Write Back一起使用，No Write Allocate与Write Through一起使用。 SnpAttr这个属性域段就比较简单，与snoop行为相关这个东西倒是在CHI中才有，CHI协议全称是Coherent Hub Interface。重点就在这个coherent一致性上，该协议用来确保Cache的一致性。而Snoop就是CHI实现一致性维护的机制，这里就不展开说明了。 这个域段就是用来描述本次事务是否会进行snoop。 汇总这个表中还讲了下order，这里的保序是CHI中使用的，就不进一步展开了。看这个表，前面的多种属性描述，最终会汇总为一个Memory type属性。 AXI相关属性描述AxCACHE在AXI总线协议中，主要是在AxCACHE这个域段中对事务的memory属性进行了定义。这边会简单一点，因为没有一致性维护的工作。保序机制也不是通过这个属性域段实现的。可以看到，这边最后也是汇总描述为memory type，可以对比看一下上面那个表，它是非常接近的， 所以说，ARM整个架构中，对于memory属性的描述是有一套非常丰富的机制的，如果要将各种协议融汇贯通使用起来，对memory 属性的深入理解应该是必不可少的。 ARM架构手册相关描述关于memory属性最全面的描述，那当然还是在ARM架构手册中在B2.7这一个章节中，对所有的memory 属性表述都进行了说明内容实在是太多了，本文讲不完，以后再针对性的进行学习。","categories":[{"name":"技术笔记","slug":"技术笔记","permalink":"https://rongyel.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"ARM","slug":"ARM","permalink":"https://rongyel.github.io/tags/ARM/"},{"name":"MMU","slug":"MMU","permalink":"https://rongyel.github.io/tags/MMU/"}],"author":"Rongye"},{"title":"MMU-TLB基础知识","slug":"思维殿堂/技术笔记/ARM/MMU-TLB基础知识","date":"2025-06-29T15:30:51.000Z","updated":"2025-02-16T06:52:43.000Z","comments":true,"path":"posts/e0051e00.html","permalink":"https://rongyel.github.io/posts/e0051e00.html","excerpt":"SMMU（System Memory Management Unit，系统内存管理单元）可以认为是 MMU 的衍生，在开始 SMMU 的协议学习之前，先掌握 MMU 的相关基础知识。","text":"参考文献最好的学习资料就是协议书，本文基于 ARM 官方的文档开展 MMU 的基础知识学习。MMU 学习：learn_the_architecture_-_aarch64_memory_management_101811_0102_00_en.pdfArm® 架构参考手册：DDI0487H_a_a-profile_architecture_reference_manual.pdf ‍ 基本概念虚拟地址（VA，Virtual Address）：处理器上运行的操作系统、应用程序所能看到的地址空间。虚拟地址并不真实存在于计算机中。 物理地址（PA，Physical Address）：实际存储地址空间，如 DDR、Flash、SRAM 等实际存储数据的地方。 在处理器运行的过程中，需要将虚拟地址空间与物理地址空间进行转换，并对内存访问进行保护，即内存管理的主要工作。 虚拟地址通过映射转换为物理地址。虚拟地址和物理地址之间的映射存储在转换表（有时称为页表）。 使用虚拟地址的好处 使用虚拟地址的一个好处是，操作系统可以将零碎的物理地址空间拼接成连续的虚拟空间，供应用程序使用。连续的空间对于应用的运行而言当然是有好处的。 虚拟地址也有利于软件开发人员，他们在编写应用程序时不会也不需要知道系统的确切内存地址，由操作系统和硬件共同执行地址转换。 在实践中，每个应用程序都可以使用自己的一组虚拟地址，这些地址将映射到物理系统中的不同位置。当操作系统在不同的应用程序之间切换时，它会重新编程映射。 MMU 内存管理单元内存管理单元 Memory Management Unit (MMU) ， 负责将软件使用的虚拟地址转换为内存系统中使用的物理地址。 主要组成包含以下内容： table walk unit 单元，它包含从内存中读取转换表的逻辑。 Translation Lookaside Buffers (TLBs) ，用于缓存最近使用的转换内容。 软件发出的所有内存地址都是虚拟的。这些内存地址被传递到 MMU，MMU 会检查 TLB 中是否有最近使用的缓存转换。如果 MMU 找不到最近缓存的转换，则 table walk unit 将从内存中读取相应的 Table entry 表条目，如下所示： Table entry 表条目转换表的工作原理是将虚拟地址空间划分为大小相等的块，并在表中为每个块提供一个 Table entry 表条目。 表中的条目 entry 0 提供 page 0 的映射，entry 1 提供 page 1 的映射，依此类推。每个条目都包含相应物理内存块的地址以及访问物理地址时要使用的属性。 Table lookup 表查找进行转换时，将进行表查找。当转换发生时，软件发出的虚拟地址被一分为二，如下图所示： 该图所展示的是一个单级表查找示例。 下方软件的虚拟地址分为两截： upper-order bits 高位 bits 会告知，这是哪一个条目。基于该信息可以在 Translation Table 转换表中找到对应的 PA base 物理基地址以及内存属性。 lower-order bits 低位保有块偏移量信息，该信息并且不会因地址转换而发生任何改变。 最后将转换表中获得的物理基地址以及最开始就知晓的块偏移量相结合，得到最后的一个物理地址。 除了上述的单级查表之外，还有多级查表的形式（通常为 2 级）。第一个表（level 1 ）将虚拟地址空间划分为大块。此表中的每个条目都可以指向大小相等的物理内存块，也可以指向另一个将该块细分为更小块的表。我们将这种类型的表称为“多级表”。在这里，我们可以看到一个具有三个级别的多级表的示例： 在 Armv8-A 架构中，最大级别数为 4，级别编号为 0 到 3。这种多级方法允许描述较大的块和较小的块。大块和小块的特征如下： 与小块相比，大块需要转换的读取级别更少。此外，大块在 TLB 中缓存的效率更高。 小块使软件能够对内存分配进行精细控制。但是，小块在 TLB 中缓存的效率较低，因为小块需要多次读取关卡才能转换。 为了管理这种权衡，操作系统必须在使用大块映射的效率与使用小块映射的灵活性之间取得平衡，以获得最佳性能。 TLBTLB就是一个cache，俗称快表。 简单来讲，上面说了 MMU 会通过查表的方式将虚拟地址 VA 转化为物理地址 PA。但查表是要花时间的。一般来讲这个表是放在内存里，读内存是有比较大的代价的。 对于 CPU，通过给他添加 cache 来加快访问数据的速度。 Cache 存在的意义：根据局部性原理，对于当前访问的存储位置，接下来，它很可能会被多次访问（时间局部性），它的相邻位置也可能会被访问（空间局部性）。由于访问内存的速度远大于访问寄存器，所以在二者之间设置 cache，来暂存一部分指令或数据。 那么对于 MMU，TLB 就是它的 cache，用来加快查表的速度。 MMU 首先查询 TLB，发现有（hit），直接得到物理地址，在内存根据物理地址取数据。如果 TLB 没有这个虚拟地址（miss），那么就只能费力的通过页表来查找了。这个流程跟 cache 其实是一模一样的，当然，因为它本质就是一个 cache。 Address spaces 地址空间空间结构AArch64 中有几个独立的虚拟地址空间。下图显示了以下虚拟地址空间： 下图显示了三个虚拟地址空间： NS(Non-secure，不安全的) EL0 和 EL1。 NS.EL2。 EL3. EL，Exception levels 异常级别。 ELn 中，随着 n 的增加，软件的执行权限也相应的增加；EL0 被称为无特权执行；EL2 提供了对虚拟化的支持EL3 提供了安全状态切换功能（安全状态与非安装状态之间的切换） 由于存在多个虚拟地址空间，因此指定地址所在的地址空间非常重要。例如，NS。EL2：0x8000 是指非安全 EL2 虚拟地址空间中的地址 0x8000。 该图还显示，来自 NS.EL0 和 NS.EL1 的虚拟地址经过两组表（图中的 stage1 和 stage2）。这些表支持虚拟化，并允许 hypervisor 来管理虚拟机 （VM） 看到的物理地址空间。 在虚拟化中，我们将由操作系统控制的一组翻译称为第 1 阶段。阶段 1 表将虚拟地址转换为中间物理地址 （IPA）。在第 1 阶段，操作系统认为 IPA 是物理地址空间。但是，虚拟机管理程序控制第二组翻译，我们称之为阶段 2。第二组转换将 IPA 转换为物理地址。下图显示了两组翻译的工作原理： 官方文档这里的表述可能有点绕，补充一点个人理解： 之前我们讨论的是，操作系统或者应用程序的虚拟地址 VA 转换为物理地址 PA 对吧。 那么，如果此时还存在一个虚拟机（虚拟机可以理解为一种应用程序，该应用程序模拟了一台计算机），那么虚拟机这么一台计算机，是不是也会拥有一个“虚拟机的物理地址”，这就是中间物理地址 IPA。在虚拟机运行的应用程序，将“虚拟机的虚拟地址”转化为“虚拟机的物理地址”，这个“虚拟机的物理地址”，还需要再转化为“实体机的物理地址”，即 VA-&gt;IPA-&gt;PA 整个流程的意思。 空间大小 EL0/EL1 虚拟地址空间有两个区域：内核空间和应用程序空间。这两个区域显示在关系图的左侧，内核空间位于顶部，应用程序空间（标记为“用户空间”）位于地址空间的底部。内核空间和用户空间具有单独的转换表，这意味着它们的映射可以保持独立。 独立很重要，独立表明这两个东西不会相互影响。简单来说，当应用程序出现重大错误的时候，不会影响内核系统的运行，系统不会受到太大的影响。 空间标识符现代操作系统的应用程序似乎都从同一地址区域运行，这就是我们所描述的用户空间。在实践中，不同的应用程序需要不同的映射。这意味着，例如，VA 0x8000 的转换取决于当前正在运行的应用程序。 理想情况下，我们希望不同应用程序在TLB 中共存，在 Armv8-A 中，通过地址空间标识符 （ASID）来进行管理。 对于 EL0/EL1 虚拟地址空间，可以使用转换表条目的属性字段中的 nG 位将转换标记为全局 （G） 或非全局 （nG）。例如，内核映射是全局转换，而应用程序映射是非全局转换。全局翻译适用于当前正在运行的任何应用程序。非全局翻译仅适用于特定应用程序。 非全局映射在 TLB 中用 ASID 进行标记。在 TLB 查找中，会将 TLB 条目中的 ASID 与当前选定的 ASID 进行比较。如果它们不匹配，则不使用 TLB 条目。下图显示了内核空间中没有 ASID 标记的全局映射和用户空间中具有 ASID 标记的非全局映射： 小结本文仅仅是简要介绍了 MMU 和 TLB，对 MMU 的意义、组成有一定的了解就好。接下来再阅读 ARM 的架构书，补充一些 MMU 具体的内容。","categories":[{"name":"技术笔记","slug":"技术笔记","permalink":"https://rongyel.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"ARM","slug":"ARM","permalink":"https://rongyel.github.io/tags/ARM/"},{"name":"MMU","slug":"MMU","permalink":"https://rongyel.github.io/tags/MMU/"},{"name":"内存管理","slug":"内存管理","permalink":"https://rongyel.github.io/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"}],"author":"Rongye"},{"title":"对Stage1页表属性attrindex理解","slug":"思维殿堂/技术笔记/ARM/对Stage1页表属性attrindex理解","date":"2025-06-29T15:30:51.000Z","updated":"2025-02-16T06:52:36.000Z","comments":true,"path":"posts/d429f5fd.html","permalink":"https://rongyel.github.io/posts/d429f5fd.html","excerpt":"stage1的页表最低位属性用的是AttrIndex，而在stage2的页表属性用的是MemAttr。这样设计的原因可能是为了减少无效化操作。","text":"在看ARM VMSAv8的时候，注意到一个有意思的地方。最后获取到page或者block的时候，属性域段中，stage1的页表最低位属性用的是AttrIndex，而在stage2的页表属性用的是MemAttr 这两者主要是什么区别呢，也不是很难理解，像下面这个，4bit的MenAttr直接就表示memory类型，高2bit用来区分Device和normal memory的类型。低2bit用来具体细分是什么device或normal memory类型。 这里就不展开讲了。 重点是上面的stage1 页表，attrindex的使用，它并不是单独就能表示属性的这个index索引，指的是对MAIR（Memory Attribute Indirection Register）这个寄存器内部进行索引。MAIR根据不同异常级别有好几个，但其实内部都是一样的，从图上就可以看出，一个64bit的MAIR寄存器中有8个Attr，每8bit为一个Attr。至于这8bit是如何进一步表示属性的，这里也不展开说了，具体可以看架构手册D13.2.97 通过stage1 page中的attrindex属性域段，加上MAIR寄存器中配置的Attr，才能够表示一个地址空间的属性。这样可以理解，但重点在于为什么要这样做。 减少无效化操作，就是这种设计的核心意义。 如果想要改变属性，就需要改页表的话，修改页表后必须发出无效化命令到各个tlb中进行无效化，而进行无效化的代价其实是很大的。那为了减少无效化操作，就尽可能不要修改页表， 这里使用attrindex，索引寄存器中配置的属性信息，这意味着如果想要修改属性，仅仅需要修改寄存器值就好了，软件修改寄存器的代价那就比较小了。 至于为什么只有stage1 的页表是这样设计的，还没想太明白。可能终究这样也是需要付出寄存器的代价的，而stage2翻译（虚拟化，IPA-&gt;PA）的需求比较小，所以就直接把MemAttr放到页表的属性域段中吧。","categories":[{"name":"技术笔记","slug":"技术笔记","permalink":"https://rongyel.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"ARM","slug":"ARM","permalink":"https://rongyel.github.io/tags/ARM/"},{"name":"内存管理","slug":"内存管理","permalink":"https://rongyel.github.io/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"}],"author":"Rongye"},{"title":"什么叫RAS中断","slug":"思维殿堂/技术笔记/ARM/什么叫RAS中断","date":"2025-06-29T15:30:51.000Z","updated":"2025-02-16T06:52:38.000Z","comments":true,"path":"posts/4b0c4420.html","permalink":"https://rongyel.github.io/posts/4b0c4420.html","excerpt":"ras中断是什么，听的很多但也不太清楚什么中断才能叫做ras中断。","text":"参考文献RAS简介 - 知乎4.11. Reliability, Availability, and Serviceability (RAS) Extensions — Trusted Firmware-A documentation RAS全称为 Reliability, Availability，Serviceability。 Reliability（可靠性）指的是系统必须尽可能的可靠，不会意外的崩溃，重启甚至导致系统物理损坏，这意味着一个具有可靠性的系统必须能够对于某些小的错误能够做到自修复，对于无法自修复的错误也尽可能进行隔离，保障系统其余部分正常运转。 Availability（可用性）指的是系统必须能够确保尽可能长时间工作而不下线，即使系统出现一些小的问题也不会影响整个系统的正常运行，在某些情况下甚至可以进行 Hot Plug 的操作，替换有问题的组件，从而严格的确保系统的宕机时间在一定范围内。 Serviceability （可服务性）指的是系统能够提供便利的诊断功能，如系统日志，动态检测等手段方便管理人员进行系统诊断和维护操作，从而及早的发现错误并且修复错误。 RAS中断搜不到太多相关的资料，不过基于上述基本内容可以大致理解。ras中断就是，让系统比较可靠，的中断信号。常见的ras中断有： 这些中断是保证系统稳定运行的必要中断，保证系统不会出现重大错误的中断，大致就这么理解吧。 具体，应该由实现方案决定。","categories":[{"name":"技术笔记","slug":"技术笔记","permalink":"https://rongyel.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"ARM","slug":"ARM","permalink":"https://rongyel.github.io/tags/ARM/"},{"name":"中断","slug":"中断","permalink":"https://rongyel.github.io/tags/%E4%B8%AD%E6%96%AD/"}],"author":"Rongye"},{"title":"对ARM access flag和dirty state机制理解","slug":"思维殿堂/技术笔记/ARM/对ARM access flag和dirty state机制理解","date":"2025-06-29T15:30:51.000Z","updated":"2025-02-16T06:52:34.000Z","comments":true,"path":"posts/a6a87a63.html","permalink":"https://rongyel.github.io/posts/a6a87a63.html","excerpt":"ARM的access flag和dirty state机制用于进行页表的维护，经过一段时间的思考，现在总算是理清楚了。","text":"参考文献官方ARM 架构手册：Arm Architecture Reference Manual for A-profile architectureH.a版本从D5.4.7小结开始 The Access flagARM的access flag和dirty state机制用于进行页表的维护，其中的Access flag其实挺好理解的，就是最后的Page中有个AF域段，如果是0，在被访问以后就更新为1。但dirty state我一直理解都不太好，Page中只有一个DBM（Dirty Bit Modifier）域段，这个域段的是怎样用的，一直没看明白。 经过一段时间的思考，现在总算是理清楚了。Access flag指示内存页是否被访问过。AF域段被设置为0后，首次被访问时会被修改为1。 The dirty statedirty state指示是否修改了内存页或内存段。dirty state可以由硬件管理，如 D5-4863 页HTTU所述dirty state信息使用访问权限位 AP[2] 和 S2AP[1] 以及 DBM 位进行编码。 Page的域段这里补充一下AF、AP、S2AP、DBM这几个域段的概念。在page的属性域段中， AF就是access flag AP是访问权限 S2AP和AP是一样的只是S2AP是stage2翻译的时候获得页的域段。stage2翻译就是IPA-&gt;PA的翻译阶段，这里不过多展开描述。 DBM Dirty修改位这个东西看起来很抽象，后面再展开表述它的使用 软件管理Access flagArmv8.0 要求软件管理访问标志。这意味着，每当尝试将访问标志的值为 0 的转换表描述符条目读入 TLB 时，都会生成访问标志错误。访问标志机制期望，当发生访问标志错误时，软件会在导致故障的转换表条目中将访问标志重置为 1。这可以防止下次访问内存位置时发生故障。访问标志设置为 0 的条目永远不会保留在 TLB 中，这意味着软件在设置标志后不必从 TLB 刷新条目。 这里稍微表述了一下，ARM V8.0是只支持通过软件来管理access flag的。当访问到AF为0的页时，就会产生一个fault错误告诉软件，软件去修改Page的AF为1，然后再次访问就正常了。显然，这里上报fault，软件再去改写AF，其实是要耗费软件的精力的。这就很麻烦。 硬件管理Access flag 和Dirty state从ARM V8.1开始，支持硬件管理了，也就是HTTU(Hardware Translation Table Update)。 简单来说，就是硬件可以直接去修改AF域段，这里的硬件指的应该是MMU/SMMU，在PTW获取最后一级Page的时候，如果发现AF是0，那就直接自己完成读写原子操作，将page的AF改为1，而无需上报Fault给软件。 而Dirty state的维护就体现的比较拐弯抹角了。它是同时使用DBM、AP/S2AP这一组域段来表示是否为Dirty的。 首先，软件会把页的访问权限设置为“不可写”。这里的“不可写”其实区分为“真的不可写”和“为了判断dirty state，暂时不可写”两种情况。这两种情况体现在DBM这个域段上：如果为0，那就是“真的不可写”如果为1，那就是“为了判断dirty state，暂时不可写” 如果DBM为0，那硬件在想要修改AF的时候，会发生权限错误，然后上报fault给软件。如果DBM为1，那硬件就知道，其实这个是可以写的，直接就将权限AP/S2AP修改为可写的状态。而权限从不可写变为可写这件事情，就表明该页是Dirty的了。","categories":[{"name":"技术笔记","slug":"技术笔记","permalink":"https://rongyel.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"ARM","slug":"ARM","permalink":"https://rongyel.github.io/tags/ARM/"},{"name":"页表","slug":"页表","permalink":"https://rongyel.github.io/tags/%E9%A1%B5%E8%A1%A8/"}],"author":"Rongye"},{"title":"当前ARM只有64KB粒度页表支持52bit","slug":"思维殿堂/技术笔记/ARM/当前ARM只有64KB粒度页表支持52bit","date":"2025-06-29T15:30:51.000Z","updated":"2025-02-16T06:52:32.000Z","comments":true,"path":"posts/115c5add.html","permalink":"https://rongyel.github.io/posts/115c5add.html","excerpt":"ARMv8.2架构支持到52bit了，但仅有64KB粒度的页表才支持ARMv9架构则4k和16k翻译粒度也支持52bit，这里简单理解一下。","text":"ARMv8.2架构支持到52bit了，但仅有64KB粒度的页表才支持ARMv9架构则4k和16k翻译粒度也支持52bit，这里简单理解一下。 参考文献技术|理解 ARM64 内核中对 52 位虚拟地址的支持Linux内存管理：虚拟地址空间 - 知乎ARM-translation table walk_赵不胖的博客-CSDN博客为什么64位机指针只用48个位？ - 知乎 为什么64位的架构，并没有支持64位的地址空间？实现如此巨大的地址宽度只会增加系统的复杂度和地址转换的成本，带不来任何好处。AMD因此决定，在对这一架构的首次实现中，只有虚拟地址的最低48位才会在地址转换（页表查询）时被使用。 一个表示虚拟内存地址的64位指针只有低48位有效并带符号扩展到64位——换句话说，其高16位必须是全1或全0，而且必须与低48位的最高位（第47位）一致，否则通过该地址访问内存会产生#GP异常（general-protection exception） 不考虑大页的情况下，每一级4K大小的页表可以保存512项（每项8字节，64位，4096/8=512），对于一个48位地址来说，低4K地址（12位）是页内偏移，之后每多一级页表，地址范围增加9位，所以可以得到下面的规律：一级页表：9+12=21位地址，最大地址2MB二级页表：9+9+12=30位地址，最大地址1GB三级页表：9+9+9+12=39位地址，最大地址512GB四级页表：9+9+9+9+12=48位地址，最大地址256TB五级页表：9+9+9+9+9+12=57位地址，最大地址128PB六级页表：9+9+9+9+9+9+12=66位地址，超过64位，最大地址128EB 为啥是 9 bit 一级？4KB/8B = 0.5K = 9 bit ARMv8.2 架构的 LVA 和 LPA 拓展ARMv8.2 架构提供两种重要的拓展：大虚拟寻址（LVA）和大物理寻址（LPA）。 当使用 64 KB 转换粒度时，ARMv8.2-LVA 为每个翻译表基地址寄存器提供了一个更大的 52 位虚拟地址空间。 当使用 64 KB 转换粒度时，中间物理地址（IPA）和物理地址空间拓展为 52 位。 如果使用 64 KB 转换粒度来实现对 52 位物理地址的支持，那么一级块将会覆盖 4TB 的地址空间。 需要注意的是这些特性仅在 AArch64 架构中支持。 伴随着 ARMv8.2 拓展增加了对 LVA 地址的支持（仅当以页大小为 64 KB 运行时可用），在第一级转换中，描述符的数量会增加。 ARMv9 架构的 LVA2 和 LPA2 拓展这里需要看最新的ARM架构手册，可以看到，现在进一步增加对4K和16K翻译粒度的52bit地址空间支持。","categories":[{"name":"技术笔记","slug":"技术笔记","permalink":"https://rongyel.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"ARM","slug":"ARM","permalink":"https://rongyel.github.io/tags/ARM/"},{"name":"内存管理","slug":"内存管理","permalink":"https://rongyel.github.io/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"}],"author":"Rongye"},{"title":"什么是CRC校验","slug":"思维殿堂/技术笔记/ASIC/什么是CRC校验","date":"2025-06-29T15:30:51.000Z","updated":"2025-03-04T15:05:49.000Z","comments":true,"path":"posts/ffadf7ba.html","permalink":"https://rongyel.github.io/posts/ffadf7ba.html","excerpt":"CRC校验（Cyclic Redundancy Check，循环冗余校验）是一种广泛应用于数字通信和数据存储领域的错误检测技术，用于验证数据在传输或存储过程中是否发生错误（如比特翻转、数据丢失等）。","text":"基本概念我们知道，数据在传输过程中可能会因为传输介质故障或外界的干扰而产生比特差错（使原来的0变为1，原来的1变为0），从而导致接收方接收到错误的数据。为尽量提高接收方收到数据的正确率，在接收数据之前需要对数据进行差错检测，仅当检测的结果为正确时才接收数据。 差错检测的方式有多种，常见的有奇偶校验、求和校验、CRC校验等。他们的工作原理都是发送端对数据按照某种算法计算出来校验码，将校验码和数据一起发送到接收端，然后接收端进行检验确定数据是否发生变化。 CRC是由W. Wesley Peterson在1961年发表的论文中提出，由于CRC校验在速度、成本、正确率等方面比其他校验方式更具有优势，因此，CRC成为计算机信息、通信领域最为普遍的校验方式。例如在标准的以太帧格式中，最后有4个字节长度的冗余位，用于存储CRC校验的值，这个冗余位又常称为帧检验序列FCS（Frame Check Sequence）。 核心原理CRC的思想就是先在要发送的K比特长度的数据后面附加一个R比特长度的校验码，然后生成一个新帧发送给接收端。接收端接收到新帧后，根据收到的数据和校验码来验证接收到的数据是否正确。 多项式除法：要使所生成的新帧能与发送端和接收端共同选定的某个特定数整除（“模2除法”）。接收端把接收到的新帧除以这个选定的除数。因为在发送数据帧之前就已通过附加一个数，做了“去余”处理（也就已经能整除了），所以结果应该是没有余数。如果有余数，则表明该帧在传输过程中出现了差错。 将待传输的原始数据视为一个二进制数（例如 101001）。选择一个预定义的生成多项式（如 x³ + x + 1，对应二进制 1011）。通过多项式除法，计算原始数据与生成多项式的余数，该余数即为CRC校验码。 附加校验码：将计算出的CRC校验码附加到原始数据末尾，形成完整的传输数据。 接收端验证：接收方用相同的生成多项式对接收到的数据（含CRC码）再次计算余数。若余数为零，则数据正确；否则判定为传输错误。 示例CRC-4-ITU（生成多项式&nbsp;x⁴ + x + 1） 原始数据：1101 0110 生成多项式：10011（对应&nbsp;x⁴ + x + 1） 计算步骤： 在原始数据后补4个零（生成多项式最高次为4）：1101 0110 0000 用生成多项式进行模2除法，得到余数&nbsp;1110 最终传输数据：1101 0110 1110可检测所有单比特错误、双比特错误、奇数个错误，及大多数突发错误（取决于生成多项式）。 总结CRC校验通过多项式除法生成冗余校验码，以极低的计算成本实现高可靠性的错误检测，是数字系统中保障数据完整性的基础技术。其性能取决于生成多项式的选择（如CRC-8、CRC-16、CRC-32等不同标准）。 参考文献什么是CRC（Cyclic Redundancy Check）？如何解决CRC错误？ - 华为 ↩","categories":[{"name":"技术笔记","slug":"技术笔记","permalink":"https://rongyel.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://rongyel.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"功能安全","slug":"功能安全","permalink":"https://rongyel.github.io/tags/%E5%8A%9F%E8%83%BD%E5%AE%89%E5%85%A8/"}]},{"title":"虚拟内存的意义","slug":"思维殿堂/技术笔记/ARM/虚拟内存的意义","date":"2025-06-29T15:30:51.000Z","updated":"2025-02-16T06:52:39.000Z","comments":true,"path":"posts/ada5d828.html","permalink":"https://rongyel.github.io/posts/ada5d828.html","excerpt":"为什么要建立“虚拟“内存来欺骗软件？","text":"为什么要建立“虚拟“内存来欺骗软件？ 有时候在想，现代存储空间越来越大，是不是全部都用物理内存就行了？ 基本概念 虚拟地址（VA，Virtual Address）：处理器上运行的操作系统、应用程序所能看到的地址空间。虚拟地址并不真实存在于计算机中。 物理地址（PA，Physical Address）：实际存储地址空间，如 DDR、Flash、SRAM 等实际存储数据的地方。 在处理器运行的过程中，需要将虚拟地址空间与物理地址空间进行转换，并对内存访问进行保护，即内存管理的主要工作。 虚拟地址通过映射转换为物理地址。虚拟地址和物理地址之间的映射存储在转换表（有时称为页表）。 “虚拟”的主要意义 地址连续性程序都可以在连续的虚拟内存空间中运行，而实际的物理内存空间可以是不连续的。 地址扩展性有了虚拟内存，程序在概念上可以使用比物理上可用的更多的内存。例如，即使物理内存只有4GB，虚拟地址宽度也可以超过32位。可以使用整个硬盘扩展存储空间。 安全隔离由于内存隔离，虚拟内存还增加了安全性。在地址转换期间可访问性被检查。如果程序试图写入一个仅赋予只读权限的内存地址，则写入访问将被阻止，并发出错误信号。如果程序试图访问不属于它的内存地址，访问也将被阻止。","categories":[{"name":"技术笔记","slug":"技术笔记","permalink":"https://rongyel.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"ARM","slug":"ARM","permalink":"https://rongyel.github.io/tags/ARM/"},{"name":"内存管理","slug":"内存管理","permalink":"https://rongyel.github.io/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"}],"author":"Rongye"},{"title":"CHI flitpend是干嘛的","slug":"思维殿堂/技术笔记/CHI/CHI flitpend是干嘛的","date":"2025-06-29T15:30:51.000Z","updated":"2025-08-15T15:41:42.737Z","comments":true,"path":"posts/b6eda8db.html","permalink":"https://rongyel.github.io/posts/b6eda8db.html","excerpt":"定位一个挂死问题，追波形追了一个下午，最后发现是这个FLITPEND导致的……","text":"参考文献ARM官方手册：AMBA 5 CHI Architecture Specification&nbsp;CHI协议链路层 - 知乎 FLITPEND协议描述CHI协议链路层的一个信号 之前看协议的时候有点忽略了这个东西 这个PEND信号是什么含义，可能字面上不太好理解。 它其实就是个时钟门控信号 FLITPEND信号预测接下来会有一笔有效的flit传输。 可以用来开启时钟 正常来讲，FLITPEND需要比FLITV快一个时钟， 也就是在FLITPEND有效的下一拍发来数据， 所以该信号就是一笔预测信号，帮助SLV开启时钟的。 问题记录这次定位问题就是在这个地方， 使用了pend，但是发过来的pend不准。 本来FLITPEND需要比FLITV早一拍到， 但可能由于multicycle的原因，导致慢了一点点， FLITPEND没有在早一拍的时钟上升沿到达， FLITPEND和FLITV同拍了， 这会导致时钟门控打开的晚了， 从时序图可以看到， FLITV和FLIT才是应该同拍的信号， 时钟门控打开的晚了， 导致在某个模块中，同拍输入FLITV和FLIT， 在下一个时钟变成了错拍的情况： FLITV过了一拍，FLIT过了一拍才输出。 FLITV和FLIT错拍了， 后续所有采集都会采错，就，导致系统挂死了。","categories":[{"name":"技术笔记","slug":"技术笔记","permalink":"https://rongyel.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"CHI","slug":"CHI","permalink":"https://rongyel.github.io/tags/CHI/"},{"name":"AMBA","slug":"AMBA","permalink":"https://rongyel.github.io/tags/AMBA/"},{"name":"知识分享","slug":"知识分享","permalink":"https://rongyel.github.io/tags/%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/"}]},{"title":"什么是Memory Repair","slug":"思维殿堂/技术笔记/ASIC/什么是Memory Repair","date":"2025-06-29T15:30:51.000Z","updated":"2025-04-27T14:57:40.000Z","comments":true,"path":"posts/c3914d5e.html","permalink":"https://rongyel.github.io/posts/c3914d5e.html","excerpt":"","text":"Repair的意义Memory占芯片大块的面积，如果出现坏的单元，直接算废片那也太浪费了。因此现在芯片为了追求良率，会在最开始设计的时候就加入repair的功能。本质就是增加冗余逻辑，以便在出现问题的时候可以用来替换掉坏的部分，就是一种面积换良率的方案。 Repair的形式常见的有Row repair、Column repair直观理解，就是整行、整列用redundancy逻辑替换掉。 Repair的类型通常分为Soft repair和Hard repair。此处引用：Tessent&nbsp;Memory&nbsp;Repair的介绍 hard reapir：memory的修复信息存储在fuse里面，启动时修复信息加载到要修复的memory中 soft repair：修复信息必须每次启动时，重新加载或者重新计算修复信息，如果修复信息存储在外部，可以使用BISR chain，或者重新执行redundancy analysi以及BIRA-BISR data transfer加载修复信息，使用soft repair会增加启动时间以及电路控制的复杂性，但优点是节省efuse的使用 MBIST、MBIRA和MBISRMemory BIST(Built-in Self-Test)是一种DFX技术，说白了就是在芯片中专门设计一段逻辑，用来检测Memory。通常会进行如下测试： March算法：遍历所有地址（如March C-检测 stuck-at/transition faults） Checkerboard测试：交替写入0/1检测相邻单元干扰 地址解码测试：验证地址线完整性 Memory BIRA(Built-in Redundancy-Analysis)就是一种冗余资源分析的机制，分析哪些资源可以修复发现的故障。 Memory BISR(Built-In Self-Repair)就是指上面讲到的自修复机制，通过预留冗余资源以实现修复。 Repair的流程 当然是先自检，即走MBIST流程，获取故障信息。可以是上电自检，也可以是周期性自检。 然后开始分析，BIRA来评估评估冗余资源余量以及修复方案。 分析完得到修复配置，可以通过efuse(electronic FUSE)来烧写。","categories":[{"name":"ASIC","slug":"ASIC","permalink":"https://rongyel.github.io/categories/ASIC/"}],"tags":[{"name":"数字IC","slug":"数字IC","permalink":"https://rongyel.github.io/tags/%E6%95%B0%E5%AD%97IC/"},{"name":"ASIC","slug":"ASIC","permalink":"https://rongyel.github.io/tags/ASIC/"},{"name":"Memory","slug":"Memory","permalink":"https://rongyel.github.io/tags/Memory/"}]},{"title":"CHI l-credit的使用关注点","slug":"思维殿堂/技术笔记/CHI/CHI l-credit的使用关注点","date":"2025-06-29T15:30:51.000Z","updated":"2025-02-16T06:52:55.000Z","comments":true,"path":"posts/418ca596.html","permalink":"https://rongyel.github.io/posts/418ca596.html","excerpt":"CHI协议的LINK层credit握手机制是个很有意思的东西，实际使用的时候有些需要关注的地方。","text":"握手差异CHI和AXI的一个很大不同，就在于握手机制。 AXI协议中使用的是valid-ready握手的方式， CHI协议中则设计了一套credit机制进行握手。 credit握手credit由rx发出，tx接收。tx每拥有一个credit，就可以向rx发送一笔数据，即一次flitv。rx每收到一个flitv，就再发出一个credit给tx。每个通道（REQ/SNP/RSP/DATA）都有独立的credit。 credit和valid-ready的一个最大区别，就在于：valid-ready握手是必须握完一个事务才能握下一个，credit握手则是，我可以一次性给你发很多个credit，你慢慢发事务。 给credit的含义就是，你可以发，而我必须接收，所以rx内的buffer深度必须大于等于credit数量，不然就会丢包。 接口流水两个节点之间，假定路径上有4拍延迟，那么需要4个credit，就可以保证流水。 如果flitv或者credit因为走线加拍，那么credit数量就需要对应增加。 当然，在4拍路径下，给6个credit，有2个credit的裕量，这肯定也是可以的，不会有功能问题，但存在面积代价。 由于多了2个credit，RX的buffer或者FIFO就必须对应增加2深。当数据位宽较大时，FIFO深度多了2深就算是比较明显的浪费了。","categories":[{"name":"技术笔记","slug":"技术笔记","permalink":"https://rongyel.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"ARM","slug":"ARM","permalink":"https://rongyel.github.io/tags/ARM/"},{"name":"CHI","slug":"CHI","permalink":"https://rongyel.github.io/tags/CHI/"}],"author":"Rongye"},{"title":"数字IC设计开发Gvim配置","slug":"思维殿堂/技术笔记/EDA/数字IC设计开发Gvim配置","date":"2025-06-29T15:30:51.000Z","updated":"2025-02-16T06:52:59.000Z","comments":true,"path":"posts/f60848c2.html","permalink":"https://rongyel.github.io/posts/f60848c2.html","excerpt":"记录自己使用的gvim配置文件，包含基础配置及插件功能配置。支持代码补全、代码片段、语法检查、自动例化等IC攻城狮必备coding功能。","text":"插件傻瓜包安装说明推荐使用git clone获取：GitHub - RongyeL/ryGvim: my gvim config and plugin将ryGvim目录下的.vim文件夹和.vimrc文件，移到用户根目录下，即可使用。 如果不会使用git，也可以直接在GitHub先下载zip，然后再拖到虚拟机中使用。windows也是可以用的，但是配置文件不一样，好像是_vimrc这样的文件，所以需要做一些调整。 仅支持Gvim 8.0以上版本，基于VIM 8 pack特性进行插件管理。不再需要gvim支持python环境。 以下插件，ale需要补充安装iverilog才能进行语法检查。ctags也需要另外安装如果是Ubuntu，跟我一样的版本。使用同样的阿里源。应该可以直接使用sudo apt install ctags 完成安装。 名称 功能 git clone链接 nerdtree 文件目录树 https://github.com/preservim/nerdtree.git nerdcommenter 快速注释 https://github.com/preservim/nerdcommenter.git vim-airline 状态栏美化 https://github.com/vim-airline/vim-airline.git vim-snippets 代码片段库 https://github.com/honza/vim-snippets.git vim-snipmate 代码片段展开 https://github.com/garbas/vim-snipmate.git vim-addon-mw-utils vim-snipmate依赖插件 https://github.com/MarcWeber/vim-addon-mw-utils.git tlib_vim vim-snipmate依赖插件 https://github.com/tomtom/tlib_vim.git vim-easy-align 代码对齐 https://github.com/junegunn/vim-easy-align.git neocomplcache 代码补全 https://github.com/Shougo/neocomplcache.vim.git auto-pairs 自动配对括号 https://github.com/jiangmiao/auto-pairs.git ale 语法检查 https://github.com/dense-analysis/ale.git gruvbox 色彩空间 https://github.com/morhetz/gruvbox.git indentLine 缩进标识 https://github.com/Yggdroot/indentLine.git vlog_inst_gen Verilog自动例化 https://github.com/vim-scripts/vlog_inst_gen.git ctags ctags模块标签 使用sudo apt install ctags 命令直接安装 官网：Exuberant Ctags 各插件使用说明nerdtree文件目录树配置信息 常用命令按F5展开/关闭目录树光标移动到需打开的文件，o：打开到当前窗口t：打开并新建标签页到当前窗口， nerdcommenter快速注释配置信息 常用命令,cc：注释,cu：取消注释,c&lt;空格&gt;：最常使用的操作，可以自动判断是注释还是取消注释,cA：注意是大写A，也就是shift+a，在行末添加注释 vim-airline状态栏美化就是下面的状态栏美化，没有做任何调整。 vim-snippets代码片段库在该路径下找到verilog的代码片段仓库，添加自己的代码块。如图，这里简单加了一个shixu的snippet。 vim-snipmate代码片段展开相关配置 常用命令如上，在vim-snippets代码片段库中添加了一个shixu的代码在输入shixu后，按tab即可展开该代码片段。 vim-easy-align代码对齐相关配置 常用命令比较简单的对齐插件，一般依据“空格”、“逗号，”“等号=”来完成代码对齐选中对齐的代码后，输入ga+“对齐依据”建议不要全选代码对齐，效果不好。小范围对齐即可。如下，先根据“=”进行对齐，再根据“，”进行对齐。自己再手动调整一下就好。 neocomplcache代码补全相关配置 常用命令此处的代码补全和上面的代码片段不是一个含义。这里的补全，会根据缓存信息，判断你需要输入的内容是什么。除了代码外，路径之类的也是可以补全的。输入部分内容，会自动展开补全列表，ctrl+n下移，回车确定补全。 auto-pairs自动配对括号输入括号时自动成对出现。 ale语法检查相关配置注意，需要补充安装iverilog才能使用Ubuntu下可以直接用命令安装，centos可能需要下载源文件安装。除了iverilog，还有其他语法工具可以使用，详见插件github。 gruvbox色彩空间自己调整过的色彩方案，如果想自己搞可以看看我之前的视频。没啥用的小技巧 - Gvim自定义色彩方案_哔哩哔哩_bilibili建议不要花太多时间，看的顺眼就行。 indentLine缩进标识比较容易判断缩进情况，以4个空格为一个缩进单位。 vlog_inst_genVerilog自动例化相关配置 常用命令,ig，生成当前文件的例化文件，会自动存储到剪贴板中。按esc退出冒出的信息，在需要例化的地方粘贴代码 ctags模块标签相关配置该功能其实不是一个插件，需自行安装ctags，Ubuntu下可以命令直接安装sudo apt install ctags 常用命令gi：进入光标所在未知的模块端口go：退出到上一级模块 .vimrc配置文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189\"-----------------------------------------------------------------------------\" basic configuration \"-----------------------------------------------------------------------------syntax on \" syntax highlightfiletype plugin indent on \" plugins and indentation based on file type set hlsearch \" search highlightset ignorecase \" ignore search caseset cuc \" current column highlightset cul \" current line highlightset nu \" show line numberset fileencoding=utf-8 \"prevent garbled charactersset fenc=utf-8set fencs=utf-8,usc-bom,euc-jp,gb18030,gbk,gb2312,cp936,big－5 set enc=utf-8source $VIMRUNTIME/delmenu.vimsource $VIMRUNTIME/menu.vimlet &amp;termencoding=&amp;encodingset guifont=Monospace\\ 12 \" set font set tabstop=4 \" set tab to 4 spacesset expandtabset shiftwidth=4 \"set auto-indent to 4 spacesset softtabstop=4 \" set the back key to delete 4 spacesset ruler \" set show rulerset smartindent \" set smart auto-indentset showcmd \" show commandset autochdir \" auto-swith working directorywinpos 235 235 \" set windows position set lines=40 columns=108 \" set windows size set nocompatible \" remove vi consistency\"-----------------------------------------------------------------------------\" customize shortcut keys \"-----------------------------------------------------------------------------imap ii &lt;ESC&gt;nmap ww :w&lt;CR&gt;nmap qq :q&lt;CR&gt; nmap fd * let mapleader = \",\"\"-----------------------------------------------------------------------------\" plugin: NERDTree\"-----------------------------------------------------------------------------map &lt;leader&gt;ne :NERDTreeToggle&lt;CR&gt;let g:NERDTreeWinSize = 25 \" set nerdtree sizelet NERDTreeIgnore=['\\.pyc','\\~$','\\.swp'] \" ignore the display of the following fileslet NERDTreeShowHidden=1 \" show hidden fileslet g:NERDTreeDirArrowExpandable = '▸' \" modify the default arrow symbollet g:NERDTreeDirArrowCollapsible = '▾'autocmd bufenter * if (winnr(\"$\") == 1 &amp;&amp; exists(\"b:NERDTree\") &amp;&amp; b:NERDTree.isTabTree()) | q | endif\" nerdtree hot key mappingmap &lt;F5&gt; :NERDTreeMirror&lt;CR&gt;map &lt;F5&gt; :NERDTreeToggle&lt;CR&gt;map &lt;leader&gt;f :NERDTreeFind&lt;CR&gt;\"-----------------------------------------------------------------------------\" plugin: airline\"-----------------------------------------------------------------------------let g:airline_theme='base16_gruvbox_dark_hard'\"-----------------------------------------------------------------------------\" plugin: indentline\"-----------------------------------------------------------------------------let g:indentLine_enable = 1let g:autopep8_disable_show_diff=1let g:indentLine_char_list = ['|', '¦', '┆', '┊']\"-----------------------------------------------------------------------------\" plugin: easyalign\"-----------------------------------------------------------------------------\" Start interactive EasyAlign in visual mode (e.g. vipga)xmap ga &lt;Plug&gt;(EasyAlign)\" Start interactive EasyAlign for a motion/text object (e.g. gaip)nmap ga &lt;Plug&gt;(EasyAlign)\"-----------------------------------------------------------------------------\" plugin: neocomplcache\"-----------------------------------------------------------------------------let g:neocomplcache_enable_at_startup = 1 \" auto start neocomplcache let g:neocomplcache_enable_auto_select = 1 \" auto select the first item in the listlet g:neocomplcache_min_syntax_length = 2 \" Set minimum syntax keyword length.let g:neocomplcache_lock_buffer_name_pattern = '\\*ku\\*'\" inoremap &lt;expr&gt;&lt;CR&gt; neocomplcache#smart_close_popup() . \"\\&lt;CR&gt;\"inoremap &lt;expr&gt;&lt;C-Y&gt; neocomplcache#close_popup()inoremap &lt;expr&gt;&lt;space&gt; neocomplcache#undo_completion()inoremap &lt;expr&gt;&lt;Enter&gt; pumvisible() ? \"\\&lt;C-Y&gt;\" : \"\\&lt;Enter&gt;\" \"-----------------------------------------------------------------------------\" plugin: gruvbox\"-----------------------------------------------------------------------------set bg=darkcolorscheme gruvbox\"-----------------------------------------------------------------------------\" plugin: nerdcommender\"-----------------------------------------------------------------------------\" my key: ,cl /,cc /,cu /,c&lt;space&gt;let g:NERDSpaceDelims = 1 \" add space after comment\"-----------------------------------------------------------------------------\" plugin: ale\"-----------------------------------------------------------------------------\"keep the sign gutter openlet g:ale_sign_column_always = 1let g:ale_sign_error = '&gt;&gt;'let g:ale_sign_warning = '--'\" show errors or warnings in my statuslinelet g:airline#extensions#ale#enabled = 1 \" use quickfix list instead of the loclistlet g:ale_set_loclist = 0let g:ale_set_quickfix = 1\" only enable these linterslet g:ale_linters = {\\ 'verilog': ['iverilog']\\}nmap &lt;silent&gt; &lt;C-k&gt; &lt;Plug&gt;(ale_previous_wrap)nmap &lt;silent&gt; &lt;C-J&gt; &lt;Plug&gt;(ale_next_wrap)\"-----------------------------------------------------------------------------\" plugin: ctags\"-----------------------------------------------------------------------------nmap gi &lt;C-]&gt; \" go into instance module or output port nmap go &lt;C-o&gt; \" go out to upper stage \"-----------------------------------------------------------------------------\" plugin: vlogInst\"-----------------------------------------------------------------------------so ~/.vim/pack/default/start/vlog_inst_gen/vlog_inst_gen.vim \" set path\" key: (,ig)\"-----------------------------------------------------------------------------\" plugin: snipmate\"-----------------------------------------------------------------------------imap &lt;tab&gt; &lt;Plug&gt;snipMateTrigger \" tab expand code snippetsimap &lt;tab&gt; &lt;Plug&gt;snipMateNextOrTriggerimap &lt;C-tab&gt; &lt;Plug&gt;snipMateShow \" tab expand code snippets list\"-----------------------------------------------------------------------------\" auto add file header when create new file\"-----------------------------------------------------------------------------autocmd BufNewFile *.v,*.sv,*.cpp,*.c,*.h exec \":call AddHeader()\"autocmd BufWrite *.v call UpdateLastModifyTime()function s:GetUserName() let user_name = \"Rongye\" return user_nameendfunction function AddHeader() let line = getline(1) let filename = expand(\"%\") call append(0, \"// +FHDR----------------------------------------------------------------------------\") call append(1, \"// Copyright (c) \".strftime(\"%Y \") ) call append(2, \"// ALL RIGHTS RESERVED\") call append(3, \"// ---------------------------------------------------------------------------------\") call append(4, \"// Filename : \".filename) call append(5, \"// Author : \".s:GetUserName()) call append(6, \"// Created On : \".strftime(\"%Y-%m-%d %H:%M\")) call append(7, \"// Last Modified : \") call append(8, \"// ---------------------------------------------------------------------------------\") call append(9, \"// Description : \") call append(10, \"//\") call append(11, \"//\") call append(12, \"// -FHDR----------------------------------------------------------------------------\")endfunction \"-----------------------------------------------------------------------------\" auto update file header modifyTime if write\"-----------------------------------------------------------------------------function UpdateLastModifyTime() let line = getline(8) if line =~ '// Last Modified' call setline(8,\"// Last Modified : \" . strftime(\"%Y-%m-%d %H:%M\")) endifendfunction ‍","categories":[{"name":"技术笔记","slug":"技术笔记","permalink":"https://rongyel.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"数字IC","slug":"数字IC","permalink":"https://rongyel.github.io/tags/%E6%95%B0%E5%AD%97IC/"},{"name":"GVim","slug":"GVim","permalink":"https://rongyel.github.io/tags/GVim/"}],"author":"Rongye"},{"title":"从零开始EDA环境搭建","slug":"思维殿堂/技术笔记/EDA/从零开始EDA环境搭建","date":"2025-06-29T15:30:51.000Z","updated":"2025-02-16T06:52:57.000Z","comments":true,"path":"posts/f07a99ab.html","permalink":"https://rongyel.github.io/posts/f07a99ab.html","excerpt":"搭建一个能够运行tinyriscv项目的EDA环境。","text":"Ubuntu18.04 系统安装http://mirrors.aliyun.com/ubuntu-releases/18.04/ 阿里云镜像下载 VMware配置安装后，启动后为英文。 在更改语言前，先换源。 换源https://zhuanlan.zhihu.com/p/61228593 桌面右键打开terminal 首先备份源列表sudo cp /etc/apt/sources.list /etc/apt/sources.list_backup 打开sources.list文件sudo gedit /etc/apt/sources.list 阿里源 deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse刷新列表sudo apt-get updatesudo apt-get upgradesudo apt-get install build-essential 换源以后就可以去下载语言了。 选择下载语言，找到Chinese 更改以后重启。 重启以后提示更改文件夹名称，最好不做修改保持英文。 系统不自带python2，补充安装 sudo apt install python 系统自带python3.6.9，应该够用，就不装先了。 下面开始准备gvim gvim基本安装系统自带的vi会出现乱码问题，先卸载 sudo apt-get remove vim-common 重新安装，直接装vim-gtk3 sudo apt install vim-gtk3 基本可以使用了，接下来开始搞插件。 安装git sudo apt install git 接着首先安装vundle插件管理器 参考https://www.cnblogs.com/feiyuhuo/p/10274236.html 1、先新建目录 mkdir ~/.vim/bundle/Vundle.vim 2、git 克隆 Vundle 工程到本地 git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim 出现这个无法访问的提示…… 那只能将https修改为git 已经准备好的.vimrc文件整个复制进去。【此时目录下应该没有，自己新建一个并命名为.vimrc，然后把下面的内容复制进去即可】 启动gvim，此时会报错无所谓，因为插件还没安装。 回车两下进入正常显示后，输入冒号:PluginInstall安装插件 暂时是只安装三个插件。其他先注释掉了，以后再装。 完成以后重启gvim现在已经是比较好看的了。 在~/.vim目录内，新建colors和syntax文件夹 语法文件和色彩方案搭配效果如下 看verilog代码才会有效果。 那么至此最基本的准备就完成了。 先拍摄一个快照保存一下 tinyriscv环境搭建那么目前是没有多余配置的， 接下来先把tinyriscv的环境准备好。 作者的gitee库 https://gitee.com/liangkangnan/tinyriscv/ 在Downloads文件夹下下载iverilog git clone https://github.com/steveicarus/iverilog.git cd iverilog 切换到v11分支(必须用V11或以上的版本) git checkout v11-branch 安装依赖 sudo apt-get install autoconf gperf flex bison build-essential 编译、安装iverilog和vvp sh autoconf.sh ./configure sudo make&amp;make install 然后准备python3软链接 先删除原来的软链接，这个是连到python2的 sudo rm /usr/bin/python 然后建立新的软链接 sudo ln -s /usr/bin/python3.6 /usr/bin/python 那么现在直接如数python会看到打开的是3.6.9了。exit（）退出，接着搞别的。 安装gtkwave sudo apt-get install gtkwave 下载gun工具链，百度网盘下载(链接：https://pan.baidu.com/s/10uLZYf_cgtH94kZI_N6JhQ 提取码：uk0w) 然后直接拖拽进去。 右键可以直接解压 接着克隆tinyriscv项目工程 在Downloads目录下克隆 git clone https://gitee.com/liangkangnan/tinyriscv.git 主目录下新建个Project文件夹，将刚克隆的复制过来，之前的作为原始备份。 之前下载的工具链复制到tinyriscv工程下的tools目录中 修改tinyriscv/tests/example目录下的common.mk文件 把名称修改过来，保持和工具链名称前缀一致。 :wq保存并退出 下面开始进行测试 sim目录下启用终端 1python .\\sim_new_nowave.py ..\\tests\\isa\\generated\\rv32ui-p-add.bin inst.data 指令执行会报错，说没有这个文件或目录。 把右下划线全部替换为左下划 1python ./sim_new_nowave.py ../tests/isa/generated/rv32ui-p-add.bin inst.data 顺利运行得到结果。 找到当前目录下的tinyriscv_soc_tb.vcd文件双击启动gtkwave查看 基本使用没有问题。 测试所有指令集 1python ./test_all_isa.py 测试新指令集 进入到sim/compliance_test目录，执行以下命令： cd compliance_test python ./compliance_test.py ../../tests/riscv-compliance/build_generated/rv32i/I-ADD-01.elf.bin inst.data 得到PASS表明通过。 接下来测试c文件编译 进入到tests\\example\\simple目录，执行以下命令编译： make 在该目录下回生成.bin文件 编译成功之后，进入到sim目录，执行以下命令开始测试： python ./sim_new_nowave.py ../tests/example/simple/simple.bin inst.data 通过，那么至此基本仿真已经没有问题了。 下面测试FPGA移植。 FPGA移植准备移植需要准备vivado集成开发环境和FPGA，CMSIS-DAP调试器。 我这里安装的是vivado2017.4和Digilent 的 ARTY A7 35T开发板 安装vivado需要准备安装包和许可文件，请自行准备。 此处不能拖拽进虚拟机，需要利用共享文件夹的方式。 在虚拟机设置中，将USB兼容性先修改为USB 3.1 切换到“选项” 启用共享文件夹，不需要关机。 之后在根目录/mnt/hgfs/就可以找到自己的共享文件夹了。 进入安装包文件夹， 赋予安装权限 chmod +x xsetup 执行命令 ./xsetup 启动安装引导 安装过程和windows下没有区别。 安装路径要在/home下，不然空间不足。此处建立了一个EDA_Tools目录供后续各种工具安装。 安装末尾载入许可文件。 在vivado/2017.4目录下找到settings64.sh配置文件。 编辑主目录配置文件 vim ~/.bashrc 在末尾添加路径 source /home/eda/EDA_Tools/Vivado/2017.4/settings64.sh 然后重新加载环境配置 source ~/.bashrc 至此应该就可以启动vivado了。 vivado &amp; 启动vivado 顺利启动以后先关闭，处理一些剩余内容。 先把xilinx的信息中心卸载掉。 找到这个软件，打开。 直接卸载就行。 接着补充安装驱动，否则后续可能无法烧写板子。 /home/eda/EDA_Tools/Vivado/2017.4/data/xicom/cable_drivers/lin64/install_script/install_drivers 在这个路径下，打开终端。 安装驱动。 sudo ./install_drivers 那么vivado也准备完毕以后，开始移植tinyriscv到FPGA上 FPGA移植工作新建工程 我的板子ARTY A7 35T 器件属性选择xc7a35ticsg324-1l 添加源文件 将tinyriscv下整个RTL添加复制进来 将tinyriscv下fpga/constrs下的.xdc约束文件添加进来。 打开约束文件，根据自己的开发板进行修改。此处为我自己的约束。 重点关注时钟，我是100M的时钟，等会还要用PLL分频。 GPIO0,1。我分配给了一个LED和一个SW拨码开关。 JTAG和UART使用调试器CMSIS-DAP的相应接口。 都根据自己开发板的原理图来。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125# 时钟约束50MHz(100MHz)set_property -dict { PACKAGE_PIN E3 IOSTANDARD LVCMOS33 } [get_ports {sys_clk}];create_clock -add -name sys_clk_pin -period 10.00 [get_ports {sys_clk}];# 时钟引脚 E3set_property IOSTANDARD LVCMOS33 [get_ports sys_clk]set_property PACKAGE_PIN E3 [get_ports sys_clk]# 复位引脚 CK_RST/ C2set_property IOSTANDARD LVCMOS33 [get_ports rst]set_property PACKAGE_PIN C2 [get_ports rst]# 程序执行完毕指示引脚 LED3/ T10set_property IOSTANDARD LVCMOS33 [get_ports over]set_property PACKAGE_PIN T10 [get_ports over]# 程序执行成功指示引脚 LED2/ T9set_property IOSTANDARD LVCMOS33 [get_ports succ]set_property PACKAGE_PIN T9 [get_ports succ]# CPU停住指示引脚 LED1/ J5set_property IOSTANDARD LVCMOS33 [get_ports halted_ind]set_property PACKAGE_PIN J5 [get_ports halted_ind]# 串口下载使能引脚 SW3/ A10set_property IOSTANDARD LVCMOS33 [get_ports uart_debug_pin]set_property PACKAGE_PIN A10 [get_ports uart_debug_pin]# 串口发送引脚 / D4set_property IOSTANDARD LVCMOS33 [get_ports uart_tx_pin]set_property PACKAGE_PIN D4 [get_ports uart_tx_pin]# 串口接收引脚 / D3set_property IOSTANDARD LVCMOS33 [get_ports uart_rx_pin]set_property PACKAGE_PIN D3 [get_ports uart_rx_pin]# GPIO0引脚 LED0/ H5set_property IOSTANDARD LVCMOS33 [get_ports {gpio[0]}]set_property PACKAGE_PIN H5 [get_ports {gpio[0]}]# GPIO1引脚 SW0/ A8set_property IOSTANDARD LVCMOS33 [get_ports {gpio[1]}]set_property PACKAGE_PIN A8 [get_ports {gpio[1]}]# JTAG TCK引脚 JD9/ H2set_property IOSTANDARD LVCMOS33 [get_ports jtag_TCK]set_property PACKAGE_PIN H2 [get_ports jtag_TCK]#create_clock -name jtag_clk_pin -period 300 [get_ports {jtag_TCK}];#屏蔽 外部时钟输入分配到普通的IO口set_property CLOCK_DEDICATED_ROUTE FALSE [get_nets jtag_TCK]# JTAG TMS引脚 JD10/ G2set_property IOSTANDARD LVCMOS33 [get_ports jtag_TMS]set_property PACKAGE_PIN G2 [get_ports jtag_TMS]# JTAG TDI引脚 JD7/ E2set_property IOSTANDARD LVCMOS33 [get_ports jtag_TDI]set_property PACKAGE_PIN E2 [get_ports jtag_TDI]# JTAG TDO引脚 JD8/ D2set_property IOSTANDARD LVCMOS33 [get_ports jtag_TDO]set_property PACKAGE_PIN D2 [get_ports jtag_TDO]# SPI MISO引脚 CK_MISO/ G1set_property IOSTANDARD LVCMOS33 [get_ports spi_miso]set_property PACKAGE_PIN G1 [get_ports spi_miso]# SPI MOSI引脚 CK_MOSI/ H1set_property IOSTANDARD LVCMOS33 [get_ports spi_mosi]set_property PACKAGE_PIN H1 [get_ports spi_mosi]# SPI SS引脚 CK_SS/ C1set_property IOSTANDARD LVCMOS33 [get_ports spi_ss]set_property PACKAGE_PIN C1 [get_ports spi_ss]# SPI CLK引脚 CK_SCK/ F1set_property IOSTANDARD LVCMOS33 [get_ports spi_clk]set_property PACKAGE_PIN F1 [get_ports spi_clk]set_property BITSTREAM.CONFIG.SPI_BUSWIDTH 4 [current_design]set_property CONFIG_MODE SPIx4 [current_design]set_property BITSTREAM.CONFIG.CONFIGRATE 50 [current_design] 接下来添加锁相环PLL， 配置IP输出50M时钟 打开顶层文件，修改端口clk为sys_clk 往下，在第一个always块前例化PLL 记得补充声明clk， 至此完成所有FPGA工程配置，生成比特流文件 顺利生成比特流文件，连接开发板直接烧写。 烧写时可能需要重新定位一下，自己生成的bit文件。 板子上的LED亮起，说明顺利烧写进去了， 接下来进行JTAG调试。 FPGA运行调试调试需要使用到CMSIS-DAP，连好线，做好管脚约束才能使用。 同时还需要上位机，作者提供的只有exe也就是windows下的软件。 *注意，Linux下的openocd安装非常麻烦，我遇到了很多问题，虽然现在顺利安装并使用了。 不介意的话后续工作可以直接在windows上进行，把一些文件直接拖到windows下使用即可。 在Ubuntu下直接安装上位机openocd sudo apt install openocd 在tools/openocd目录下，我们需要使用到这个.cfg配置文件。 openocd -f tinyriscv.cfg 提示不行，这是因为默认安装的openocd不支持CMSIS-DAP， 所以我们还需要源码安装自己配置 sudo apt remove openocd先卸载掉原本安装的 进行源码安装，参考 https://blog.csdn.net/daoshengtianxia/article/details/115038674 在Downloads目录下克隆 git clone git://github.com/ntfreak/openocd cd openocd/ 安装依赖 然后执行 ./bootstrap 缺少了什么但又不清楚，补充安装了一大堆东西。 sudo apt install debhelper findutils autotools-dev autoconf automake libtool pkg-config libltdl-dev 重新执行 ./bootstrap 缺少libusb-1.x，补充安装 sudo apt install libusb-1.0 再次configure 这次应该是顺利配置了 再补充下面这个 ./configure –enable-cmsis-dap –enable-jlink –enable-stlink –enable-ti-icdi 提示需要hidapi， sudo apt-get install libhidapi-dev 其实是要补充安装这个libhidapi的库，然后再配置。注意一定要给权限。 sudo ./configure –enable-cmsis-dap 配置成功一定要看到这个地方是yes的 最后编译安装 sudo make&amp;make install 完成安装以后，回到tinyriscv/tools/openocd目录下 openocd -f tinyriscv.cfg 现在可以启用这个软件了，当然目前连接还是失败的，需要再做一些配置。 此外，首先需要对.cfg文件中的一些内容做修改。 根据上一张图，有提示说use”adapter speed”not’adapeter_khz’ 意思就是用前面那个不要用后面那个表述， 打开.cfg就可以看到对应的内容了，改过来就行。 然后还需要准备权限，参考https://www.bbsmax.com/A/A2dm9B87de/ 用lsusb 确认自己的调试器信息 Bus 003 Device 008: ID 0d28:0204 NXP LPC1768 需要增加一个rules文件，参考https://blog.csdn.net/zhengyangliu123/article/details/78232241 进入前面克隆的openocd/contrib 目录 使用指令将 60-openocd.rules 文件复制入 /etc/udev/rules.d/ 目录下 sudo cp 60-openocd.rules /etc/udev/rules.d/ 然后，对文件做一些修改【此处存疑，可能不改也能用】 sudo gvim /etc/udev/rules.d/60-openocd.rules 最下面的地方，改成跟我下图一样的。 注意idVendor和idProduct要保持和上面看到的0d28:0204设备信息一致。 保存以后重启电脑 回到之前的tinyriscv中的openocd文件夹，使用终端执行 openocd -f tinyriscv.cfg 终于看到这个了，不容易啊 *注意，这里存在未知问题。每次重启系统以后，最开始使用openocd会报错。需执行3次，才会识别并启用…… 原因不明，但每次都这样。只要启动成功，不关机就不会有这个问题。 新开一个终端，看作者后续的操作。windows和linux在路径上有些不同 然后打开另一个CMD窗口，执行以下命令来连接openocd，注意电脑要启用telnet host服务。 telnet localhost 4444 然后在这个CMD窗口下使用load_image命令将固件下载到FPGA，这里以freertos.bin文件为例，如下所示： load_image D:/gitee/open/tinyriscv/tests/example/FreeRTOS/Demo/tinyriscv_GCC/freertos.bin 0x0 bin 0x0 0x1000000 使用verify_image命令来校验是否下载成功，如下所示： verify_image D:/gitee/open/tinyriscv/tests/example/FreeRTOS/Demo/tinyriscv_GCC/freertos.bin 0x0 如果下载出错的话会有提示的，没有提示则说明下载成功。 最后执行以下命令让程序跑起来： resume 0 注意：每次下载程序前记得先执行halt命令停住CPU。； 这里使用gpio进行验证 在/home/eda/Project/tinyriscv/tests/example/gpio路径下使用make编译生成bin文件 在telnet窗口下使用下面命令烧写程序 load_image /home/eda/Project/tinyriscv/tests/example/gpio/gpio.bin 0x0 bin 0x0 0x1000000 verify_image /home/eda/Project/tinyriscv/tests/example/gpio/gpio.bin 0x0 bin 0x0 如果看到这个，说明程序烧写成功了 resume 0 此时开发板已经可以正常使用，LED灯会随对应的那个开关亮灭。 下面测试一下串口， 先去把串口发送uart_tx的程序编译一下 安装串口调试工具cutecom sudo apt-get install cutecom 直接打开工具 选这个ACM OPEN以后会看到，连接的就是这个CMSIS-DAP调试器 load_image /home/eda/Project/tinyriscv/tests/example/uart_tx/uart_tx.bin 0x0 bin 0x0 0x1000000 烧写进去并且resume以后，可以看到串口助手窗口打印了hello world。 至此，整个tinyriscv的linux开发环境搭建完成，可以运行整个项目的所有内容。 其他补充输入su命令获取root权限时， 出现了 authentication failure 的问题，即身份验证失败。 需要进行下面操作： $ sudo passwd root Enter new UNIX password: //此时输入你的密码 Retype new UNIX password: //再次输入，相同密码。 passwd: password updated successfully 此时再用su命令，就可以获取到root权限了。","categories":[{"name":"技术笔记","slug":"技术笔记","permalink":"https://rongyel.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"数字IC","slug":"数字IC","permalink":"https://rongyel.github.io/tags/%E6%95%B0%E5%AD%97IC/"},{"name":"Linux","slug":"Linux","permalink":"https://rongyel.github.io/tags/Linux/"}],"author":"Rongye"},{"title":"Hexo Icarus主题文章栏如何调宽","slug":"思维殿堂/技术笔记/NOTES/Hexo Icarus主题文章栏如何调宽","date":"2025-06-29T15:30:51.000Z","updated":"2025-02-16T06:53:18.000Z","comments":true,"path":"posts/39ae3fe6.html","permalink":"https://rongyel.github.io/posts/39ae3fe6.html","excerpt":"Hexo Icarus主题文章栏设置为2栏以后，太窄了，显示内容较少，想提高一下页面利用率。","text":"Hexo Icarus主题文章栏设置为2栏以后，太窄了，显示内容较少，想提高一下页面利用率。 这里需要修改Icarus主题目录下的几个文件。 layout/layout.jsx layout/common/widgets.jsx include/style/responsive.styl 参考文献 Icarus主题美化_icarus插入代码-CSDN博客Icarus主题魔改 - Winky’s Blog Icarus主题的一些常用配置 - zmm’blog icarus个性化配置 - Hongjie’s blog 修改要点 修改这一个地方就可以了 调整前 调整后有明显的效果，但是左侧空的太多了。不对称的感觉。 修改要点2 关键是这里，把这个2 * 给删掉。这样修改以后，2栏模式和3栏模式，都可以对齐了。 再调整后","categories":[{"name":"解决方案","slug":"解决方案","permalink":"https://rongyel.github.io/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"}],"tags":[{"name":"工具","slug":"工具","permalink":"https://rongyel.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"HEXO","slug":"HEXO","permalink":"https://rongyel.github.io/tags/HEXO/"}],"author":"Rongye"},{"title":"Hexo直接发布Obsidian路径下的文章","slug":"思维殿堂/技术笔记/NOTES/Hexo如何直接发布Obsidian路径下的文章","date":"2025-06-29T15:30:51.000Z","updated":"2025-02-16T06:53:20.000Z","comments":true,"path":"posts/da16531b.html","permalink":"https://rongyel.github.io/posts/da16531b.html","excerpt":"Obsidian撰写文章，还要复制到Hexo的_post路径下，才能部署，这个动作太麻烦了。","text":"Obsidian撰写文章，还要复制到Hexo的_post路径下，才能部署，这个动作太麻烦了。 参考文献 Win10 mklink 命令怎么用，mklink 命令使用教程-逍遥峡谷想写就写，灵思无疆：用自动化部署让写作更得心应手 - 少数派 建立软链接即可实现 通过mklink的windows命令，可以将obsidian下的文章路径，链接到hexo的_post下，这样再执行hexo d，就可以直接发布文章了。 1mklink /d /j [链接到的路径] [被链接的路径] 建立连接以后，看着像是快捷方式，但不能用快捷方式的方式来链接。必须用mklink的命令来完成。 进一步的，直接在Obsidian执行Hexo部署命令需要使用到插件shell command。然后将工作路径设置在Hexo仓下，命令只需要hexo g -d即可。 将该命令设置到command列表上，这个需要commander插件来实现。 今后点一下就可以执行命令完成Hexo的部署啦","categories":[{"name":"解决方案","slug":"解决方案","permalink":"https://rongyel.github.io/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"}],"tags":[{"name":"Obsidian","slug":"Obsidian","permalink":"https://rongyel.github.io/tags/Obsidian/"},{"name":"HEXO","slug":"HEXO","permalink":"https://rongyel.github.io/tags/HEXO/"}],"author":"Rongye"},{"title":"Readwise文献剪藏有用吗","slug":"思维殿堂/技术笔记/NOTES/Readwise文献剪藏有用吗","date":"2025-06-29T15:30:51.000Z","updated":"2025-02-16T06:53:24.000Z","comments":true,"path":"posts/22e0203a.html","permalink":"https://rongyel.github.io/posts/22e0203a.html","excerpt":"Readwise Reader，构建笔记系统的最后一环，稍后读+剪藏+RSS。","text":"相遇不容易终于找到了！！！！我笔记系统的最后一环，稍后读+剪藏+RSS。 我试了好几个RSS阅读器，还是那个问题，我觉得好，想收藏的时候会很尴尬，没法流畅的剪藏到obsidian里面，只能很尴尬的发个链接过来。 终于发现了这个readwise，而且居然能用国内网直连更新！！！我去，为什么readly还有inoread都必须翻墙才能刷新数据无语了，这个就可以直连。 而且这个工具可以直接同步笔记到obsidian上，太完美了我只能说，真正的剪藏操作。就是价格有点贵，如果原价的话，要700r一年………………然后神奇的是，说中国可以申请发展中国家优惠…………我试了一下，光速神奇成功…………………………好吧，现在4美元1个月，我直接开了一年。 使用体验这个东西用起来体验可以说是非常完美了。整个工作流程是畅通的。首先在feed栏看RSS链更新的文章，瞅一眼标题，如果感兴趣，就拖拽一下改成later待读状态。 全部清干净以后，有空的时候再去later里读一读。 读的时候，如果发现没有价值直接删掉，如果有意思的段落，可以双击高亮。 全文读完以后选择归档achieve。 最后在打开obsidian的时候，就会自动同步，同步以后就可以看到高亮的内容啦，甚至还有原文高亮链接，点开以后可以网页端继续看全文。只能说体验逻辑非常流畅完整。 获取RSS链接的方式不太容易，终于要还是靠RSSHub，另外我也可以直接在inoreader直接搜索，然后复制它的rss链接。各种转 RSS 服务2023 年我的 RSS 订阅方式💬 Social Media | RSSHub","categories":[{"name":"工具套件","slug":"工具套件","permalink":"https://rongyel.github.io/categories/%E5%B7%A5%E5%85%B7%E5%A5%97%E4%BB%B6/"}],"tags":[{"name":"方法论","slug":"方法论","permalink":"https://rongyel.github.io/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"},{"name":"工具","slug":"工具","permalink":"https://rongyel.github.io/tags/%E5%B7%A5%E5%85%B7/"}],"author":"Rongye"},{"title":"为什么要用Markdown做笔记","slug":"思维殿堂/技术笔记/NOTES/为什么要用Markdown做笔记","date":"2025-06-29T15:30:51.000Z","updated":"2025-04-12T16:01:38.000Z","comments":true,"path":"posts/c97fc71d.html","permalink":"https://rongyel.github.io/posts/c97fc71d.html","excerpt":"markdown有个说法，叫做让人可以专注于笔记内容上。","text":"markdown是一种，简单文本格式，它的内容格式其实是固定的。对比最明显的就是word文档这种富文本。 正文的字号，字体，每一级标题的字号字体，文本的颜色，序列形式，表格格式，一切都是设定好的。当然，具体展现形式还是可以通过主题配置进行修改，但本质是固定的。可以看一下这个测试用例，一切都是有定数的。Markdown 测试用例 - GShang2021 - 博客园 如果尝试用过word做笔记，就肯定会遇到一些比较烦的情况。比如，复制网页内容的时候，还需要特意调整格式，缩进乱跑等情况。还有表格，有时候自动变化的表格会让人很抓狂。 而在markdown里，由于文本的格式是固定的，所以你复制进入的是正文，它就会自动使用正文的格式，保持文章格式的一致性。这样可以很轻松的写出好看的文章，保持一致性，看的非常舒服。 另外，md作为一种代码，它的信息量小，存储成本极低。甚至可以用git进行版本管理，非常有趣。当然，我一般也不会去进行版本管理，因为文章的内容一般是新增的。我也没有回退版本的需求。不过能托管到git仓上，对于数据的备份也是有极大帮助的。 另外一点，markdown作为一种代码格式，他是有自己的语法的。当你想加粗，注释，引用，增加序列的时候，通过输入的方式就可以完成。在熟练使用后，可以提升编辑的流畅感。不需要动鼠标，不需要按快捷键，虽然这样也很方便。 当然也有不方便的地方，那就是图片。如果能够使用一些方式进行同步的话，其实还是能够接受的，但如果想将内容输出为博客，传到网络上的话，可能需要研究一下图床才行。","categories":[{"name":"技术笔记","slug":"技术笔记","permalink":"https://rongyel.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://rongyel.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"Markdown","slug":"Markdown","permalink":"https://rongyel.github.io/tags/Markdown/"}],"author":"Rongye"},{"title":"markdown笔记工具分析","slug":"思维殿堂/技术笔记/NOTES/markdown笔记工具分析","date":"2025-06-29T15:30:51.000Z","updated":"2025-02-16T06:53:22.000Z","comments":true,"path":"posts/c1f4e46a.html","permalink":"https://rongyel.github.io/posts/c1f4e46a.html","excerpt":"记录一下自己使用其他笔记工具的感受。","text":"兜兜转转选择了使用obsidian作为自己的markdown笔记工具。记录一下自己使用其他笔记工具的感受。 typora能很好的完成markdown的编写工作，但缺少文件管理能力。没有标签页。没有其他功能。 思源支持markdown编辑，但数据格式其实是sy这样的私有格式。每一段都有链接能力，粒度太小，其实我用不上。加载速度较慢。导出markdown还算方便，可以整个笔记本导出。 语雀建议不要使用它进行编辑。只作为发布平台。真的，绑架用户是最垃圾的行为。导出便捷性极差，不能整个知识库导出。文章只能一篇一篇导出。我清楚的记得，早期的语雀是可以整个知识库一起导出的，而且导出的格式有很多种，包括word，pdf，markdown等等。我才放心使用的，没想到后面更新后把这些都嘎掉了。现在知识库导出只能导出私有格式，文章导出除了私有格式只有markdown，真的，很，讨厌你们这样的行为。 迁移成本高，说到底就是绑架用户，网页端体验不佳，切换页面加载很不舒服。不能离线使用。 obsidian比较全面的工具。官方同步功能价格昂贵，还好有remote save这样的插件可以实现同步功能，我个人结合OneDrive使用十分方便，移动端和PC端同步数据方便。数据就是markdown，备份方便。 缺点：在公司不敢用。 VSCODE+office view扩展不得已的选择，不过比typora文件管理方便一些。","categories":[{"name":"工具套件","slug":"工具套件","permalink":"https://rongyel.github.io/categories/%E5%B7%A5%E5%85%B7%E5%A5%97%E4%BB%B6/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://rongyel.github.io/tags/Markdown/"}],"author":"Rongye"},{"title":"Obsidian PARA改造思路","slug":"认真生活/笔记人生/基于PARA法的任务管理架构实现/Obsidian PARA改造思路","date":"2025-06-29T15:30:51.000Z","updated":"2025-08-15T15:41:55.252Z","comments":true,"path":"posts/b0a35424.html","permalink":"https://rongyel.github.io/posts/b0a35424.html","excerpt":"Obsidian 用了三百多天了，还在持续改进中。目前还是能感受到PARA的意义的。","text":"对于当前Obsidian笔记的PARA改造思路相关项目：基于PARA法的任务管理架构实现 记忆阵列存放的还是日记、周记、年记。目前日记好说，周记和年记做的不是很好，没有执行起来。是否能类似项目的方式去管理？这个待定。 思维殿堂作为我思想的存放处，不需要做项目、领域的概念。每一篇笔记都是零散的也没有关系？此处还是可以考究的，如果是正在进行某些技术的学习，或者课题的研究，是否还是需要建立领域去维系？这个也待定。 兴趣档案每一篇档案，就是一篇领域笔记。每一篇档案承载的是一件事物的信息，对于这件事物如果有正在进行的工作，那么就建立项目。 文献仓库全部为剪藏文献，包括一些文章、语录。作为资源调用即可。 创作空间以某个系列来建立领域，比如：EasyAXI系列视频、怪物猎人模型重涂、喵&amp;汪的日常~ 绘画 在对这个系列的某次具体工作建立项目，比如：EasyAXI 第五期 AXI Outstanding特性实现、灭尽龙历战王重涂、喵&amp;汪 日本旅游篇等等 认真生活一件需要长期管理的活动作为领域笔记如：小红的成长记录，而某一件具体的工作作为项目，如：2025年Q3 小红背甲、体重月度测量 如：我的舒适小屋作为领域笔记，桌面整改计划作为项目。","categories":[{"name":"方法学论","slug":"方法学论","permalink":"https://rongyel.github.io/categories/%E6%96%B9%E6%B3%95%E5%AD%A6%E8%AE%BA/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://rongyel.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"PARA","slug":"PARA","permalink":"https://rongyel.github.io/tags/PARA/"},{"name":"Obsidian","slug":"Obsidian","permalink":"https://rongyel.github.io/tags/Obsidian/"}]},{"title":"哪些笔记应该做PARA化？","slug":"认真生活/笔记人生/基于PARA法的任务管理架构实现/哪些笔记应该做PARA化？","date":"2025-06-29T15:30:51.000Z","updated":"2025-08-18T15:39:21.418Z","comments":true,"path":"posts/d8e09664.html","permalink":"https://rongyel.github.io/posts/d8e09664.html","excerpt":"PARA是一个好的方法学，但不代表适用任何笔记内容。","text":"哪些笔记应该做PARA化？相关项目：基于PARA法的任务管理架构实现 1. 任务型笔记 有明确的达成目标，有目的性获得某种结果。如，完成视频创作，制作生日礼物等。 倾向于行动导向 需要较长时间推进完成 可以分解为多项具体行为 有明确的完成时间，至少是计划完成时间 进度可以跟踪 这其实是在分析适合做Project的笔记，有了项目，那就有相应的领域。 2. 学习型笔记 有明确的领域，如数字芯片设计 需要长时间推进完成； 可以分散成多个项目推进领域扩张，如AXI、CHI、Cache……等一系列学习内容，均可独立项目 3. 兴趣型笔记 有明确的领域，如动漫、游戏 长期关注，长期维护，可谓永无止境。比如会一直看新的动漫、玩新的游戏 4. 资源型笔记 具备参考价值，如各种文献 灵感库，收集的创意、思维的发散点 查询的资料，通常因为项目推进而发现，存档后链接到项目","categories":[{"name":"方法学论","slug":"方法学论","permalink":"https://rongyel.github.io/categories/%E6%96%B9%E6%B3%95%E5%AD%A6%E8%AE%BA/"}],"tags":[{"name":"PARA","slug":"PARA","permalink":"https://rongyel.github.io/tags/PARA/"},{"name":"Obsidian","slug":"Obsidian","permalink":"https://rongyel.github.io/tags/Obsidian/"},{"name":"方法论","slug":"方法论","permalink":"https://rongyel.github.io/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"},{"name":"笔记人生","slug":"笔记人生","permalink":"https://rongyel.github.io/tags/%E7%AC%94%E8%AE%B0%E4%BA%BA%E7%94%9F/"}]},{"title":"家有小红","slug":"认真生活/家有小红","date":"2025-06-29T15:30:36.000Z","updated":"2025-09-07T08:41:43.104Z","comments":true,"path":"posts/cea648c2.html","permalink":"https://rongyel.github.io/posts/cea648c2.html","excerpt":"","text":"家有小红核心目标 记录小红的成长 观察小红的健康 当前关注 饮食结构调整 里程碑2025-08-02 小红来我家半年啦目前看着一切安好，吃好喝好很好动。目前基本控制龟粮为主，水果、蔬菜少吃。 相关项目12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697// 获取当前笔记名称（不含.md）const currentNoteName = dv.current().file.name.replace(\".md\", \"\");// 查询所有链接到当前 project 笔记的 `type=project` 笔记const projectPages = dv.pages() .where(p =&gt; p.type === \"projects\" &amp;&amp; p.file.outlinks.some(link =&gt; link.path === dv.current().file.path) ) .sort(p =&gt; p.file.cday, 'asc'); // 仍按创建时间排序// 状态显示函数（基于 done 状态）function getStatusIcon(project) { return project.done ? \"✅ 已完成\" : \"🟡 进行中\";}// 进度显示函数（支持多种格式）function getProgressDisplay(project) { if (project.done) return \"▮▮▮▮▮ 100%\"; if (!project.progress) return \"▯▯▯▯▯ 0%\"; // 处理不同进度格式 if (project.progress.includes(\"▮\")) { return project.progress; } else { const percent = parseInt(project.progress.toString().replace(/\\D/g, '')) || 0; const filled = Math.floor(percent / 20); return \"▮\".repeat(filled) + \"▯\".repeat(5-filled) + ` ${percent}%`; }}// 结项日期显示函数function getCompletionDate(project) { if (!project.done) return \" \"; if (project.completion) { return dv.date(project.completion).toISODate(); } if (project.file.mtime) { return project.file.mtime.toISODate(); // 降级使用最后修改时间 } return \"无记录\";}// 显示结果if (projectPages.length &gt; 0) { // 统计项目状态及关联笔记数量 const projectsWithNoteCount = projectPages.map(p =&gt; { const noteCount = dv.pages() .where(n =&gt; n.type === \"notes\" &amp;&amp; n.file.outlinks.some(link =&gt; link.path === p.file.path) ).length; return { ...p, noteCount, status: getStatusIcon(p), progress: getProgressDisplay(p), completion: getCompletionDate(p) }; }); // 计算统计信息 const doneCount = projectsWithNoteCount.filter(p =&gt; p.done).length; const totalCount = projectsWithNoteCount.length; dv.table( [\"状态\", \"项目名称\", \"进度\", \"关联笔记\", \"创建时间\", \"结项日期\"], [ ...projectsWithNoteCount.map(p =&gt; [ p.status, p.file.link, p.progress, p.noteCount &gt; 0 ? `📝 ${p.noteCount}` : \"无\", p.file.cday.toISODate(), p.completion ]), // 统计行（已修复） [ `**${doneCount}/${totalCount}**`, `**项目统计**`, `**完成率: ${Math.round(doneCount/totalCount*100)}%**`, \"\", \"\", `**最近结项: ${ projectsWithNoteCount .filter(p =&gt; p.done) .sort((a, b) =&gt; (b.file?.mtime || new Date(0)) - (a.file?.mtime || new Date(0))) [0]?.completion || \"无\" }**` ] ] );} else { dv.span(`当前领域笔记没有链接到任何项目笔记`);} 相关笔记123456789101112131415161718192021222324// 获取当前领域名const currentAreaName = dv.current().file.name.toLowerCase();// 查找所有 type 为 notes 且 tags 中包含领域名的笔记const relatedNotes = dv.pages() .where(p =&gt; p.type === \"notes\" &amp;&amp; Array.isArray(p.tags) &amp;&amp; p.tags.some(tag =&gt; typeof tag === \"string\" &amp;&amp; tag.toLowerCase().includes(currentAreaName) ) ) .sort(p =&gt; p.file.mtime, 'desc'); // 按修改时间倒序// 生成表格dv.table( [\"笔记名称\", \"最后修改时间\"], relatedNotes.map(p =&gt; [ p.file.link, p.file.mtime ? p.file.mtime.toFormat(\"yyyy-MM-dd HH:mm\") : \"未知\" ])); 相关资源12345678910111213141516171819202122232425262728293031323334353637// 当前领域名（小写）const currentAreaName = dv.current().file.name.toLowerCase();// 获取当前领域笔记的 tags（全部小写）const areaTags = (dv.current().tags || []) .filter(t =&gt; typeof t === \"string\") .map(t =&gt; t.toLowerCase());// 查找相关的 resourcesconst relatedResources = dv.pages() .where(p =&gt; p.type === \"resources\" &amp;&amp; Array.isArray(p.tags) &amp;&amp; ( // 方式1：tags 包含领域名 p.tags.some(tag =&gt; typeof tag === \"string\" &amp;&amp; tag.toLowerCase().includes(currentAreaName)) || // 方式2：tags 与领域的 tags 有交集 p.tags.some(tag =&gt; typeof tag === \"string\" &amp;&amp; areaTags.includes(tag.toLowerCase())) ) ) .sort(p =&gt; p.file.mtime, 'desc'); // 按最后修改时间降序// 输出表格dv.table( [\"资源笔记\", \"最后修改时间\", \"匹配标签\"], relatedResources.map(p =&gt; { const resTags = (p.tags || []).map(t =&gt; t.toLowerCase()); const matched = resTags.filter(t =&gt; t.includes(currentAreaName) || areaTags.includes(t)); return [ p.file.link, p.file.mtime ? p.file.mtime.toFormat(\"yyyy-MM-dd HH:mm\") : \"未知\", matched.join(\"，\") || \"—\" ]; }));","categories":[],"tags":[{"name":"爬宠","slug":"爬宠","permalink":"https://rongyel.github.io/tags/%E7%88%AC%E5%AE%A0/"},{"name":"红腿陆龟","slug":"红腿陆龟","permalink":"https://rongyel.github.io/tags/%E7%BA%A2%E8%85%BF%E9%99%86%E9%BE%9F/"}]},{"title":"要以什么粒度规划自己的工作？","slug":"思维殿堂/方法学论/要以什么粒度规划自己的工作？","date":"2025-06-29T15:30:36.000Z","updated":"2025-09-07T14:27:02.922Z","comments":true,"path":"posts/d875bafd.html","permalink":"https://rongyel.github.io/posts/d875bafd.html","excerpt":"","text":"要以什么粒度规划自己的工作？ 其实，我们每一天过的是很快的。只有少数任务需要限定在某个具体的时间段，这类属于及时任务。而大部分工作，能在当天完成，就已经可以了。 因此，我的任务以天为粒度规划，如果需要立马完成，将优先级调到最高，并备注一下即可。","categories":[{"name":"闪念胶囊","slug":"闪念胶囊","permalink":"https://rongyel.github.io/categories/%E9%97%AA%E5%BF%B5%E8%83%B6%E5%9B%8A/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://rongyel.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"方法论","slug":"方法论","permalink":"https://rongyel.github.io/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"}]},{"title":"基于PARA法的任务管理架构实现","slug":"认真生活/笔记人生/基于PARA法的任务管理架构实现","date":"2025-06-29T15:30:36.000Z","updated":"2025-09-07T14:27:02.947Z","comments":true,"path":"posts/43d2d36c.html","permalink":"https://rongyel.github.io/posts/43d2d36c.html","excerpt":"","text":"基于PARA法的任务管理架构实现关联领域: 笔记人生 项目计划 #TODO 建立习惯打卡规则 [due:: 2025-09-04] [completion:: 2025-09-05] #TODO 主页项目领域笔记显示优化。 [due:: 2025-08-17] [completion:: 2025-08-29] #TODO 三天打鱼两天晒网的计划，是否还能重拾？还剩小半年，现在开始还不晚。 [due:: 2025-09-06] #TODO type修改project为复数 [due:: 2025-08-03] [completion:: 2025-08-19] #TODO 如何在主页呈现项目信息 [due:: 2025-06-08] [completion:: 2025-09-01] #TODO 按键改造成note toolbar [due:: 2025-05-26] [completion:: 2025-05-28] 增加项目延期场景 #TODO [due:: 2025-05-26] 增加项目计划关闭时间 #TODO [due:: 2025-05-26] [completion:: 2025-06-08] 整理PARA笔记执行流程 #TODO [due:: 2025-05-31] 完成PARA改造 #TODO [due:: 2025-09-30] 领域笔记模板准备 #TODO [due:: 2025-05-26] [completion:: 2025-06-18] 项目笔记模板准备 #TODO [due:: 2025-05-26] #TODO 建立项目计划 [due:: 2025-05-21] [completion:: 2025-05-26] #TODO 支持在项目的目录下直接新建笔记 [due:: 2025-05-25] [completion:: 2025-05-25] #TODO 明确哪些类型的笔记需要PARA化 [due:: 2025-05-25] [completion:: 2025-05-25] #TODO 实现项目看板，显示进度、完成状态、结项日期等 [due:: 2025-05-24] [completion:: 2025-05-24] #TODO 建立folder note，实现文件层次化归档 [due:: 2025-05-23] [completion:: 2025-05-23] #TODO 支持领域笔记自动查询相关项目笔记，显示修改时间及进度 [due:: 2025-05-21] [completion:: 2025-05-22] #TODO 支持自动更新笔记进度 [due:: 2025-05-21] [completion:: 2025-05-22] 项目日志2025-08-31 理解进一步加深需要绘制一个系统架构图，来推进PARA架构了。 项目笔记12345678910111213141516171819202122232425262728293031323334353637383940// 获取当前笔记名称（不含.md）const currentNoteName = dv.current().file.name.replace(\".md\", \"\");// 查询所有链接到当前 project 笔记的 `type=note` 笔记const notePages = dv.pages() .where(n =&gt; n.type === \"notes\" &amp;&amp; n.file.outlinks.some(link =&gt; link.path === dv.current().file.path) ) .sort(n =&gt; n.modify, 'desc'); // 按修改时间排序// 计算统计信息const totalNotes = notePages.length;const completedNotes = notePages.filter(n =&gt; n.done).length;const recentUpdated = notePages[0]?.file.mday.toISODate() || \"无记录\";// 显示结果if (totalNotes &gt; 0) { dv.table( [\"状态\", \"笔记名称\", \"最近修改\", \"进度\"], [ ...notePages.map(n =&gt; [ n.done ? \"✅ 已完成\" : \"🟡 进行中\", n.file.link, n.file.mday.toISODate(), n.progress || \"无进度数据\" ]), // 统计行 [ `**${completedNotes}/${totalNotes}**`, `**笔记统计**`, `**最近更新: ${recentUpdated}**`, ` ` ] ] );} else { dv.span(`当前 project 笔记没有链接到任何笔记`);} 项目资源 [[让模糊的愿望一步步落地：基于 Obsidian 的目标项目化实践]] [[笔记软件及剪藏：Obsidian与Markdownload - 知乎]] [[文献仓库/待读/让模糊的愿望一步步落地：基于 Obsidian 的目标项目化实践]]","categories":[],"tags":[{"name":"PARA","slug":"PARA","permalink":"https://rongyel.github.io/tags/PARA/"},{"name":"Obsidian","slug":"Obsidian","permalink":"https://rongyel.github.io/tags/Obsidian/"},{"name":"方法论","slug":"方法论","permalink":"https://rongyel.github.io/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"},{"name":"任务管理","slug":"任务管理","permalink":"https://rongyel.github.io/tags/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86/"}]},{"title":"完成比完美更重要的日记系统","slug":"认真生活/笔记人生/完成比完美更重要的日记系统","date":"2025-06-29T15:30:36.000Z","updated":"2025-09-07T14:27:02.947Z","comments":true,"path":"posts/8a5ecb4c.html","permalink":"https://rongyel.github.io/posts/8a5ecb4c.html","excerpt":"","text":"完成比完美更重要的日记系统关联领域: 笔记人生 项目计划 #TODO 公司的方案较好，改造本笔记系统 [due:: 2025-06-29] [completion:: 2025-07-28] [/] #TODO 如何在周记体现打卡情况 [due:: 2025-09-05] 习惯跟踪还需要优化显示 #TODO [due:: 2025-05-31] [completion:: 2025-06-08] 如何在周记体现项目进度 #TODO [due:: 2025-05-30] quickadd日记按键语法优化 [due:: 2025-05-29] [completion:: 2025-05-30] 尝试调整嵌入小记时的间距 [due:: 2025-05-29] [completion:: 2025-05-29] 小记嵌入显示背景色修改 [due:: 2025-05-29] [completion:: 2025-05-29] 完成三次周记维护，养成习惯 #TODO [repeat:: every week] [due:: 2025-06-15] [completion:: 2025-07-05] 完成三次周记维护，养成习惯 #TODO [repeat:: every week] [due:: 2025-06-08] [completion:: 2025-07-05] 完成三次周记维护，养成习惯 #TODO [repeat:: every week] [due:: 2025-06-01] [completion:: 2025-07-05] 添加年记模板 #TODO [due:: 2025-06-30] 添加月记模板 #TODO [due:: 2025-06-15] 分析月记意义 #TODO [due:: 2025-06-01] 实现日记按键note toolbar美化 [due:: 2025-05-28] [completion:: 2025-05-28] 实现记账按键 [due:: 2025-05-27] [completion:: 2025-05-28] 实现周记汇总打卡进度 [due:: 2025-05-27] [completion:: 2025-05-30] 优化周记模板，更好的整理，并撰写小结 [due:: 2025-05-27] [completion:: 2025-05-30] 建立项目计划 [due:: 2025-05-26] [completion:: 2025-05-28] 优化日记模板 [due:: 2025-05-26] [completion:: 2025-05-27] 项目笔记12345678910111213141516171819202122232425262728293031323334353637383940// 获取当前笔记名称（不含.md）const currentNoteName = dv.current().file.name.replace(\".md\", \"\");// 查询所有链接到当前 project 笔记的 `type=note` 笔记const notePages = dv.pages() .where(n =&gt; n.type === \"note\" &amp;&amp; n.file.outlinks.some(link =&gt; link.path === dv.current().file.path) ) .sort(n =&gt; n.modify, 'desc'); // 按修改时间排序// 计算统计信息const totalNotes = notePages.length;const completedNotes = notePages.filter(n =&gt; n.done).length;const recentUpdated = notePages[0]?.file.mday.toISODate() || \"无记录\";// 显示结果if (totalNotes &gt; 0) { dv.table( [\"状态\", \"笔记名称\", \"最近修改\", \"进度\"], [ ...notePages.map(n =&gt; [ n.done ? \"✅ 已完成\" : \"🟡 进行中\", n.file.link, n.file.mday.toISODate(), n.progress || \"无进度数据\" ]), // 统计行 [ `**${completedNotes}/${totalNotes}**`, `**笔记统计**`, `**最近更新: ${recentUpdated}**`, ` ` ] ] );} else { dv.span(`当前 project 笔记没有链接到任何笔记`);} 项目资源","categories":[],"tags":[{"name":"PARA","slug":"PARA","permalink":"https://rongyel.github.io/tags/PARA/"},{"name":"日记","slug":"日记","permalink":"https://rongyel.github.io/tags/%E6%97%A5%E8%AE%B0/"},{"name":"生活","slug":"生活","permalink":"https://rongyel.github.io/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"第一次购房计划","slug":"认真生活/舒适的家/第一次购房计划","date":"2025-06-29T15:30:36.000Z","updated":"2025-09-07T14:27:02.949Z","comments":true,"path":"posts/18a15a97.html","permalink":"https://rongyel.github.io/posts/18a15a97.html","excerpt":"","text":"第一次购房计划关联领域: 舒适的家 项目计划 #TODO 看房黄埔雅苑三期 [due:: 2025-06-22] [completion:: 2025-06-22] #TODO 整理买房核心要素 [due:: 2025-06-18] [completion:: 2025-06-22] #TODO 建立项目计划 [due:: 2025-06-18] [completion:: 2025-06-23] 项目笔记12345678910111213141516171819202122232425262728293031323334353637383940// 获取当前笔记名称（不含.md）const currentNoteName = dv.current().file.name.replace(\".md\", \"\");// 查询所有链接到当前 project 笔记的 `type=note` 笔记const notePages = dv.pages() .where(n =&gt; n.type === \"notes\" &amp;&amp; n.file.outlinks.some(link =&gt; link.path === dv.current().file.path) ) .sort(n =&gt; n.modify, 'desc'); // 按修改时间排序// 计算统计信息const totalNotes = notePages.length;const completedNotes = notePages.filter(n =&gt; n.done).length;const recentUpdated = notePages[0]?.file.mday.toISODate() || \"无记录\";// 显示结果if (totalNotes &gt; 0) { dv.table( [\"状态\", \"笔记名称\", \"最近修改\", \"进度\"], [ ...notePages.map(n =&gt; [ n.done ? \"✅ 已完成\" : \"🟡 进行中\", n.file.link, n.file.mday.toISODate(), n.progress || \"无进度数据\" ]), // 统计行 [ `**${completedNotes}/${totalNotes}**`, `**笔记统计**`, `**最近更新: ${recentUpdated}**`, ` ` ] ] );} else { dv.span(`当前 project 笔记没有链接到任何笔记`);} 项目资源","categories":[],"tags":[{"name":"购房","slug":"购房","permalink":"https://rongyel.github.io/tags/%E8%B4%AD%E6%88%BF/"}]},{"title":"若想达成目标，就不应该再考虑省钱","slug":"思维殿堂/个人浅见/若想达成目标，就不应该再考虑省钱","date":"2025-06-29T15:30:35.000Z","updated":"2025-08-15T15:41:21.334Z","comments":true,"path":"posts/70658b32.html","permalink":"https://rongyel.github.io/posts/70658b32.html","excerpt":"因为各种事情的花钱结果而有所感悟。","text":"若想达成目标，就不应该再考虑省钱抓住主要矛盾对于这一点也是越来越有感触了。在有一个明确目标的时候，为了实现这个目标，得到一个好的结果，此时就不应该再考虑“省”这件事。省并非有错，而是相较于更好的达成目标这个主要矛盾，我们不要投入过多的思维在次要矛盾上。 很多时候，钱一次给到位了，就能够直接收获满意的结果。比如，购置相机镜头，想要一个又轻便，又好看，画质还好的，就应该直接投入预算去购买原厂饼干头。确实，一颗国产镜头价格不过700，富士原厂饼干头要2200，价格差了三倍。但是国产镜头画质较差，有明显暗角，体积更大，这都是对应这个价格的。省了点钱，但是用着又不爽。这种东西也不会有很多个，所以真的投入足够的预算，买一个好的，比省出2个差的钱要有意义的多。 满足上述理论的前提首先，当购买次数只有1~2次的时候，一步到位肯定是最好的如果需要大量、多次购买，那么一次省下来的价值，才存在。","categories":[{"name":"思维殿堂","slug":"思维殿堂","permalink":"https://rongyel.github.io/categories/%E6%80%9D%E7%BB%B4%E6%AE%BF%E5%A0%82/"}],"tags":[{"name":"人生","slug":"人生","permalink":"https://rongyel.github.io/tags/%E4%BA%BA%E7%94%9F/"}]},{"title":"记一次让Deepseek帮忙优化PARA笔记法","slug":"思维殿堂/技术笔记/记一次让Deepseek帮忙优化PARA笔记法","date":"2025-06-29T15:30:35.000Z","updated":"2025-09-07T14:27:02.920Z","comments":true,"path":"posts/f689686b.html","permalink":"https://rongyel.github.io/posts/f689686b.html","excerpt":"摘要","text":"对我要的内容理解不充分。 不过能给出可以理解的例子，说明流程； 提出了很多有效建议，比如如何一步步改造自己的笔记库。 给出的很多脚本执行存在问题，可能功能有效，但是会异常报错。需要人分析哪些语法存在问题。 多个AI交替检查脚本，有奇效。","categories":[{"name":"技术笔记","slug":"技术笔记","permalink":"https://rongyel.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"AI","slug":"AI","permalink":"https://rongyel.github.io/tags/AI/"},{"name":"Deepseek","slug":"Deepseek","permalink":"https://rongyel.github.io/tags/Deepseek/"},{"name":"PARA","slug":"PARA","permalink":"https://rongyel.github.io/tags/PARA/"}]},{"title":"尝试做三天打鱼两天晒网式的2025年计划","slug":"思维殿堂/方法学论/尝试做三天打鱼两天晒网式的2025年计划","date":"2025-06-29T15:30:35.000Z","updated":"2025-09-07T14:27:02.921Z","comments":true,"path":"posts/37706040.html","permalink":"https://rongyel.github.io/posts/37706040.html","excerpt":"","text":"看了一篇文章，感觉很有用。不用内耗的个人时间管理，我的 2024 实践小结 2024年结束了，笔记规划这个事情现在推进的还不够好，在2025年要执行起来。 2月份，完成OBSIDIAN的彻底重构2月份，开始创作视频","categories":[{"name":"方法学论","slug":"方法学论","permalink":"https://rongyel.github.io/categories/%E6%96%B9%E6%B3%95%E5%AD%A6%E8%AE%BA/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://rongyel.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"Obsidian","slug":"Obsidian","permalink":"https://rongyel.github.io/tags/Obsidian/"}]},{"title":"我即“公司”，让自己的各个“部门”制定2025年度计划","slug":"思维殿堂/方法学论/我即“公司”，让自己的各个“部门”制定2025年度计划","date":"2025-06-29T15:30:35.000Z","updated":"2025-04-27T14:57:40.000Z","comments":true,"path":"posts/d56a9866.html","permalink":"https://rongyel.github.io/posts/d56a9866.html","excerpt":"","text":"脑子一抽，又在纠结自己的年度计划了今年已经四月份了，我的年度计划还没有搞出来。为什么又想起这件事情，主要还是发现自己的短线计划虽然已经系统化了，但是缺少了长线计划，使得生活仿佛缺少了一条主线。o 参考如下两篇年度计划完不成，可能是好事 时间管理或许是伪命题 IV主线任务、支线任务、临时任务","categories":[{"name":"方法学论","slug":"方法学论","permalink":"https://rongyel.github.io/categories/%E6%96%B9%E6%B3%95%E5%AD%A6%E8%AE%BA/"}],"tags":[{"name":"计划","slug":"计划","permalink":"https://rongyel.github.io/tags/%E8%AE%A1%E5%88%92/"},{"name":"效率","slug":"效率","permalink":"https://rongyel.github.io/tags/%E6%95%88%E7%8E%87/"}]},{"title":"喵＆汪！2025～","slug":"思维殿堂/日常随记/喵＆汪！2025～","date":"2025-06-29T15:30:35.000Z","updated":"2025-09-07T14:27:02.923Z","comments":true,"path":"posts/7d7449bf.html","permalink":"https://rongyel.github.io/posts/7d7449bf.html","excerpt":"","text":"以后就按照这个标题来制作年度视频吧！以后多用手机录像，录横屏的。","categories":[{"name":"日常随记","slug":"日常随记","permalink":"https://rongyel.github.io/categories/%E6%97%A5%E5%B8%B8%E9%9A%8F%E8%AE%B0/"}],"tags":[]},{"title":"决定购房的核心要素整理","slug":"思维殿堂/购房笔记/决定购房的核心要素整理","date":"2025-06-29T15:30:35.000Z","updated":"2025-08-18T15:37:10.463Z","comments":true,"path":"posts/72e64147.html","permalink":"https://rongyel.github.io/posts/72e64147.html","excerpt":"最近看房看的有点多，心乱了。稍微花时间理顺了一下自己的核心需求，以及购房的逻辑。","text":"决定购房的核心要素整理相关项目：第一次购房计划 必须满足安静 换房的根因 不接受任何噪音要素 交通 近地铁，便于通勤 不偏远，去哪都不方便也烦心 空间 三房起，85㎡+ 充足的空间，相处有距离，心情也舒畅 仅黄埔雅苑可以放宽要求 小区 必须是花园小区 有绿化、能散步、更安全 老式小区不如不要 装修 精装修或者硬装好 既然买二手，就希望能拎包入住 注：浴室、厨房可放宽，可以考虑改造 加分项价格 极限750W 记住，每省10W，购车的预算就多10W，性价比更高 朝向 东南、正南、正东最佳，朝北不行 学位 未来可能有用 为了保值 车位 充裕的车位也减少一件烦心事","categories":[{"name":"购房笔记","slug":"购房笔记","permalink":"https://rongyel.github.io/categories/%E8%B4%AD%E6%88%BF%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"买房","slug":"买房","permalink":"https://rongyel.github.io/tags/%E4%B9%B0%E6%88%BF/"},{"name":"舒适的家","slug":"舒适的家","permalink":"https://rongyel.github.io/tags/%E8%88%92%E9%80%82%E7%9A%84%E5%AE%B6/"}]},{"title":"2025 五一 巴厘岛","slug":"认真生活/世界巡礼/2025 五一 巴厘岛","date":"2025-06-29T15:30:35.000Z","updated":"2025-05-10T07:19:20.000Z","comments":true,"path":"posts/a1ad8d3c.html","permalink":"https://rongyel.github.io/posts/a1ad8d3c.html","excerpt":"","text":"第一天 在途这一天值得说的是去程，这次选择了蛇口轮渡到香港机场的方案，我只能说非常舒适，人少，过关快，有厕所，到机场时间稳定可控，全程很放松。这次选择了国泰航空，比较贵，但是确实很好。飞机餐食有准备特色印尼菜，味道好，最后哈根达斯收尾。 大约五点半，落地机场后就是光速出关，找接机。是那种拿着纸写着BAI的那种哈哈，找着以后坐车前往酒店。这里开始感受巴厘岛落后了……主干道路也窄，所以很堵，非常堵，开了很久。路上也是摩托乱窜。两侧店铺破旧，小平房，经济发展毫无疑问是比较差滴，不过能看到当地风格的建筑，所以还算新奇。但到了酒店就不一样了。直接到酒店入住，酒店是那种度假酒店，围了一个泳池的那种，看着贼好，第一次住这样的酒店还是很新奇的。 酒店内很豪华，酒店外真的就很破，直接进小县城的感觉。为了吃晚饭，很保守的在酒店旁的餐厅吃了一顿。味道很独特但称不上好吃，那个炒饭好咸…… 第二天 渐入佳境第二天，我开始有度假的感觉啦首先是好好睡了一觉，睡醒慢悠悠的去吃了早餐。五星级酒店的早餐就是赞啊，自助餐，东西很丰富，水准很高。特别的，他们的咖啡很好喝，我点的那杯拿铁很香，很润，喝起来很舒服，唤醒我精神的感觉。 然后出门购物，说实话，乡下地方，街道两旁的东西并不是很好逛，东西少，价格贵，但我依旧在一个手工艺品店挑了一个木雕猫头鹰，莫名的就看对眼了，价格15rmb就也还好。 最后还是在一个小mall里买齐了东西，柳依要的裤子，编织袋，我还买了一件花衬衫哈哈，挺帅，适合我的气质。午饭吃的泰国菜，柳依是越南粉，我是鸡肉绿咖喱，还喝了泰式奶茶和椰子。泰奶很好喝，不知道咋做的，风味上很像港奶，但是比它丝滑，也更甜一点。绿咖喱很有特色，很好吃，但我觉得咖喱少了一点，饭没法全部配着吃完，可惜可惜。 下午就很度假啦，我直接拒绝了白白出门找甜点的计划，美美的享受酒店泳池旁的闲适感。穿上我新买的花衬衫和泳裤，找一张凳子，铺上免费的毛巾，往那一趟，嘴里喝着冰可乐，手里拿着电子书，别提多安逸了～身体稍微沾点水，再躺在椅子上，风轻轻吹过带来凉意，感觉特别特别舒服，心情很放松，没有压力没有烦恼，短暂且珍贵。白白最后也被这舒服的氛围所吸引，没有出门，换上泳装跟我一起下水玩了一会。我老婆泳装真好看，心动的感觉。最后慢悠悠地把我的败犬女主第三卷看完啦，至此动漫第一季的剧情我也是补完了，文字版依旧有趣，真的好喜欢这些角色的性格和对话，看得我很开心。后面就是新鲜的剧情了，好期待啊！ 大约五点钟，才再次出门前往沙滩。沙滩很近走路五分钟就到了，他们这沙滩海岸线很长，可以沿着一直走。幸运的是沙滩比较实，我没有拖鞋，穿着徒步鞋走过也完全没有进沙子。吹着海风，听着海浪，心情愈发平和。最后花了50r两个人，租了两张舒服的沙滩椅躺着等日落。有点可惜的是日落到海平面的最后一节被厚厚的云层遮挡住了，幸运的是即便没到最后一节，夕阳也已经散发出了绝美的红颜，感恩。 日落后，我们就去觅食了。莫名找到一家bar，主要是因为白白把海鲜拼盘误认为烤猪扒了……bar的氛围很好，所以也呆的下去。两人共喝一瓶BINTANG啤酒，但很遗憾东西没有很好吃，点了个羊肉塔可？量很少，一口就无啦，全靠标准水平的玛格丽塔披萨保住了肚子不饿。饭后再步行回酒店的路上，再次发现了冰淇淋，点了一个朗姆口味和柠檬口味，朗姆酒香醇厚，柠檬清爽，好吃滴。 第二天并未就此结束，今天早上我们已经预约好了晚上八点的SPA，所以回到酒店休整一下就前往享受Spa生活。精油推拿我没怎么体验过，这次全是享受到了，确实是很舒服。技师小姐姐力气不算大，在我略微有疼痛感的水平。但是推的很认真很到位，六十分钟流程很扎实，捏完身体酥酥软软滴。第二天全是真真进入假期状态了，而且第一次体验到这种度假，而非旅游的感觉。整个人就是放松，放松，不像旅游，其实还挺累的，晚上在酒店就是摊着，腰酸疼的要死那种…… 第三天 转移AYANA今天睡醒的就比较早了，所以计划好了去泳池游泳再吃早餐。白白犹豫了老半天，还是禁不住游泳的诱惑一起去了。我游的不多，主要是躺在浮床上凉爽地晒太阳，最后游了十分钟就很舒服了。运动完再吃早餐果然胃口极佳，直接拿了满满一大盆，还能快速全部吃完了。这酒店自助是真心不错，可能我标准低吧，反正觉得都挺好吃的，吃的挺开心。顺利的拉完屎，现在瘫在阳台的沙发上敲游记。今天天气依旧很好，不算热，风吹过暖暖地很舒服的那种。 中午没吃饭，找了个小咖啡馆消磨了一些时间，再打车前往超高级度假村，ayana。真是长见识了，一个超大的度假村区域，就是直接围了一块地，里面分四个区域的旅馆。我们选择的是最便宜的林巴区，但环境也很棒很大。每个区域都有泳池，餐厅，酒吧，真的极尽享受。这天下午入住休整了一下，就前往主要的海边悬崖区，ayana lobby那边，看看海景。这个区域整体建筑就是很有印度风，顺着台阶而下可以纵览海景，没有遮挡。运气不错，天虽不蓝但并没有雨，所以海景还是很赞，就是天气有点热，闷得我一下就出汗了。 网上预定的餐厅是kisik海鲜&amp;烧烤，没选那个最有名的岩石餐厅。岩石餐厅那里也就是下去看了一眼，真想看日落我觉得还是kisik强，坐到了刚好正看日落的桌子。预定的五点半，日落是六点零几分的时候，顺利看到了全程，开心。晚饭比较一般了，也没有指望，点的牛排，虾，海鲜串，全都只能说还过得去，谈不上特别好吃。唯一亮点是免费送的空心菜，我甚至找服务员加了一份。 回酒店泡了个澡，养足精神后，去了unique屋顶泳池酒吧搞浪漫。我也是第一次喝鸡尾酒，点了杯大名鼎鼎的长岛冰茶。挺好喝，但是太上头了，印象深刻的伏特加味道。柳依喝了个无酒精混合果汁，感觉那个也很好喝。两个人在那强行搞浪漫哈哈。不过我确实喝的太上头了，晚上直接昏睡。 第四天 完美海滩游今天的主要任务就是AYANA的私人海滩，库布海滩。早上睡到自然醒，但也赶在九点高峰期前吃上了TOGE餐厅的自助早餐。价格着实高，但好在吃的确实不错。主打的就是种类丰富多样，覆盖各国美食，我属于啥也喜欢的流派，所以拿了好大一碟。 吃饱喝足坐摆渡车前往库布海滩，此时天气已经有点热意了。先说结论，本次海滩游非常完美，拍到了很多美照，也在海浪中好好玩耍了一番。库布海滩需要乘坐电梯到悬崖下，是一个在峡口的海滩。沙子很白很美，海水也很透亮，是那种浅水绿深水蓝，最符合海岛形象的海水。能看到这样的海景，本次旅程的价值就达成一大半了。我比较兴奋，虽然海浪比较大，估计是浮潜不了了，但是玩水本身就很有乐趣。白白老是嫌晒，被我催促了好几次才愿意换上泳衣。事实证明不穿泳衣拍就太可惜了，天气真的绝赞，海浪也很美，沙滩很白很长，轻而易举就拍出了大量美腻的泳装照片。 话说我老婆身材真好啊。 拍了照片以后白白就躲到沙滩椅下了，我自己跑去玩水。稍微试着游了一下，感觉浪真的是太大了，好凶，怪吓人的。比较大的浪能直接把人掀翻，不做好准备站都站不稳，所以放弃了游太远，更别说浮潜了。最后直接在海滩边上玩海浪对抗小游戏，尝试在每一波海浪冲击下站稳。这么无聊的游戏我愣是开心的玩了十多分钟哈哈哈。有一次浪真的是太大了，我直接被掀翻，人都懵懵的。 上午库布海滩顺利结束后，中午打车去吃烤猪扒。比较有名的一家猪扒店，叫做wahaha。烤猪扒保守了，点了小份的，没想到香嫩酥脆，吸溜几口就没了，很可惜。吃完还逛了纪念品店，以及当地的大超市sideway。这个大超市其实就是类似ole的那种进口商品店。稍微买了点特色零食后就回酒店了，下午没睡觉巨困。 回酒店休整周，又接着去泳池放松。我们住的这个wana有一个长条的森林泳池，来的人比较少，所以很放松。我发现了一个绝赞姿势，就是躺在浮床上，边泡泳池边看电子书。这样很凉快，下午的阳光洒在身上也暖暖的，很舒服。而白白又去她的长距离游泳去了，估摸着游了一公里，太强了哦喵喵。 晚上再次去觅食，很无语的是没有预约上那个日料餐厅，本膳，吃个拉面啥的。去了以后说只能进食60分钟，那还是算了。反身去TO’GE，反而吃到了好东西。不愧是最多元的餐厅，点到了仁当牛肉，这可是印尼国菜，吃上了真的太棒了，貌似是用各种香辛料咖喱粉炖煮后的牛肉，非常好吃，非常扎实，这个吃起来比昨晚的牛排幸福多了。叻沙比较贵比较一般。还有巴厘猪肉卷，卷很大很厚，一口下去有很丰富的香味。今晚吃的很好吃，很有特色，感谢本膳没能让我吃上。 晚上本来计划去runa屋顶泳池酒吧，但因为今天也泡过水，白白也吃撑了，就选择散步去看看岩石后酒吧。入住的时候还送了免费的鸡尾酒，可以去白嫖体验一下。气氛还可以，是乐队在表演，不是那种轰轰轰的DJ音乐。但就是不习惯蹦迪，玩不起来。两个人安静地在那嘬着免费的鸡尾酒，欣赏到了欧美白人大叔的熟练蹦迪。听了几首曲子后就溜了，终究是享受不来呢。 第五天 最后的躺平今天下午的飞机，所以上午还能好好享受完整的半天假期。早上起的稍微早一点，带着昨天超市买好的面包当早餐，去rimba特色的tevana花园晨间散步。这个花园还挺大的，里面有大片漂亮的草坪和各种花卉，看不太懂。人很少，应该没啥人会来这个景点，所以可以安安静静的散步一圈。早晨的时候到花园里呼吸一下，感觉还是挺不错滴。 然后还跑了一趟runa屋顶泳池，把昨晚没去的也去见识了一下。屋顶的泳池风景确实挺不错的，可以看到海，可惜太晒了，所以白白待不下去就撤退了。最后我们两兵分两路。我去rimba的无边泳池泡水晒太阳看书，白白去健身房。这个泳池感觉很不错啊，有一个半没在水池的躺椅，我可以躺在上面看书，哇塞这个体验太爽了。只要没在水里，即便偶尔被太阳晒着也不觉得热，很舒服。泡够了再随便游个两圈，就上岸躺在椅子上享受微风吹拂。很难阐述那种安逸和舒适，只能说舒服到容易睡着。 十一点多，就回房收拾行李啦，虽然恋恋不舍但还是得离开了。退房寄存行李，我们再次去TOGE吃午饭。这次点了心心念念的海南鸡饭和马来鱼咖喱，终于是正经地吃了一顿咖喱，冬阴功风味的那种，我超爱。这个马来鱼肉很大，很扎实，而且完全没有刺，这下真的爽吃咖喱了。再配上经典可口可乐，一口咖喱一口可乐，顶级。 吃完饭甚至还跑了趟精品店，想要买AYANA的客房睡衣，穿着真的很方便很舒服，可惜没有蓝色的了，最后我买了AYANA的深红色，白白买了RIMBA的绿色，也算是此行最大的纪念品。因为预先订好了送机的车，所以一点十五分准时上车前往机场。 至此，本次巴厘岛度假之旅正式结束。 小结这是一次非常完美的度假旅游，全程都很顺利。而且天气很好，每一天都是晴天，太给面子了，真的非常感谢！天气加持下，巴厘岛的海很蓝很美，度假酒店的泳池待着也很舒适。这次和白白也多次对齐行程主旨：不是旅行，而是度假。很成功，度假不会紧张，也不需要奔波，不会疲惫。身体和心理真的好好得到了休息。我也是第一次体会到度假的快乐，现在工作真的太紧张太忙太累了，幸好有这个假期让我好好恢复了一下。现在在候机室，过一会就登机啦，再见咯BALI～","categories":[{"name":"世界巡礼","slug":"世界巡礼","permalink":"https://rongyel.github.io/categories/%E4%B8%96%E7%95%8C%E5%B7%A1%E7%A4%BC/"}],"tags":[{"name":"巴厘岛","slug":"巴厘岛","permalink":"https://rongyel.github.io/tags/%E5%B7%B4%E5%8E%98%E5%B2%9B/"},{"name":"度假","slug":"度假","permalink":"https://rongyel.github.io/tags/%E5%BA%A6%E5%81%87/"},{"name":"海滩","slug":"海滩","permalink":"https://rongyel.github.io/tags/%E6%B5%B7%E6%BB%A9/"}]},{"title":"笔记人生","slug":"认真生活/笔记人生","date":"2025-06-29T15:30:34.000Z","updated":"2025-09-07T08:41:43.110Z","comments":true,"path":"posts/16fe55c8.html","permalink":"https://rongyel.github.io/posts/16fe55c8.html","excerpt":"","text":"笔记人生核心目标 发挥基本的markdown笔记能力 推行PARA笔记法，管理任务 记录个人见解，漫游回顾，以正思想。 开设事务档案，人生漫长，过目就忘。 相关项目1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192// 获取当前笔记名称（不含.md）const currentNoteName = dv.current().file.name.replace(\".md\", \"\");// 查询所有链接到当前 project 笔记的 `type=project` 笔记const projectPages = dv.pages() .where(p =&gt; p.type === \"projects\" &amp;&amp; p.file.outlinks.some(link =&gt; link.path === dv.current().file.path) ) .sort(p =&gt; p.file.cday, 'asc'); // 仍按创建时间排序// 状态显示函数（基于 done 状态）function getStatusIcon(project) { return project.done ? \"✅ 已完成\" : \"🟡 进行中\";}// 进度显示函数（支持多种格式）function getProgressDisplay(project) { if (project.done) return \"▮▮▮▮▮ 100%\"; if (!project.progress) return \"▯▯▯▯▯ 0%\"; // 处理不同进度格式 if (project.progress.includes(\"▮\")) { return project.progress; } else { const percent = parseInt(project.progress.toString().replace(/\\D/g, '')) || 0; const filled = Math.floor(percent / 20); return \"▮\".repeat(filled) + \"▯\".repeat(5-filled) + ` ${percent}%`; }}// 结项日期显示函数function getCompletionDate(project) { if (!project.done) return \" \"; if (project.completion) { return dv.date(project.completion).toISODate(); } if (project.file.mtime) { return project.file.mtime.toISODate(); // 降级使用最后修改时间 } return \"无记录\";}// 显示结果if (projectPages.length &gt; 0) { // 统计项目状态及关联笔记数量 const projectsWithNoteCount = projectPages.map(p =&gt; { const noteCount = dv.pages() .where(n =&gt; n.type === \"notes\" &amp;&amp; n.file.outlinks.some(link =&gt; link.path === p.file.path) ).length; return { ...p, noteCount, status: getStatusIcon(p), progress: \"▯▯▯▯▯ 0%\", completion: getCompletionDate(p) }; }); // 计算统计信息 const doneCount = projectsWithNoteCount.filter(p =&gt; p.done).length; const totalCount = projectsWithNoteCount.length; dv.table( [\"状态\", \"项目名称\", \"进度\", \"关联笔记\", \"创建时间\", \"结项日期\"], [ ...projectsWithNoteCount.map(p =&gt; [ p.status, p.file.link, p.progress, p.noteCount &gt; 0 ? `📝 ${p.noteCount}` : \"无\", p.file.cday.toISODate(), p.completion ]), // 统计行 [ `**${doneCount}/${totalCount}**`, `**项目统计**`, `**完成率: ${Math.round(doneCount/totalCount*100)}%**`, \"\", \"\", `**最近结项: ${projectsWithNoteCount.filter(p =&gt; p.done).sort((a,b) =&gt; b.file.mtime - a.file.mtime)[0]?.completion || \"无\"}**` ] ] );} else { dv.span(`当前 project 笔记没有链接到任何项目笔记`);}","categories":[{"name":"架构","slug":"架构","permalink":"https://rongyel.github.io/categories/%E6%9E%B6%E6%9E%84/"}],"tags":[{"name":"方法学论","slug":"方法学论","permalink":"https://rongyel.github.io/tags/%E6%96%B9%E6%B3%95%E5%AD%A6%E8%AE%BA/"},{"name":"笔记","slug":"笔记","permalink":"https://rongyel.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"身心健康","slug":"认真生活/身心健康","date":"2025-06-29T15:30:34.000Z","updated":"2025-09-07T08:41:43.111Z","comments":true,"path":"posts/4be51cea.html","permalink":"https://rongyel.github.io/posts/4be51cea.html","excerpt":"","text":"身心健康核心目标 健全的灵魂，寄宿在健全的精神和健全的身体上。 当前关注 保持运动习惯 戒除“无意义”手淫 里程碑2025-08-17运动日常化进入第四阶段建立早睡打卡项目，跟踪每日睡眠情况。正常睡眠就打卡，晚睡就记录原因。 相关项目12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697// 获取当前笔记名称（不含.md）const currentNoteName = dv.current().file.name.replace(\".md\", \"\");// 查询所有链接到当前 project 笔记的 `type=project` 笔记const projectPages = dv.pages() .where(p =&gt; p.type === \"projects\" &amp;&amp; p.file.outlinks.some(link =&gt; link.path === dv.current().file.path) ) .sort(p =&gt; p.file.cday, 'asc'); // 仍按创建时间排序// 状态显示函数（基于 done 状态）function getStatusIcon(project) { return project.done ? \"✅ 已完成\" : \"🟡 进行中\";}// 进度显示函数（支持多种格式）function getProgressDisplay(project) { if (project.done) return \"▮▮▮▮▮ 100%\"; if (!project.progress) return \"▯▯▯▯▯ 0%\"; // 处理不同进度格式 if (project.progress.includes(\"▮\")) { return project.progress; } else { const percent = parseInt(project.progress.toString().replace(/\\D/g, '')) || 0; const filled = Math.floor(percent / 20); return \"▮\".repeat(filled) + \"▯\".repeat(5-filled) + ` ${percent}%`; }}// 结项日期显示函数function getCompletionDate(project) { if (!project.done) return \" \"; if (project.completion) { return dv.date(project.completion).toISODate(); } if (project.file.mtime) { return project.file.mtime.toISODate(); // 降级使用最后修改时间 } return \"无记录\";}// 显示结果if (projectPages.length &gt; 0) { // 统计项目状态及关联笔记数量 const projectsWithNoteCount = projectPages.map(p =&gt; { const noteCount = dv.pages() .where(n =&gt; n.type === \"notes\" &amp;&amp; n.file.outlinks.some(link =&gt; link.path === p.file.path) ).length; return { ...p, noteCount, status: getStatusIcon(p), progress: getProgressDisplay(p), completion: getCompletionDate(p) }; }); // 计算统计信息 const doneCount = projectsWithNoteCount.filter(p =&gt; p.done).length; const totalCount = projectsWithNoteCount.length; dv.table( [\"状态\", \"项目名称\", \"进度\", \"关联笔记\", \"创建时间\", \"结项日期\"], [ ...projectsWithNoteCount.map(p =&gt; [ p.status, p.file.link, p.progress, p.noteCount &gt; 0 ? `📝 ${p.noteCount}` : \"无\", p.file.cday.toISODate(), p.completion ]), // 统计行（已修复） [ `**${doneCount}/${totalCount}**`, `**项目统计**`, `**完成率: ${Math.round(doneCount/totalCount*100)}%**`, \"\", \"\", `**最近结项: ${ projectsWithNoteCount .filter(p =&gt; p.done) .sort((a, b) =&gt; (b.file?.mtime || new Date(0)) - (a.file?.mtime || new Date(0))) [0]?.completion || \"无\" }**` ] ] );} else { dv.span(`当前领域笔记没有链接到任何项目笔记`);} 相关笔记123456789101112131415161718192021222324// 获取当前领域名const currentAreaName = dv.current().file.name.toLowerCase();// 查找所有 type 为 notes 且 tags 中包含领域名的笔记const relatedNotes = dv.pages() .where(p =&gt; p.type === \"notes\" &amp;&amp; Array.isArray(p.tags) &amp;&amp; p.tags.some(tag =&gt; typeof tag === \"string\" &amp;&amp; tag.toLowerCase().includes(currentAreaName) ) ) .sort(p =&gt; p.file.mtime, 'desc'); // 按修改时间倒序// 生成表格dv.table( [\"笔记名称\", \"最后修改时间\"], relatedNotes.map(p =&gt; [ p.file.link, p.file.mtime ? p.file.mtime.toFormat(\"yyyy-MM-dd HH:mm\") : \"未知\" ])); 相关资源12345678910111213141516171819202122232425262728293031323334353637// 当前领域名（小写）const currentAreaName = dv.current().file.name.toLowerCase();// 获取当前领域笔记的 tags（全部小写）const areaTags = (dv.current().tags || []) .filter(t =&gt; typeof t === \"string\") .map(t =&gt; t.toLowerCase());// 查找相关的 resourcesconst relatedResources = dv.pages() .where(p =&gt; p.type === \"resources\" &amp;&amp; Array.isArray(p.tags) &amp;&amp; ( // 方式1：tags 包含领域名 p.tags.some(tag =&gt; typeof tag === \"string\" &amp;&amp; tag.toLowerCase().includes(currentAreaName)) || // 方式2：tags 与领域的 tags 有交集 p.tags.some(tag =&gt; typeof tag === \"string\" &amp;&amp; areaTags.includes(tag.toLowerCase())) ) ) .sort(p =&gt; p.file.mtime, 'desc'); // 按最后修改时间降序// 输出表格dv.table( [\"资源笔记\", \"最后修改时间\", \"匹配标签\"], relatedResources.map(p =&gt; { const resTags = (p.tags || []).map(t =&gt; t.toLowerCase()); const matched = resTags.filter(t =&gt; t.includes(currentAreaName) || areaTags.includes(t)); return [ p.file.link, p.file.mtime ? p.file.mtime.toFormat(\"yyyy-MM-dd HH:mm\") : \"未知\", matched.join(\"，\") || \"—\" ]; }));","categories":[],"tags":[]},{"title":"舒适的家","slug":"认真生活/舒适的家","date":"2025-06-29T15:30:34.000Z","updated":"2025-09-07T08:41:43.109Z","comments":true,"path":"posts/a874d6b4.html","permalink":"https://rongyel.github.io/posts/a874d6b4.html","excerpt":"","text":"舒适的家 拥有一个舒适的家，住着喵、汪。 项目列表12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697// 获取当前笔记名称（不含.md）const currentNoteName = dv.current().file.name.replace(\".md\", \"\");// 查询所有链接到当前 project 笔记的 `type=project` 笔记const projectPages = dv.pages() .where(p =&gt; p.type === \"projects\" &amp;&amp; p.file.outlinks.some(link =&gt; link.path === dv.current().file.path) ) .sort(p =&gt; p.file.cday, 'asc'); // 仍按创建时间排序// 状态显示函数（基于 done 状态）function getStatusIcon(project) { return project.done ? \"✅ 已完成\" : \"🟡 进行中\";}// 进度显示函数（支持多种格式）function getProgressDisplay(project) { if (project.done) return \"▮▮▮▮▮ 100%\"; if (!project.progress) return \"▯▯▯▯▯ 0%\"; // 处理不同进度格式 if (project.progress.includes(\"▮\")) { return project.progress; } else { const percent = parseInt(project.progress.toString().replace(/\\D/g, '')) || 0; const filled = Math.floor(percent / 20); return \"▮\".repeat(filled) + \"▯\".repeat(5-filled) + ` ${percent}%`; }}// 结项日期显示函数function getCompletionDate(project) { if (!project.done) return \" \"; if (project.completion) { return dv.date(project.completion).toISODate(); } if (project.file.mtime) { return project.file.mtime.toISODate(); // 降级使用最后修改时间 } return \"无记录\";}// 显示结果if (projectPages.length &gt; 0) { // 统计项目状态及关联笔记数量 const projectsWithNoteCount = projectPages.map(p =&gt; { const noteCount = dv.pages() .where(n =&gt; n.type === \"notes\" &amp;&amp; n.file.outlinks.some(link =&gt; link.path === p.file.path) ).length; return { ...p, noteCount, status: getStatusIcon(p), progress: getProgressDisplay(p), completion: getCompletionDate(p) }; }); // 计算统计信息 const doneCount = projectsWithNoteCount.filter(p =&gt; p.done).length; const totalCount = projectsWithNoteCount.length; dv.table( [\"状态\", \"项目名称\", \"进度\", \"关联笔记\", \"创建时间\", \"结项日期\"], [ ...projectsWithNoteCount.map(p =&gt; [ p.status, p.file.link, p.progress, p.noteCount &gt; 0 ? `📝 ${p.noteCount}` : \"无\", p.file.cday.toISODate(), p.completion ]), // 统计行（已修复） [ `**${doneCount}/${totalCount}**`, `**项目统计**`, `**完成率: ${Math.round(doneCount/totalCount*100)}%**`, \"\", \"\", `**最近结项: ${ projectsWithNoteCount .filter(p =&gt; p.done) .sort((a, b) =&gt; (b.file?.mtime || new Date(0)) - (a.file?.mtime || new Date(0))) [0]?.completion || \"无\" }**` ] ] );} else { dv.span(`当前 project 笔记没有链接到任何项目笔记`);}","categories":[],"tags":[{"name":"家居","slug":"家居","permalink":"https://rongyel.github.io/tags/%E5%AE%B6%E5%B1%85/"},{"name":"深圳","slug":"深圳","permalink":"https://rongyel.github.io/tags/%E6%B7%B1%E5%9C%B3/"}]}],"categories":[{"name":"2025 东京单人游","slug":"2025-东京单人游","permalink":"https://rongyel.github.io/categories/2025-%E4%B8%9C%E4%BA%AC%E5%8D%95%E4%BA%BA%E6%B8%B8/"},{"name":"运动日常化","slug":"运动日常化","permalink":"https://rongyel.github.io/categories/%E8%BF%90%E5%8A%A8%E6%97%A5%E5%B8%B8%E5%8C%96/"},{"name":"个人浅见","slug":"个人浅见","permalink":"https://rongyel.github.io/categories/%E4%B8%AA%E4%BA%BA%E6%B5%85%E8%A7%81/"},{"name":"家有小红","slug":"家有小红","permalink":"https://rongyel.github.io/categories/%E5%AE%B6%E6%9C%89%E5%B0%8F%E7%BA%A2/"},{"name":"学习笔记","slug":"学习笔记","permalink":"https://rongyel.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"方案分析","slug":"方案分析","permalink":"https://rongyel.github.io/categories/%E6%96%B9%E6%A1%88%E5%88%86%E6%9E%90/"},{"name":"兴趣杂谈","slug":"兴趣杂谈","permalink":"https://rongyel.github.io/categories/%E5%85%B4%E8%B6%A3%E6%9D%82%E8%B0%88/"},{"name":"PARA","slug":"PARA","permalink":"https://rongyel.github.io/categories/PARA/"},{"name":"身心健康","slug":"身心健康","permalink":"https://rongyel.github.io/categories/%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7/"},{"name":"习惯打卡","slug":"习惯打卡","permalink":"https://rongyel.github.io/categories/%E4%B9%A0%E6%83%AF%E6%89%93%E5%8D%A1/"},{"name":"舒适的窝","slug":"舒适的窝","permalink":"https://rongyel.github.io/categories/%E8%88%92%E9%80%82%E7%9A%84%E7%AA%9D/"},{"name":"兴趣档案","slug":"兴趣档案","permalink":"https://rongyel.github.io/categories/%E5%85%B4%E8%B6%A3%E6%A1%A3%E6%A1%88/"},{"name":"旅行计划","slug":"旅行计划","permalink":"https://rongyel.github.io/categories/%E6%97%85%E8%A1%8C%E8%AE%A1%E5%88%92/"},{"name":"工作经验","slug":"工作经验","permalink":"https://rongyel.github.io/categories/%E5%B7%A5%E4%BD%9C%E7%BB%8F%E9%AA%8C/"},{"name":"小香入住计划","slug":"小香入住计划","permalink":"https://rongyel.github.io/categories/%E5%B0%8F%E9%A6%99%E5%85%A5%E4%BD%8F%E8%AE%A1%E5%88%92/"},{"name":"轻小说","slug":"轻小说","permalink":"https://rongyel.github.io/categories/%E8%BD%BB%E5%B0%8F%E8%AF%B4/"},{"name":"技术笔记","slug":"技术笔记","permalink":"https://rongyel.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"},{"name":"ASIC","slug":"ASIC","permalink":"https://rongyel.github.io/categories/ASIC/"},{"name":"解决方案","slug":"解决方案","permalink":"https://rongyel.github.io/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"},{"name":"工具套件","slug":"工具套件","permalink":"https://rongyel.github.io/categories/%E5%B7%A5%E5%85%B7%E5%A5%97%E4%BB%B6/"},{"name":"方法学论","slug":"方法学论","permalink":"https://rongyel.github.io/categories/%E6%96%B9%E6%B3%95%E5%AD%A6%E8%AE%BA/"},{"name":"闪念胶囊","slug":"闪念胶囊","permalink":"https://rongyel.github.io/categories/%E9%97%AA%E5%BF%B5%E8%83%B6%E5%9B%8A/"},{"name":"思维殿堂","slug":"思维殿堂","permalink":"https://rongyel.github.io/categories/%E6%80%9D%E7%BB%B4%E6%AE%BF%E5%A0%82/"},{"name":"日常随记","slug":"日常随记","permalink":"https://rongyel.github.io/categories/%E6%97%A5%E5%B8%B8%E9%9A%8F%E8%AE%B0/"},{"name":"购房笔记","slug":"购房笔记","permalink":"https://rongyel.github.io/categories/%E8%B4%AD%E6%88%BF%E7%AC%94%E8%AE%B0/"},{"name":"世界巡礼","slug":"世界巡礼","permalink":"https://rongyel.github.io/categories/%E4%B8%96%E7%95%8C%E5%B7%A1%E7%A4%BC/"},{"name":"架构","slug":"架构","permalink":"https://rongyel.github.io/categories/%E6%9E%B6%E6%9E%84/"}],"tags":[{"name":"旅游","slug":"旅游","permalink":"https://rongyel.github.io/tags/%E6%97%85%E6%B8%B8/"},{"name":"日本","slug":"日本","permalink":"https://rongyel.github.io/tags/%E6%97%A5%E6%9C%AC/"},{"name":"世界巡礼","slug":"世界巡礼","permalink":"https://rongyel.github.io/tags/%E4%B8%96%E7%95%8C%E5%B7%A1%E7%A4%BC/"},{"name":"身心健康","slug":"身心健康","permalink":"https://rongyel.github.io/tags/%E8%BA%AB%E5%BF%83%E5%81%A5%E5%BA%B7/"},{"name":"运动","slug":"运动","permalink":"https://rongyel.github.io/tags/%E8%BF%90%E5%8A%A8/"},{"name":"健康","slug":"健康","permalink":"https://rongyel.github.io/tags/%E5%81%A5%E5%BA%B7/"},{"name":"工作","slug":"工作","permalink":"https://rongyel.github.io/tags/%E5%B7%A5%E4%BD%9C/"},{"name":"人生","slug":"人生","permalink":"https://rongyel.github.io/tags/%E4%BA%BA%E7%94%9F/"},{"name":"爬宠","slug":"爬宠","permalink":"https://rongyel.github.io/tags/%E7%88%AC%E5%AE%A0/"},{"name":"红腿陆龟","slug":"红腿陆龟","permalink":"https://rongyel.github.io/tags/%E7%BA%A2%E8%85%BF%E9%99%86%E9%BE%9F/"},{"name":"家有小红","slug":"家有小红","permalink":"https://rongyel.github.io/tags/%E5%AE%B6%E6%9C%89%E5%B0%8F%E7%BA%A2/"},{"name":"造景","slug":"造景","permalink":"https://rongyel.github.io/tags/%E9%80%A0%E6%99%AF/"},{"name":"美食","slug":"美食","permalink":"https://rongyel.github.io/tags/%E7%BE%8E%E9%A3%9F/"},{"name":"餐厅","slug":"餐厅","permalink":"https://rongyel.github.io/tags/%E9%A4%90%E5%8E%85/"},{"name":"方法学论","slug":"方法学论","permalink":"https://rongyel.github.io/tags/%E6%96%B9%E6%B3%95%E5%AD%A6%E8%AE%BA/"},{"name":"PARA","slug":"PARA","permalink":"https://rongyel.github.io/tags/PARA/"},{"name":"Obsidian","slug":"Obsidian","permalink":"https://rongyel.github.io/tags/Obsidian/"},{"name":"家居","slug":"家居","permalink":"https://rongyel.github.io/tags/%E5%AE%B6%E5%B1%85/"},{"name":"舒适的家","slug":"舒适的家","permalink":"https://rongyel.github.io/tags/%E8%88%92%E9%80%82%E7%9A%84%E5%AE%B6/"},{"name":"游戏","slug":"游戏","permalink":"https://rongyel.github.io/tags/%E6%B8%B8%E6%88%8F/"},{"name":"死亡搁浅","slug":"死亡搁浅","permalink":"https://rongyel.github.io/tags/%E6%AD%BB%E4%BA%A1%E6%90%81%E6%B5%85/"},{"name":"深圳","slug":"深圳","permalink":"https://rongyel.github.io/tags/%E6%B7%B1%E5%9C%B3/"},{"name":"买房","slug":"买房","permalink":"https://rongyel.github.io/tags/%E4%B9%B0%E6%88%BF/"},{"name":"轻小说","slug":"轻小说","permalink":"https://rongyel.github.io/tags/%E8%BD%BB%E5%B0%8F%E8%AF%B4/"},{"name":"手淫","slug":"手淫","permalink":"https://rongyel.github.io/tags/%E6%89%8B%E6%B7%AB/"},{"name":"明日方舟","slug":"明日方舟","permalink":"https://rongyel.github.io/tags/%E6%98%8E%E6%97%A5%E6%96%B9%E8%88%9F/"},{"name":"肉鸽","slug":"肉鸽","permalink":"https://rongyel.github.io/tags/%E8%82%89%E9%B8%BD/"},{"name":"单人游","slug":"单人游","permalink":"https://rongyel.github.io/tags/%E5%8D%95%E4%BA%BA%E6%B8%B8/"},{"name":"东京","slug":"东京","permalink":"https://rongyel.github.io/tags/%E4%B8%9C%E4%BA%AC/"},{"name":"旅行","slug":"旅行","permalink":"https://rongyel.github.io/tags/%E6%97%85%E8%A1%8C/"},{"name":"芯片","slug":"芯片","permalink":"https://rongyel.github.io/tags/%E8%8A%AF%E7%89%87/"},{"name":"开发","slug":"开发","permalink":"https://rongyel.github.io/tags/%E5%BC%80%E5%8F%91/"},{"name":"健身","slug":"健身","permalink":"https://rongyel.github.io/tags/%E5%81%A5%E8%BA%AB/"},{"name":"跑步","slug":"跑步","permalink":"https://rongyel.github.io/tags/%E8%B7%91%E6%AD%A5/"},{"name":"搬家","slug":"搬家","permalink":"https://rongyel.github.io/tags/%E6%90%AC%E5%AE%B6/"},{"name":"宠物","slug":"宠物","permalink":"https://rongyel.github.io/tags/%E5%AE%A0%E7%89%A9/"},{"name":"动漫","slug":"动漫","permalink":"https://rongyel.github.io/tags/%E5%8A%A8%E6%BC%AB/"},{"name":"陆龟","slug":"陆龟","permalink":"https://rongyel.github.io/tags/%E9%99%86%E9%BE%9F/"},{"name":"人生感悟","slug":"人生感悟","permalink":"https://rongyel.github.io/tags/%E4%BA%BA%E7%94%9F%E6%84%9F%E6%82%9F/"},{"name":"观后感","slug":"观后感","permalink":"https://rongyel.github.io/tags/%E8%A7%82%E5%90%8E%E6%84%9F/"},{"name":"年度总结","slug":"年度总结","permalink":"https://rongyel.github.io/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"},{"name":"暗喻幻想","slug":"暗喻幻想","permalink":"https://rongyel.github.io/tags/%E6%9A%97%E5%96%BB%E5%B9%BB%E6%83%B3/"},{"name":"Atlus","slug":"Atlus","permalink":"https://rongyel.github.io/tags/Atlus/"},{"name":"JRPG","slug":"JRPG","permalink":"https://rongyel.github.io/tags/JRPG/"},{"name":"ARM","slug":"ARM","permalink":"https://rongyel.github.io/tags/ARM/"},{"name":"MMU","slug":"MMU","permalink":"https://rongyel.github.io/tags/MMU/"},{"name":"内存管理","slug":"内存管理","permalink":"https://rongyel.github.io/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"},{"name":"中断","slug":"中断","permalink":"https://rongyel.github.io/tags/%E4%B8%AD%E6%96%AD/"},{"name":"页表","slug":"页表","permalink":"https://rongyel.github.io/tags/%E9%A1%B5%E8%A1%A8/"},{"name":"算法","slug":"算法","permalink":"https://rongyel.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"功能安全","slug":"功能安全","permalink":"https://rongyel.github.io/tags/%E5%8A%9F%E8%83%BD%E5%AE%89%E5%85%A8/"},{"name":"CHI","slug":"CHI","permalink":"https://rongyel.github.io/tags/CHI/"},{"name":"AMBA","slug":"AMBA","permalink":"https://rongyel.github.io/tags/AMBA/"},{"name":"知识分享","slug":"知识分享","permalink":"https://rongyel.github.io/tags/%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/"},{"name":"数字IC","slug":"数字IC","permalink":"https://rongyel.github.io/tags/%E6%95%B0%E5%AD%97IC/"},{"name":"ASIC","slug":"ASIC","permalink":"https://rongyel.github.io/tags/ASIC/"},{"name":"Memory","slug":"Memory","permalink":"https://rongyel.github.io/tags/Memory/"},{"name":"GVim","slug":"GVim","permalink":"https://rongyel.github.io/tags/GVim/"},{"name":"Linux","slug":"Linux","permalink":"https://rongyel.github.io/tags/Linux/"},{"name":"工具","slug":"工具","permalink":"https://rongyel.github.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"HEXO","slug":"HEXO","permalink":"https://rongyel.github.io/tags/HEXO/"},{"name":"方法论","slug":"方法论","permalink":"https://rongyel.github.io/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"},{"name":"笔记","slug":"笔记","permalink":"https://rongyel.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"Markdown","slug":"Markdown","permalink":"https://rongyel.github.io/tags/Markdown/"},{"name":"笔记人生","slug":"笔记人生","permalink":"https://rongyel.github.io/tags/%E7%AC%94%E8%AE%B0%E4%BA%BA%E7%94%9F/"},{"name":"任务管理","slug":"任务管理","permalink":"https://rongyel.github.io/tags/%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86/"},{"name":"日记","slug":"日记","permalink":"https://rongyel.github.io/tags/%E6%97%A5%E8%AE%B0/"},{"name":"生活","slug":"生活","permalink":"https://rongyel.github.io/tags/%E7%94%9F%E6%B4%BB/"},{"name":"购房","slug":"购房","permalink":"https://rongyel.github.io/tags/%E8%B4%AD%E6%88%BF/"},{"name":"AI","slug":"AI","permalink":"https://rongyel.github.io/tags/AI/"},{"name":"Deepseek","slug":"Deepseek","permalink":"https://rongyel.github.io/tags/Deepseek/"},{"name":"计划","slug":"计划","permalink":"https://rongyel.github.io/tags/%E8%AE%A1%E5%88%92/"},{"name":"效率","slug":"效率","permalink":"https://rongyel.github.io/tags/%E6%95%88%E7%8E%87/"},{"name":"巴厘岛","slug":"巴厘岛","permalink":"https://rongyel.github.io/tags/%E5%B7%B4%E5%8E%98%E5%B2%9B/"},{"name":"度假","slug":"度假","permalink":"https://rongyel.github.io/tags/%E5%BA%A6%E5%81%87/"},{"name":"海滩","slug":"海滩","permalink":"https://rongyel.github.io/tags/%E6%B5%B7%E6%BB%A9/"}]}